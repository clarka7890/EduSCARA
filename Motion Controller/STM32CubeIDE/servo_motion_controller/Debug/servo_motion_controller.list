
servo_motion_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b460  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b628  0800b628  0000c628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f0  0800b8f0  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f0  0800b8f0  0000c8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f8  0800b8f8  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f8  0800b8f8  0000c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8fc  0800b8fc  0000c8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800b900  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000078  0800b978  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800b978  0000d504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014499  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003570  00000000  00000000  00021541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00024ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdb  00000000  00000000  00025b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026212  00000000  00000000  00026843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018777  00000000  00000000  0004ca55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e072a  00000000  00000000  000651cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001458f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  0014593c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0014abf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b610 	.word	0x0800b610

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	0800b610 	.word	0x0800b610

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96a 	b.w	8000efc <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14e      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	458c      	cmp	ip, r1
 8000c50:	4686      	mov	lr, r0
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	d962      	bls.n	8000d1e <__udivmoddi4+0xde>
 8000c58:	b14a      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f f68c 	uxth.w	r6, ip
 8000c76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb04 f106 	mul.w	r1, r4, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c96:	f080 8112 	bcs.w	8000ebe <__udivmoddi4+0x27e>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 810f 	bls.w	8000ebe <__udivmoddi4+0x27e>
 8000ca0:	3c02      	subs	r4, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cae:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f606 	mul.w	r6, r0, r6
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d90a      	bls.n	8000cd4 <__udivmoddi4+0x94>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc6:	f080 80fc 	bcs.w	8000ec2 <__udivmoddi4+0x282>
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	f240 80f9 	bls.w	8000ec2 <__udivmoddi4+0x282>
 8000cd0:	4463      	add	r3, ip
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0xa6>
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d905      	bls.n	8000cfa <__udivmoddi4+0xba>
 8000cee:	b10d      	cbz	r5, 8000cf4 <__udivmoddi4+0xb4>
 8000cf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e7f5      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d146      	bne.n	8000d90 <__udivmoddi4+0x150>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xcc>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f0c0 80f0 	bcc.w	8000eec <__udivmoddi4+0x2ac>
 8000d0c:	1a86      	subs	r6, r0, r2
 8000d0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d0e6      	beq.n	8000ce6 <__udivmoddi4+0xa6>
 8000d18:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1c:	e7e3      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x204>
 8000d24:	eba1 040c 	sub.w	r4, r1, ip
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb07 f006 	mul.w	r0, r7, r6
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x11c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x11a>
 8000d54:	4298      	cmp	r0, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	1a1c      	subs	r4, r3, r0
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d66:	fb08 4410 	mls	r4, r8, r0, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb00 f707 	mul.w	r7, r0, r7
 8000d72:	429f      	cmp	r7, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x148>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x146>
 8000d80:	429f      	cmp	r7, r3
 8000d82:	f200 80b0 	bhi.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d86:	4620      	mov	r0, r4
 8000d88:	1bdb      	subs	r3, r3, r7
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0x9c>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da0:	fa04 f301 	lsl.w	r3, r4, r1
 8000da4:	ea43 030c 	orr.w	r3, r3, ip
 8000da8:	40f4      	lsrs	r4, r6
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	0c38      	lsrs	r0, r7, #16
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb4 fef0 	udiv	lr, r4, r0
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x1a6>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd6:	f080 8084 	bcs.w	8000ee2 <__udivmoddi4+0x2a2>
 8000dda:	45a1      	cmp	r9, r4
 8000ddc:	f240 8081 	bls.w	8000ee2 <__udivmoddi4+0x2a2>
 8000de0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	eba4 0409 	sub.w	r4, r4, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df2:	fb00 4413 	mls	r4, r0, r3, r4
 8000df6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x1d2>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e08:	d267      	bcs.n	8000eda <__udivmoddi4+0x29a>
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d965      	bls.n	8000eda <__udivmoddi4+0x29a>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e16:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	46ce      	mov	lr, r9
 8000e22:	469c      	mov	ip, r3
 8000e24:	d351      	bcc.n	8000eca <__udivmoddi4+0x28a>
 8000e26:	d04e      	beq.n	8000ec6 <__udivmoddi4+0x286>
 8000e28:	b155      	cbz	r5, 8000e40 <__udivmoddi4+0x200>
 8000e2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e32:	fa04 f606 	lsl.w	r6, r4, r6
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e750      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000e44:	f1c2 0320 	rsb	r3, r2, #32
 8000e48:	fa20 f103 	lsr.w	r1, r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa24 f303 	lsr.w	r3, r4, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	430c      	orrs	r4, r1
 8000e58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3110 	mls	r1, r8, r0, r3
 8000e6c:	0c23      	lsrs	r3, r4, #16
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e72:	fb00 f107 	mul.w	r1, r0, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x24c>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e82:	d22c      	bcs.n	8000ede <__udivmoddi4+0x29e>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d92a      	bls.n	8000ede <__udivmoddi4+0x29e>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e94:	fb08 3311 	mls	r3, r8, r1, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x276>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eac:	d213      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d911      	bls.n	8000ed6 <__udivmoddi4+0x296>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	1ae4      	subs	r4, r4, r3
 8000eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ebc:	e739      	b.n	8000d32 <__udivmoddi4+0xf2>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	e6f0      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e706      	b.n	8000cd4 <__udivmoddi4+0x94>
 8000ec6:	45c8      	cmp	r8, r9
 8000ec8:	d2ae      	bcs.n	8000e28 <__udivmoddi4+0x1e8>
 8000eca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ece:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	e7a8      	b.n	8000e28 <__udivmoddi4+0x1e8>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	e7ed      	b.n	8000eb6 <__udivmoddi4+0x276>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e799      	b.n	8000e12 <__udivmoddi4+0x1d2>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e7d4      	b.n	8000e8c <__udivmoddi4+0x24c>
 8000ee2:	46d6      	mov	lr, sl
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1a6>
 8000ee6:	4463      	add	r3, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74d      	b.n	8000d88 <__udivmoddi4+0x148>
 8000eec:	4606      	mov	r6, r0
 8000eee:	4623      	mov	r3, r4
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e70f      	b.n	8000d14 <__udivmoddi4+0xd4>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	e730      	b.n	8000d5c <__udivmoddi4+0x11c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xb8>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f42:	4a1e      	ldr	r2, [pc, #120]	@ (8000fbc <MX_ADC1_Init+0xbc>)
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f62:	f003 fe49 	bl	8004bf8 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 fd36 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f70:	230a      	movs	r3, #10
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f82:	f003 ffab 	bl	8004edc <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fd26 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f90:	230b      	movs	r3, #11
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f9e:	f003 ff9d 	bl	8004edc <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fa8:	f000 fd18 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000094 	.word	0x20000094
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <HAL_ADC_MspInit+0xdc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d157      	bne.n	8001092 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <HAL_ADC_MspInit+0xe4>)
 800102e:	f004 fe87 	bl	8005d40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001034:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <HAL_ADC_MspInit+0xec>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001078:	f004 faf2 	bl	8005660 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001082:	f000 fcab 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	200000dc 	.word	0x200000dc
 80010ac:	40026410 	.word	0x40026410

080010b0 <start>:
servo_t axis_2;
servo_t axis_3;
scara_t scara_0;

void start(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	@ 0x38
 80010b4:	af02      	add	r7, sp, #8
	//#define DEBUGGING
	#ifdef DEBUGGING
		uart_channel = &huart3;
	#else
		uart_channel = &huart2;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <start+0x80>)
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <start+0x84>)
 80010ba:	601a      	str	r2, [r3, #0]
	#endif

	// default values for scara robot ac3100
	float link_1 = 0.125;
 80010bc:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float link_2 = 0.1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <start+0x88>)
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	float z_min = 0.095;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <start+0x8c>)
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
	float z_max = 0.15;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <start+0x90>)
 80010cc:	623b      	str	r3, [r7, #32]
	float settling_time = 1.0;
 80010ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010d2:	61fb      	str	r3, [r7, #28]
	float P_0 = 1.3;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <start+0x94>)
 80010d6:	61bb      	str	r3, [r7, #24]
	float I_0 = 0.01;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <start+0x98>)
 80010da:	617b      	str	r3, [r7, #20]
	float D_0 = 0.001;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <start+0x9c>)
 80010de:	613b      	str	r3, [r7, #16]
	float P_1 = 1.3;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <start+0x94>)
 80010e2:	60fb      	str	r3, [r7, #12]
	float I_1 = 0.01;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <start+0x98>)
 80010e6:	60bb      	str	r3, [r7, #8]
	float D_1 = 0.001;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <start+0x9c>)
 80010ea:	607b      	str	r3, [r7, #4]

	// initialise scara with default values
	scara_init(&scara_0, &axis_0, &axis_1, &axis_2, &axis_3, link_1, link_2, z_min, z_max,
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <start+0xa0>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	ed97 5a01 	vldr	s10, [r7, #4]
 80010f4:	edd7 4a02 	vldr	s9, [r7, #8]
 80010f8:	ed97 4a03 	vldr	s8, [r7, #12]
 80010fc:	edd7 3a04 	vldr	s7, [r7, #16]
 8001100:	ed97 3a05 	vldr	s6, [r7, #20]
 8001104:	edd7 2a06 	vldr	s5, [r7, #24]
 8001108:	ed97 2a07 	vldr	s4, [r7, #28]
 800110c:	edd7 1a08 	vldr	s3, [r7, #32]
 8001110:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8001114:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001118:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <start+0xa4>)
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <start+0xa8>)
 8001120:	490e      	ldr	r1, [pc, #56]	@ (800115c <start+0xac>)
 8001122:	480f      	ldr	r0, [pc, #60]	@ (8001160 <start+0xb0>)
 8001124:	f000 fcf6 	bl	8001b14 <scara_init>
			   settling_time,
			   P_0, I_0, D_0, P_1, I_1, D_1);
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	@ 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000013c 	.word	0x2000013c
 8001134:	20000324 	.word	0x20000324
 8001138:	3dcccccd 	.word	0x3dcccccd
 800113c:	3dc28f5c 	.word	0x3dc28f5c
 8001140:	3e19999a 	.word	0x3e19999a
 8001144:	3fa66666 	.word	0x3fa66666
 8001148:	3c23d70a 	.word	0x3c23d70a
 800114c:	3a83126f 	.word	0x3a83126f
 8001150:	2000020c 	.word	0x2000020c
 8001154:	200001d8 	.word	0x200001d8
 8001158:	200001a4 	.word	0x200001a4
 800115c:	20000170 	.word	0x20000170
 8001160:	20000240 	.word	0x20000240

08001164 <demo_sequence>:

void demo_sequence()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0
	float link_1 = 0.125;
 800116a:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
	float link_2 = 0.1;
 8001170:	4bb2      	ldr	r3, [pc, #712]	@ (800143c <demo_sequence+0x2d8>)
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
	float z_min = 0.095;
 8001174:	4bb2      	ldr	r3, [pc, #712]	@ (8001440 <demo_sequence+0x2dc>)
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float z_max = 0.15;
 8001178:	4bb2      	ldr	r3, [pc, #712]	@ (8001444 <demo_sequence+0x2e0>)
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float settling_time = 0.5;
 800117c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
	float P_0 = 1.3;
 8001182:	4bb1      	ldr	r3, [pc, #708]	@ (8001448 <demo_sequence+0x2e4>)
 8001184:	623b      	str	r3, [r7, #32]
	float I_0 = 0.01;
 8001186:	4bb1      	ldr	r3, [pc, #708]	@ (800144c <demo_sequence+0x2e8>)
 8001188:	61fb      	str	r3, [r7, #28]
	float D_0 = 0.001;
 800118a:	4bb1      	ldr	r3, [pc, #708]	@ (8001450 <demo_sequence+0x2ec>)
 800118c:	61bb      	str	r3, [r7, #24]
	float P_1 = 1.3;
 800118e:	4bae      	ldr	r3, [pc, #696]	@ (8001448 <demo_sequence+0x2e4>)
 8001190:	617b      	str	r3, [r7, #20]
	float I_1 = 0.01;
 8001192:	4bae      	ldr	r3, [pc, #696]	@ (800144c <demo_sequence+0x2e8>)
 8001194:	613b      	str	r3, [r7, #16]
	float D_1 = 0.001;
 8001196:	4bae      	ldr	r3, [pc, #696]	@ (8001450 <demo_sequence+0x2ec>)
 8001198:	60fb      	str	r3, [r7, #12]

	scara_reinit(&scara_0,
 800119a:	ed97 5a03 	vldr	s10, [r7, #12]
 800119e:	edd7 4a04 	vldr	s9, [r7, #16]
 80011a2:	ed97 4a05 	vldr	s8, [r7, #20]
 80011a6:	edd7 3a06 	vldr	s7, [r7, #24]
 80011aa:	ed97 3a07 	vldr	s6, [r7, #28]
 80011ae:	edd7 2a08 	vldr	s5, [r7, #32]
 80011b2:	ed97 2a09 	vldr	s4, [r7, #36]	@ 0x24
 80011b6:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 80011ba:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 80011be:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 80011c2:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80011c6:	48a3      	ldr	r0, [pc, #652]	@ (8001454 <demo_sequence+0x2f0>)
 80011c8:	f000 fd01 	bl	8001bce <scara_reinit>
				 link_1, link_2, z_min, z_max,
				 settling_time,
				 P_0, I_0, D_0, P_1, I_1, D_1);

	scara_auto_calibrate(&scara_0);
 80011cc:	48a1      	ldr	r0, [pc, #644]	@ (8001454 <demo_sequence+0x2f0>)
 80011ce:	f000 fd3b 	bl	8001c48 <scara_auto_calibrate>

	float z_mid = (z_min + z_max) / 2.0;
 80011d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	edc7 7a02 	vstr	s15, [r7, #8]
	float t = 0.5;
 80011ea:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80011ee:	607b      	str	r3, [r7, #4]
	float t2 = 1.0;
 80011f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011f4:	603b      	str	r3, [r7, #0]

	z_min = 0.13;
 80011f6:	4b98      	ldr	r3, [pc, #608]	@ (8001458 <demo_sequence+0x2f4>)
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (1)
	{
		// move
		scara_move_coord(&scara_0, 0.0, 0.15, 0.0, z_max, t);
 80011fa:	ed97 2a01 	vldr	s4, [r7, #4]
 80011fe:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001202:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 800145c <demo_sequence+0x2f8>
 8001206:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001460 <demo_sequence+0x2fc>
 800120a:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 800145c <demo_sequence+0x2f8>
 800120e:	4891      	ldr	r0, [pc, #580]	@ (8001454 <demo_sequence+0x2f0>)
 8001210:	f000 fd6e 	bl	8001cf0 <scara_move_coord>
		// down
		scara_move_coord(&scara_0, 0.0, 0.15, 0.0, z_min, t);
 8001214:	ed97 2a01 	vldr	s4, [r7, #4]
 8001218:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800121c:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 800145c <demo_sequence+0x2f8>
 8001220:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8001460 <demo_sequence+0x2fc>
 8001224:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 800145c <demo_sequence+0x2f8>
 8001228:	488a      	ldr	r0, [pc, #552]	@ (8001454 <demo_sequence+0x2f0>)
 800122a:	f000 fd61 	bl	8001cf0 <scara_move_coord>
		// up
		scara_move_coord(&scara_0, 0.0, 0.15, 0.0, z_max, t);
 800122e:	ed97 2a01 	vldr	s4, [r7, #4]
 8001232:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001236:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 800145c <demo_sequence+0x2f8>
 800123a:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8001460 <demo_sequence+0x2fc>
 800123e:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800145c <demo_sequence+0x2f8>
 8001242:	4884      	ldr	r0, [pc, #528]	@ (8001454 <demo_sequence+0x2f0>)
 8001244:	f000 fd54 	bl	8001cf0 <scara_move_coord>
		// move
		scara_move_coord(&scara_0, 0.1, 0.1, 0.0, z_max, t);
 8001248:	ed97 2a01 	vldr	s4, [r7, #4]
 800124c:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001250:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800145c <demo_sequence+0x2f8>
 8001254:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8001464 <demo_sequence+0x300>
 8001258:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8001464 <demo_sequence+0x300>
 800125c:	487d      	ldr	r0, [pc, #500]	@ (8001454 <demo_sequence+0x2f0>)
 800125e:	f000 fd47 	bl	8001cf0 <scara_move_coord>
		// down
		scara_move_coord(&scara_0, 0.1, 0.1, -180, z_min, t);
 8001262:	ed97 2a01 	vldr	s4, [r7, #4]
 8001266:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800126a:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 8001468 <demo_sequence+0x304>
 800126e:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8001464 <demo_sequence+0x300>
 8001272:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8001464 <demo_sequence+0x300>
 8001276:	4877      	ldr	r0, [pc, #476]	@ (8001454 <demo_sequence+0x2f0>)
 8001278:	f000 fd3a 	bl	8001cf0 <scara_move_coord>
		// up
		scara_move_coord(&scara_0, 0.1, 0.1, 0.0, z_max, t);
 800127c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001280:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001284:	ed9f 1a75 	vldr	s2, [pc, #468]	@ 800145c <demo_sequence+0x2f8>
 8001288:	eddf 0a76 	vldr	s1, [pc, #472]	@ 8001464 <demo_sequence+0x300>
 800128c:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8001464 <demo_sequence+0x300>
 8001290:	4870      	ldr	r0, [pc, #448]	@ (8001454 <demo_sequence+0x2f0>)
 8001292:	f000 fd2d 	bl	8001cf0 <scara_move_coord>
		// zig-zag
		scara_move_coord(&scara_0, 0.175, 0.08, 0.0, z_min, t);
 8001296:	ed97 2a01 	vldr	s4, [r7, #4]
 800129a:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800129e:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 800145c <demo_sequence+0x2f8>
 80012a2:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800146c <demo_sequence+0x308>
 80012a6:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8001470 <demo_sequence+0x30c>
 80012aa:	486a      	ldr	r0, [pc, #424]	@ (8001454 <demo_sequence+0x2f0>)
 80012ac:	f000 fd20 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, 0.06, 0.0, z_max, t);
 80012b0:	ed97 2a01 	vldr	s4, [r7, #4]
 80012b4:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 80012b8:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 800145c <demo_sequence+0x2f8>
 80012bc:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8001474 <demo_sequence+0x310>
 80012c0:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8001470 <demo_sequence+0x30c>
 80012c4:	4863      	ldr	r0, [pc, #396]	@ (8001454 <demo_sequence+0x2f0>)
 80012c6:	f000 fd13 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, 0.04, 0.0, z_min, t);
 80012ca:	ed97 2a01 	vldr	s4, [r7, #4]
 80012ce:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 80012d2:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 800145c <demo_sequence+0x2f8>
 80012d6:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8001478 <demo_sequence+0x314>
 80012da:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8001470 <demo_sequence+0x30c>
 80012de:	485d      	ldr	r0, [pc, #372]	@ (8001454 <demo_sequence+0x2f0>)
 80012e0:	f000 fd06 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, 0.02, 180.0, z_max, t);
 80012e4:	ed97 2a01 	vldr	s4, [r7, #4]
 80012e8:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 80012ec:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 800147c <demo_sequence+0x318>
 80012f0:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8001480 <demo_sequence+0x31c>
 80012f4:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001470 <demo_sequence+0x30c>
 80012f8:	4856      	ldr	r0, [pc, #344]	@ (8001454 <demo_sequence+0x2f0>)
 80012fa:	f000 fcf9 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, 0.0, 0.0, z_min, t);
 80012fe:	ed97 2a01 	vldr	s4, [r7, #4]
 8001302:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 8001306:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800145c <demo_sequence+0x2f8>
 800130a:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800145c <demo_sequence+0x2f8>
 800130e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8001470 <demo_sequence+0x30c>
 8001312:	4850      	ldr	r0, [pc, #320]	@ (8001454 <demo_sequence+0x2f0>)
 8001314:	f000 fcec 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, -0.02, 180.0, z_max, t);
 8001318:	ed97 2a01 	vldr	s4, [r7, #4]
 800131c:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001320:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800147c <demo_sequence+0x318>
 8001324:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8001484 <demo_sequence+0x320>
 8001328:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001470 <demo_sequence+0x30c>
 800132c:	4849      	ldr	r0, [pc, #292]	@ (8001454 <demo_sequence+0x2f0>)
 800132e:	f000 fcdf 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.175, -0.04, 0.0, z_min, t);
 8001332:	ed97 2a01 	vldr	s4, [r7, #4]
 8001336:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800133a:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800145c <demo_sequence+0x2f8>
 800133e:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8001488 <demo_sequence+0x324>
 8001342:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8001470 <demo_sequence+0x30c>
 8001346:	4843      	ldr	r0, [pc, #268]	@ (8001454 <demo_sequence+0x2f0>)
 8001348:	f000 fcd2 	bl	8001cf0 <scara_move_coord>
		// move
		scara_move_coord(&scara_0, 0.0, 0.15, 0.0, z_max, t2);
 800134c:	ed97 2a00 	vldr	s4, [r7]
 8001350:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8001354:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 800145c <demo_sequence+0x2f8>
 8001358:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8001460 <demo_sequence+0x2fc>
 800135c:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800145c <demo_sequence+0x2f8>
 8001360:	483c      	ldr	r0, [pc, #240]	@ (8001454 <demo_sequence+0x2f0>)
 8001362:	f000 fcc5 	bl	8001cf0 <scara_move_coord>
		// square
		scara_move_coord(&scara_0, -0.05, 0.2, 90.0, z_min, t);
 8001366:	ed97 2a01 	vldr	s4, [r7, #4]
 800136a:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800136e:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 800148c <demo_sequence+0x328>
 8001372:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8001490 <demo_sequence+0x32c>
 8001376:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001494 <demo_sequence+0x330>
 800137a:	4836      	ldr	r0, [pc, #216]	@ (8001454 <demo_sequence+0x2f0>)
 800137c:	f000 fcb8 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, -0.05, 0.1, 0.0, z_min, t);
 8001380:	ed97 2a01 	vldr	s4, [r7, #4]
 8001384:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 8001388:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800145c <demo_sequence+0x2f8>
 800138c:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001464 <demo_sequence+0x300>
 8001390:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001494 <demo_sequence+0x330>
 8001394:	482f      	ldr	r0, [pc, #188]	@ (8001454 <demo_sequence+0x2f0>)
 8001396:	f000 fcab 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.05, 0.1, -90.0, z_min, t);
 800139a:	ed97 2a01 	vldr	s4, [r7, #4]
 800139e:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 80013a2:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 8001498 <demo_sequence+0x334>
 80013a6:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001464 <demo_sequence+0x300>
 80013aa:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800149c <demo_sequence+0x338>
 80013ae:	4829      	ldr	r0, [pc, #164]	@ (8001454 <demo_sequence+0x2f0>)
 80013b0:	f000 fc9e 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.05, 0.2, -180.0, z_min, t);
 80013b4:	ed97 2a01 	vldr	s4, [r7, #4]
 80013b8:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 80013bc:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8001468 <demo_sequence+0x304>
 80013c0:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8001490 <demo_sequence+0x32c>
 80013c4:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800149c <demo_sequence+0x338>
 80013c8:	4822      	ldr	r0, [pc, #136]	@ (8001454 <demo_sequence+0x2f0>)
 80013ca:	f000 fc91 	bl	8001cf0 <scara_move_coord>
		// reverse square
		scara_move_coord(&scara_0, -0.05, 0.2, -90.0, z_mid, t);
 80013ce:	ed97 2a01 	vldr	s4, [r7, #4]
 80013d2:	edd7 1a02 	vldr	s3, [r7, #8]
 80013d6:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8001498 <demo_sequence+0x334>
 80013da:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001490 <demo_sequence+0x32c>
 80013de:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001494 <demo_sequence+0x330>
 80013e2:	481c      	ldr	r0, [pc, #112]	@ (8001454 <demo_sequence+0x2f0>)
 80013e4:	f000 fc84 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, -0.05, 0.1, 0.0, z_mid, t);
 80013e8:	ed97 2a01 	vldr	s4, [r7, #4]
 80013ec:	edd7 1a02 	vldr	s3, [r7, #8]
 80013f0:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 800145c <demo_sequence+0x2f8>
 80013f4:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001464 <demo_sequence+0x300>
 80013f8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001494 <demo_sequence+0x330>
 80013fc:	4815      	ldr	r0, [pc, #84]	@ (8001454 <demo_sequence+0x2f0>)
 80013fe:	f000 fc77 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.05, 0.1, 90.0, z_mid, t);
 8001402:	ed97 2a01 	vldr	s4, [r7, #4]
 8001406:	edd7 1a02 	vldr	s3, [r7, #8]
 800140a:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 800148c <demo_sequence+0x328>
 800140e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001464 <demo_sequence+0x300>
 8001412:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800149c <demo_sequence+0x338>
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <demo_sequence+0x2f0>)
 8001418:	f000 fc6a 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.05, 0.2, 180.0, z_mid, t);
 800141c:	ed97 2a01 	vldr	s4, [r7, #4]
 8001420:	edd7 1a02 	vldr	s3, [r7, #8]
 8001424:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800147c <demo_sequence+0x318>
 8001428:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001490 <demo_sequence+0x32c>
 800142c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800149c <demo_sequence+0x338>
 8001430:	4808      	ldr	r0, [pc, #32]	@ (8001454 <demo_sequence+0x2f0>)
 8001432:	f000 fc5d 	bl	8001cf0 <scara_move_coord>
		scara_move_coord(&scara_0, 0.0, 0.15, 0.0, z_max, t);
 8001436:	bf00      	nop
 8001438:	e6df      	b.n	80011fa <demo_sequence+0x96>
 800143a:	bf00      	nop
 800143c:	3dcccccd 	.word	0x3dcccccd
 8001440:	3dc28f5c 	.word	0x3dc28f5c
 8001444:	3e19999a 	.word	0x3e19999a
 8001448:	3fa66666 	.word	0x3fa66666
 800144c:	3c23d70a 	.word	0x3c23d70a
 8001450:	3a83126f 	.word	0x3a83126f
 8001454:	20000240 	.word	0x20000240
 8001458:	3e051eb8 	.word	0x3e051eb8
 800145c:	00000000 	.word	0x00000000
 8001460:	3e19999a 	.word	0x3e19999a
 8001464:	3dcccccd 	.word	0x3dcccccd
 8001468:	c3340000 	.word	0xc3340000
 800146c:	3da3d70a 	.word	0x3da3d70a
 8001470:	3e333333 	.word	0x3e333333
 8001474:	3d75c28f 	.word	0x3d75c28f
 8001478:	3d23d70a 	.word	0x3d23d70a
 800147c:	43340000 	.word	0x43340000
 8001480:	3ca3d70a 	.word	0x3ca3d70a
 8001484:	bca3d70a 	.word	0xbca3d70a
 8001488:	bd23d70a 	.word	0xbd23d70a
 800148c:	42b40000 	.word	0x42b40000
 8001490:	3e4ccccd 	.word	0x3e4ccccd
 8001494:	bd4ccccd 	.word	0xbd4ccccd
 8001498:	c2b40000 	.word	0xc2b40000
 800149c:	3d4ccccd 	.word	0x3d4ccccd

080014a0 <update>:
	}
}

void update(void)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b0b0      	sub	sp, #192	@ 0xc0
 80014a4:	af00      	add	r7, sp, #0
	// DEMO SEQUENCE - SHORT PB7 TO GND TO ACTIVATE
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 80014a6:	2180      	movs	r1, #128	@ 0x80
 80014a8:	48b4      	ldr	r0, [pc, #720]	@ (800177c <update+0x2dc>)
 80014aa:	f004 fddd 	bl	8006068 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <update+0x18>
		demo_sequence();
 80014b4:	f7ff fe56 	bl	8001164 <demo_sequence>
	}

	int32_t success_flag = 1; // success flag
 80014b8:	2301      	movs	r3, #1
 80014ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	uint8_t rxdata[48];  // 48 bytes total

	if (HAL_UART_Receive(uart_channel, rxdata, 48, HAL_MAX_DELAY) == HAL_OK)
 80014be:	4bb0      	ldr	r3, [pc, #704]	@ (8001780 <update+0x2e0>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	2230      	movs	r2, #48	@ 0x30
 80014cc:	f006 fba3 	bl	8007c16 <HAL_UART_Receive>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 814e 	bne.w	8001774 <update+0x2d4>
	{
		memcpy(&command, &rxdata, sizeof(command_t));
 80014d8:	4baa      	ldr	r3, [pc, #680]	@ (8001784 <update+0x2e4>)
 80014da:	461d      	mov	r5, r3
 80014dc:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

		switch (command.command_id)
 80014f0:	4ba4      	ldr	r3, [pc, #656]	@ (8001784 <update+0x2e4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	f200 813b 	bhi.w	8001772 <update+0x2d2>
 80014fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <update+0x64>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001521 	.word	0x08001521
 8001508:	080015c3 	.word	0x080015c3
 800150c:	080015dd 	.word	0x080015dd
 8001510:	0800161d 	.word	0x0800161d
 8001514:	0800167d 	.word	0x0800167d
 8001518:	080016dd 	.word	0x080016dd
 800151c:	08001719 	.word	0x08001719
		{
		case 1:			// SCARA_INITIALISE
			// |0001   |aaaa  |bbbb  |cccc |dddd |eeee         |ffff|gggg|hhhh|iiii|jjjj|kkkk|
			// |command|link_1|link_2|z_min|z_max|settling_time|P_0 |I_0 |D_0 |P_1 |I_1 |D_1 |

			float link_1; memcpy(&link_1, &command.values[0], sizeof(float));
 8001520:	4b98      	ldr	r3, [pc, #608]	@ (8001784 <update+0x2e4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			float link_2; memcpy(&link_2, &command.values[1], sizeof(float));
 8001528:	4b96      	ldr	r3, [pc, #600]	@ (8001784 <update+0x2e4>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			float z_min; memcpy(&z_min, &command.values[2], sizeof(float));
 8001530:	4b94      	ldr	r3, [pc, #592]	@ (8001784 <update+0x2e4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			float z_max; memcpy(&z_max, &command.values[3], sizeof(float));
 8001538:	4b92      	ldr	r3, [pc, #584]	@ (8001784 <update+0x2e4>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			float settling_time; memcpy(&settling_time, &command.values[4], sizeof(float));
 800153e:	4b91      	ldr	r3, [pc, #580]	@ (8001784 <update+0x2e4>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	67bb      	str	r3, [r7, #120]	@ 0x78
			float P_0; memcpy(&P_0, &command.values[5], sizeof(float));
 8001544:	4b8f      	ldr	r3, [pc, #572]	@ (8001784 <update+0x2e4>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	677b      	str	r3, [r7, #116]	@ 0x74
			float I_0; memcpy(&I_0, &command.values[6], sizeof(float));
 800154a:	4b8e      	ldr	r3, [pc, #568]	@ (8001784 <update+0x2e4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	673b      	str	r3, [r7, #112]	@ 0x70
			float D_0; memcpy(&D_0, &command.values[7], sizeof(float));
 8001550:	4b8c      	ldr	r3, [pc, #560]	@ (8001784 <update+0x2e4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	66fb      	str	r3, [r7, #108]	@ 0x6c
			float P_1; memcpy(&P_1, &command.values[8], sizeof(float));
 8001556:	4b8b      	ldr	r3, [pc, #556]	@ (8001784 <update+0x2e4>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	66bb      	str	r3, [r7, #104]	@ 0x68
			float I_1; memcpy(&I_1, &command.values[9], sizeof(float));
 800155c:	4b89      	ldr	r3, [pc, #548]	@ (8001784 <update+0x2e4>)
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	667b      	str	r3, [r7, #100]	@ 0x64
			float D_1; memcpy(&D_1, &command.values[10], sizeof(float));
 8001562:	4b88      	ldr	r3, [pc, #544]	@ (8001784 <update+0x2e4>)
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	663b      	str	r3, [r7, #96]	@ 0x60

			scara_reinit(&scara_0,
 8001568:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800156c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001570:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8001574:	ed97 6a1f 	vldr	s12, [r7, #124]	@ 0x7c
 8001578:	edd7 5a1e 	vldr	s11, [r7, #120]	@ 0x78
 800157c:	edd7 2a1d 	vldr	s5, [r7, #116]	@ 0x74
 8001580:	ed97 3a1c 	vldr	s6, [r7, #112]	@ 0x70
 8001584:	edd7 3a1b 	vldr	s7, [r7, #108]	@ 0x6c
 8001588:	ed97 4a1a 	vldr	s8, [r7, #104]	@ 0x68
 800158c:	edd7 4a19 	vldr	s9, [r7, #100]	@ 0x64
 8001590:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8001594:	eeb0 2a65 	vmov.f32	s4, s11
 8001598:	eef0 1a46 	vmov.f32	s3, s12
 800159c:	eeb0 1a66 	vmov.f32	s2, s13
 80015a0:	eef0 0a47 	vmov.f32	s1, s14
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	4877      	ldr	r0, [pc, #476]	@ (8001788 <update+0x2e8>)
 80015aa:	f000 fb10 	bl	8001bce <scara_reinit>
					     link_1, link_2, z_min, z_max,
					     settling_time,
					     P_0, I_0, D_0, P_1, I_1, D_1);

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80015ae:	4b74      	ldr	r3, [pc, #464]	@ (8001780 <update+0x2e0>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	2204      	movs	r2, #4
 80015bc:	f006 faa0 	bl	8007b00 <HAL_UART_Transmit>

			break;
 80015c0:	e0d8      	b.n	8001774 <update+0x2d4>

		case 2:			// SCARA_AUTO_CALIBRATE
			// |0002   |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			scara_auto_calibrate(&scara_0);
 80015c2:	4871      	ldr	r0, [pc, #452]	@ (8001788 <update+0x2e8>)
 80015c4:	f000 fb40 	bl	8001c48 <scara_auto_calibrate>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80015c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001780 <update+0x2e0>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	2204      	movs	r2, #4
 80015d6:	f006 fa93 	bl	8007b00 <HAL_UART_Transmit>

			break;
 80015da:	e0cb      	b.n	8001774 <update+0x2d4>

		case 3:			// SCARA_MOVE_JOINT
			// |0003   |aaaa|bbbb |cccc|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|axis|angle|time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			int32_t axis; memcpy(&axis, &command.values[0], sizeof(int32_t));
 80015dc:	4b69      	ldr	r3, [pc, #420]	@ (8001784 <update+0x2e4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			float angle; memcpy(&angle, &command.values[1], sizeof(float));
 80015e2:	4b68      	ldr	r3, [pc, #416]	@ (8001784 <update+0x2e4>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	65bb      	str	r3, [r7, #88]	@ 0x58
			float time_3; memcpy(&time_3, &command.values[2], sizeof(float));
 80015e8:	4b66      	ldr	r3, [pc, #408]	@ (8001784 <update+0x2e4>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	657b      	str	r3, [r7, #84]	@ 0x54

			scara_move_j(&scara_0, axis, angle, time_3);
 80015ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015f4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80015f8:	eef0 0a47 	vmov.f32	s1, s14
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	4619      	mov	r1, r3
 8001602:	4861      	ldr	r0, [pc, #388]	@ (8001788 <update+0x2e8>)
 8001604:	f000 fb3c 	bl	8001c80 <scara_move_j>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 8001608:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <update+0x2e0>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	2204      	movs	r2, #4
 8001616:	f006 fa73 	bl	8007b00 <HAL_UART_Transmit>

			break;
 800161a:	e0ab      	b.n	8001774 <update+0x2d4>

		case 4:			// SCARA_MOVE_JOINTS
			// |0004   |aaaa   |bbbb   |cccc   |dddd   |eeee|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
        	// |command|angle_0|angle_1|angle_2|angle_3|time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			float angle_0; memcpy(&angle_0, &command.values[0], sizeof(float));
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <update+0x2e4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	653b      	str	r3, [r7, #80]	@ 0x50
			float angle_1; memcpy(&angle_1, &command.values[1], sizeof(float));
 8001622:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <update+0x2e4>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	64fb      	str	r3, [r7, #76]	@ 0x4c
			float angle_2; memcpy(&angle_2, &command.values[2], sizeof(float));
 8001628:	4b56      	ldr	r3, [pc, #344]	@ (8001784 <update+0x2e4>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	64bb      	str	r3, [r7, #72]	@ 0x48
			float angle_3; memcpy(&angle_3, &command.values[3], sizeof(float));
 800162e:	4b55      	ldr	r3, [pc, #340]	@ (8001784 <update+0x2e4>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	647b      	str	r3, [r7, #68]	@ 0x44
			float time_4; memcpy(&time_4, &command.values[4], sizeof(float));
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <update+0x2e4>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40

			scara_move_js(&scara_0, angle_0, angle_1, angle_2, angle_3, time_4);
 800163a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800163e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001642:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001646:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 800164a:	edd7 5a10 	vldr	s11, [r7, #64]	@ 0x40
 800164e:	eeb0 2a65 	vmov.f32	s4, s11
 8001652:	eef0 1a46 	vmov.f32	s3, s12
 8001656:	eeb0 1a66 	vmov.f32	s2, s13
 800165a:	eef0 0a47 	vmov.f32	s1, s14
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	4849      	ldr	r0, [pc, #292]	@ (8001788 <update+0x2e8>)
 8001664:	f000 fb23 	bl	8001cae <scara_move_js>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 8001668:	4b45      	ldr	r3, [pc, #276]	@ (8001780 <update+0x2e0>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	2204      	movs	r2, #4
 8001676:	f006 fa43 	bl	8007b00 <HAL_UART_Transmit>

			break;
 800167a:	e07b      	b.n	8001774 <update+0x2d4>

		case 5:			// SCARA_MOVE_COORD
			// |0005   |aaaa|bbbb|cccc   |dddd|eeee|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|x   |y   |z_angle|z   |time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			float x; memcpy(&x, &command.values[0], sizeof(float));
 800167c:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <update+0x2e4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float y; memcpy(&y, &command.values[1], sizeof(float));
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <update+0x2e4>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
			float z_angle; memcpy(&z_angle, &command.values[2], sizeof(float));
 8001688:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <update+0x2e4>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
			float z; memcpy(&z, &command.values[3], sizeof(float));
 800168e:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <update+0x2e4>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
			float time_5; memcpy(&time_5, &command.values[4], sizeof(float));
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <update+0x2e4>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c

			scara_move_coord(&scara_0, x, y, z_angle, z, time_5);
 800169a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800169e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80016a2:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80016a6:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 80016aa:	edd7 5a0b 	vldr	s11, [r7, #44]	@ 0x2c
 80016ae:	eeb0 2a65 	vmov.f32	s4, s11
 80016b2:	eef0 1a46 	vmov.f32	s3, s12
 80016b6:	eeb0 1a66 	vmov.f32	s2, s13
 80016ba:	eef0 0a47 	vmov.f32	s1, s14
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	4831      	ldr	r0, [pc, #196]	@ (8001788 <update+0x2e8>)
 80016c4:	f000 fb14 	bl	8001cf0 <scara_move_coord>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <update+0x2e0>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	2204      	movs	r2, #4
 80016d6:	f006 fa13 	bl	8007b00 <HAL_UART_Transmit>

			break;
 80016da:	e04b      	b.n	8001774 <update+0x2d4>
			// PROTOCOL (RETURN) [48 bytes]:

			// |0006   |aaaa |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|angle|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			int32_t axis_6; memcpy(&axis_6, &command.values[0], sizeof(int32_t));
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <update+0x2e4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
			float angle_read = potentiometers_read_angle(axis_6);
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f9b3 	bl	8001a50 <potentiometers_read_angle>
 80016ea:	eef0 7a40 	vmov.f32	s15, s0
 80016ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <update+0x2e0>)
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	2204      	movs	r2, #4
 8001700:	f006 f9fe 	bl	8007b00 <HAL_UART_Transmit>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&angle_read, sizeof(float), HAL_MAX_DELAY);
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <update+0x2e0>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2204      	movs	r2, #4
 8001712:	f006 f9f5 	bl	8007b00 <HAL_UART_Transmit>

			break;
 8001716:	e02d      	b.n	8001774 <update+0x2d4>

			// |0007   |aaaa|bbbb|cccc   |dddd|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|x   |y   |z_angle|z   |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			scara_position_t scara_pos;
			scara_pos = scara_get_position(&scara_0);
 8001718:	481b      	ldr	r0, [pc, #108]	@ (8001788 <update+0x2e8>)
 800171a:	f000 fb27 	bl	8001d6c <scara_get_position>
 800171e:	eeb0 6a40 	vmov.f32	s12, s0
 8001722:	eef0 6a60 	vmov.f32	s13, s1
 8001726:	eeb0 7a41 	vmov.f32	s14, s2
 800172a:	eef0 7a61 	vmov.f32	s15, s3
 800172e:	ed87 6a05 	vstr	s12, [r7, #20]
 8001732:	edc7 6a06 	vstr	s13, [r7, #24]
 8001736:	ed87 7a07 	vstr	s14, [r7, #28]
 800173a:	edc7 7a08 	vstr	s15, [r7, #32]

			float pos[4];
			pos[0] = scara_pos.x;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	607b      	str	r3, [r7, #4]
			pos[1] = scara_pos.y;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60bb      	str	r3, [r7, #8]
			pos[2] = scara_pos.angle_z;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	60fb      	str	r3, [r7, #12]
			pos[3] = scara_pos.z;
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	613b      	str	r3, [r7, #16]

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <update+0x2e0>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	2204      	movs	r2, #4
 800175c:	f006 f9d0 	bl	8007b00 <HAL_UART_Transmit>

			HAL_UART_Transmit(uart_channel, (uint8_t*)pos, sizeof(pos), HAL_MAX_DELAY);
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <update+0x2e0>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	1d39      	adds	r1, r7, #4
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	2210      	movs	r2, #16
 800176c:	f006 f9c8 	bl	8007b00 <HAL_UART_Transmit>

			break;
 8001770:	e000      	b.n	8001774 <update+0x2d4>

		default:

			break;
 8001772:	bf00      	nop

		}
	}
}
 8001774:	bf00      	nop
 8001776:	37c0      	adds	r7, #192	@ 0xc0
 8001778:	46bd      	mov	sp, r7
 800177a:	bdb0      	pop	{r4, r5, r7, pc}
 800177c:	40020400 	.word	0x40020400
 8001780:	2000013c 	.word	0x2000013c
 8001784:	20000140 	.word	0x20000140
 8001788:	20000240 	.word	0x20000240

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_DMA_Init+0x3c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <MX_DMA_Init+0x3c>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_DMA_Init+0x3c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2038      	movs	r0, #56	@ 0x38
 80017b4:	f003 ff1d 	bl	80055f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017b8:	2038      	movs	r0, #56	@ 0x38
 80017ba:	f003 ff36 	bl	800562a <HAL_NVIC_EnableIRQ>

}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a32      	ldr	r2, [pc, #200]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a2b      	ldr	r2, [pc, #172]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_GPIO_Init+0xe8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2120      	movs	r1, #32
 8001856:	4818      	ldr	r0, [pc, #96]	@ (80018b8 <MX_GPIO_Init+0xec>)
 8001858:	f004 fc1e 	bl	8006098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800185c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001862:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4812      	ldr	r0, [pc, #72]	@ (80018bc <MX_GPIO_Init+0xf0>)
 8001874:	f004 fa64 	bl	8005d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001878:	2320      	movs	r3, #32
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <MX_GPIO_Init+0xec>)
 8001890:	f004 fa56 	bl	8005d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <MX_GPIO_Init+0xf4>)
 80018a8:	f004 fa4a 	bl	8005d40 <HAL_GPIO_Init>

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020400 	.word	0x40020400

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f003 f900 	bl	8004acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018cc:	f000 f814 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d0:	f7ff ff7c 	bl	80017cc <MX_GPIO_Init>
  MX_DMA_Init();
 80018d4:	f7ff ff5a 	bl	800178c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018d8:	f002 fffc 	bl	80048d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018dc:	f002 fe52 	bl	8004584 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018e0:	f002 fef8 	bl	80046d4 <MX_TIM4_Init>
  MX_ADC1_Init();
 80018e4:	f7ff fb0c 	bl	8000f00 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80018e8:	f003 f81e 	bl	8004928 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  start();
 80018ec:	f7ff fbe0 	bl	80010b0 <start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	update();
 80018f0:	f7ff fdd6 	bl	80014a0 <update>
 80018f4:	e7fc      	b.n	80018f0 <main+0x2c>
	...

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	@ 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2234      	movs	r2, #52	@ 0x34
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f006 fffa 	bl	8008900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <SystemClock_Config+0xdc>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a2b      	ldr	r2, [pc, #172]	@ (80019d4 <SystemClock_Config+0xdc>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <SystemClock_Config+0xdc>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <SystemClock_Config+0xe0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <SystemClock_Config+0xe0>)
 8001942:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <SystemClock_Config+0xe0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195c:	2310      	movs	r3, #16
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001960:	2302      	movs	r3, #2
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001968:	2308      	movs	r3, #8
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800196c:	23b4      	movs	r3, #180	@ 0xb4
 800196e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001978:	2302      	movs	r3, #2
 800197a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4618      	mov	r0, r3
 8001982:	f004 ff3d 	bl	8006800 <HAL_RCC_OscConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800198c:	f000 f826 	bl	80019dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001990:	f004 fb9c 	bl	80060cc <HAL_PWREx_EnableOverDrive>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800199a:	f000 f81f 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2302      	movs	r3, #2
 80019a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2105      	movs	r1, #5
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fbd5 	bl	800616c <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019c8:	f000 f808 	bl	80019dc <Error_Handler>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3750      	adds	r7, #80	@ 0x50
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <potentiometers_init>:

uint16_t pot_raw_value[POTS];
potentiometer_t pots[POTS];

void potentiometers_init()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, pot_raw_value, POTS);
 80019ec:	2202      	movs	r2, #2
 80019ee:	490f      	ldr	r1, [pc, #60]	@ (8001a2c <potentiometers_init+0x44>)
 80019f0:	480f      	ldr	r0, [pc, #60]	@ (8001a30 <potentiometers_init+0x48>)
 80019f2:	f003 f945 	bl	8004c80 <HAL_ADC_Start_DMA>

    // default values for white robot
    pots[0].min_angle = -90.0;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <potentiometers_init+0x4c>)
 80019f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <potentiometers_init+0x50>)
 80019fa:	601a      	str	r2, [r3, #0]
    pots[0].max_angle = 90.0;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <potentiometers_init+0x4c>)
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <potentiometers_init+0x54>)
 8001a00:	605a      	str	r2, [r3, #4]
    pots[0].min_raw_value = 700.0;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a04:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <potentiometers_init+0x58>)
 8001a06:	60da      	str	r2, [r3, #12]
    pots[0].max_raw_value = 3300.0;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <potentiometers_init+0x5c>)
 8001a0c:	611a      	str	r2, [r3, #16]

    pots[1].min_angle = 0.0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
    pots[1].max_angle = 90.0;
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <potentiometers_init+0x54>)
 8001a1a:	619a      	str	r2, [r3, #24]
    pots[1].min_raw_value = 720.0;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <potentiometers_init+0x60>)
 8001a20:	621a      	str	r2, [r3, #32]
    pots[1].max_raw_value = 2090.0;
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <potentiometers_init+0x4c>)
 8001a24:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <potentiometers_init+0x64>)
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
//
//	pots[1].min_angle = 0.0;
//	pots[1].max_angle = 90.0;
//	pots[1].min_raw_value = 700.0;
//	pots[1].max_raw_value = 2050.0;
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000264 	.word	0x20000264
 8001a30:	20000094 	.word	0x20000094
 8001a34:	20000268 	.word	0x20000268
 8001a38:	c2b40000 	.word	0xc2b40000
 8001a3c:	42b40000 	.word	0x42b40000
 8001a40:	442f0000 	.word	0x442f0000
 8001a44:	454e4000 	.word	0x454e4000
 8001a48:	44340000 	.word	0x44340000
 8001a4c:	4502a000 	.word	0x4502a000

08001a50 <potentiometers_read_angle>:
    // range 0-4095
    return pot_raw_value[_channel];
}

float potentiometers_read_angle(int _channel)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    float angle = pots[_channel].min_angle
 8001a58:	492c      	ldr	r1, [pc, #176]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	ed93 7a00 	vldr	s14, [r3]
                + ((pot_raw_value[_channel] - pots[_channel].min_raw_value)
 8001a6a:	4a29      	ldr	r2, [pc, #164]	@ (8001b10 <potentiometers_read_angle+0xc0>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a7a:	4924      	ldr	r1, [pc, #144]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	330c      	adds	r3, #12
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
                * (pots[_channel].max_angle - pots[_channel].min_angle))
 8001a92:	491e      	ldr	r1, [pc, #120]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	ed93 6a00 	vldr	s12, [r3]
 8001aa6:	4919      	ldr	r1, [pc, #100]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001abc:	ee26 6aa7 	vmul.f32	s12, s13, s15
                / (pots[_channel].max_raw_value - pots[_channel].min_raw_value);
 8001ac0:	4912      	ldr	r1, [pc, #72]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3310      	adds	r3, #16
 8001ad0:	edd3 6a00 	vldr	s13, [r3]
 8001ad4:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <potentiometers_read_angle+0xbc>)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	330c      	adds	r3, #12
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aec:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float angle = pots[_channel].min_angle
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	edc7 7a03 	vstr	s15, [r7, #12]
    return angle;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	ee07 3a90 	vmov	s15, r3
}
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000268 	.word	0x20000268
 8001b10:	20000264 	.word	0x20000264

08001b14 <scara_init>:
void scara_init(scara_t *_scara, servo_t *_joint_0, servo_t *_joint_1, servo_t *_joint_2, servo_t *_joint_3,
                float _link_1, float _link_2, float _z_min, float _z_max,
				float _settling_time,
				float _P_0, float _I_0, float _D_0,
				float _P_1, float _I_1, float _D_1)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b092      	sub	sp, #72	@ 0x48
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001b1c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b22:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8001b26:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8001b2a:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8001b2e:	edc7 1a08 	vstr	s3, [r7, #32]
 8001b32:	ed87 2a07 	vstr	s4, [r7, #28]
 8001b36:	edc7 2a06 	vstr	s5, [r7, #24]
 8001b3a:	ed87 3a05 	vstr	s6, [r7, #20]
 8001b3e:	edc7 3a04 	vstr	s7, [r7, #16]
 8001b42:	ed87 4a03 	vstr	s8, [r7, #12]
 8001b46:	edc7 4a02 	vstr	s9, [r7, #8]
 8001b4a:	ed87 5a01 	vstr	s10, [r7, #4]
	potentiometers_init();
 8001b4e:	f7ff ff4b 	bl	80019e8 <potentiometers_init>

    if (_scara->servo_controller_scara == NULL) {
 8001b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <scara_init+0x54>
        _scara->servo_controller_scara = malloc(sizeof(servo_controller_scara_t));
 8001b5a:	202c      	movs	r0, #44	@ 0x2c
 8001b5c:	f006 fc22 	bl	80083a4 <malloc>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b66:	621a      	str	r2, [r3, #32]
    }

    _scara->joint_0 = _joint_0;
 8001b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6c:	601a      	str	r2, [r3, #0]
    _scara->joint_1 = _joint_1;
 8001b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b72:	605a      	str	r2, [r3, #4]
    _scara->joint_2 = _joint_2;
 8001b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b78:	609a      	str	r2, [r3, #8]
    _scara->joint_3 = _joint_3;
 8001b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b7e:	60da      	str	r2, [r3, #12]

    servo_controller_scara_init(_scara->servo_controller_scara,
 8001b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b82:	6a18      	ldr	r0, [r3, #32]
 8001b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	ed97 3a01 	vldr	s6, [r7, #4]
 8001b8c:	edd7 2a02 	vldr	s5, [r7, #8]
 8001b90:	ed97 2a03 	vldr	s4, [r7, #12]
 8001b94:	edd7 1a04 	vldr	s3, [r7, #16]
 8001b98:	ed97 1a05 	vldr	s2, [r7, #20]
 8001b9c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001ba0:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ba8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001baa:	f000 fceb 	bl	8002584 <servo_controller_scara_init>
    							_joint_0, _joint_1, _joint_2, _joint_3,
								_settling_time,
								_P_0, _I_0, _D_0, _P_1, _I_1, _D_1);

    _scara->link_1 = _link_1;
 8001bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb2:	611a      	str	r2, [r3, #16]
    _scara->link_2 = _link_2;
 8001bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bb8:	615a      	str	r2, [r3, #20]
    _scara->z_min = _z_min;
 8001bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bbe:	619a      	str	r2, [r3, #24]
    _scara->z_max = _z_max;
 8001bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	61da      	str	r2, [r3, #28]
}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	@ 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <scara_reinit>:
void scara_reinit(scara_t *_scara,
				  float _link_1, float _link_2, float _z_min, float _z_max,
				  float _settling_time,
				  float _P_0, float _I_0, float _D_0,
				  float _P_1, float _I_1, float _D_1)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b08c      	sub	sp, #48	@ 0x30
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001bd6:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 8001bda:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 8001bde:	ed87 1a08 	vstr	s2, [r7, #32]
 8001be2:	edc7 1a07 	vstr	s3, [r7, #28]
 8001be6:	ed87 2a06 	vstr	s4, [r7, #24]
 8001bea:	edc7 2a05 	vstr	s5, [r7, #20]
 8001bee:	ed87 3a04 	vstr	s6, [r7, #16]
 8001bf2:	edc7 3a03 	vstr	s7, [r7, #12]
 8001bf6:	ed87 4a02 	vstr	s8, [r7, #8]
 8001bfa:	edc7 4a01 	vstr	s9, [r7, #4]
 8001bfe:	ed87 5a00 	vstr	s10, [r7]
    servo_controller_scara_reinit(_scara->servo_controller_scara,
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	ed97 3a00 	vldr	s6, [r7]
 8001c0a:	edd7 2a01 	vldr	s5, [r7, #4]
 8001c0e:	ed97 2a02 	vldr	s4, [r7, #8]
 8001c12:	edd7 1a03 	vldr	s3, [r7, #12]
 8001c16:	ed97 1a04 	vldr	s2, [r7, #16]
 8001c1a:	edd7 0a05 	vldr	s1, [r7, #20]
 8001c1e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fd4c 	bl	80026c0 <servo_controller_scara_reinit>
								  _settling_time,
								  _P_0, _I_0, _D_0, _P_1, _I_1, _D_1);

    _scara->link_1 = _link_1;
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c2c:	611a      	str	r2, [r3, #16]
    _scara->link_2 = _link_2;
 8001c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c32:	615a      	str	r2, [r3, #20]
    _scara->z_min = _z_min;
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	619a      	str	r2, [r3, #24]
    _scara->z_max = _z_max;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	61da      	str	r2, [r3, #28]
}
 8001c40:	bf00      	nop
 8001c42:	3730      	adds	r7, #48	@ 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <scara_auto_calibrate>:

void scara_auto_calibrate(scara_t *_scara)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	servo_controller_scara_auto_calibrate_axis(_scara->servo_controller_scara, 0);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd60 	bl	800271c <servo_controller_scara_auto_calibrate_axis>
	HAL_Delay(500);
 8001c5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c60:	f002 ffa6 	bl	8004bb0 <HAL_Delay>
	servo_controller_scara_auto_calibrate_axis(_scara->servo_controller_scara, 1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fd56 	bl	800271c <servo_controller_scara_auto_calibrate_axis>
	HAL_Delay(500);
 8001c70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c74:	f002 ff9c 	bl	8004bb0 <HAL_Delay>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <scara_move_j>:

void scara_move_j(scara_t *_scara, int _axis, float _angle, float _T)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8e:	edc7 0a00 	vstr	s1, [r7]
	move_j_scara(_scara->servo_controller_scara, _axis, _angle, _T);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	edd7 0a00 	vldr	s1, [r7]
 8001c9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fff9 	bl	8002c98 <move_j_scara>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <scara_move_js>:

void scara_move_js(scara_t *_scara, float _angle_0, float _angle_1, float _angle_2, float _angle_3, float _T)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6178      	str	r0, [r7, #20]
 8001cb6:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cba:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cbe:	ed87 1a02 	vstr	s2, [r7, #8]
 8001cc2:	edc7 1a01 	vstr	s3, [r7, #4]
 8001cc6:	ed87 2a00 	vstr	s4, [r7]
    move_js_scara(_scara->servo_controller_scara, _angle_0, _angle_1, _angle_2, _angle_3, _T);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	ed97 2a00 	vldr	s4, [r7]
 8001cd2:	edd7 1a01 	vldr	s3, [r7, #4]
 8001cd6:	ed97 1a02 	vldr	s2, [r7, #8]
 8001cda:	edd7 0a03 	vldr	s1, [r7, #12]
 8001cde:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fa6c 	bl	80031c0 <move_js_scara>
}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <scara_move_coord>:

void scara_move_coord(scara_t *_scara, float _x, float _y, float _z_angle, float _z, float _T)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	6178      	str	r0, [r7, #20]
 8001cf8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d00:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d04:	edc7 1a01 	vstr	s3, [r7, #4]
 8001d08:	ed87 2a00 	vstr	s4, [r7]
    float theta_1, theta_2, theta_3, theta_4;
    calc_inverse_kinematics(_scara, &theta_1, &theta_2, &theta_3, &theta_4, _x, _y, _z_angle, _z);
 8001d0c:	f107 001c 	add.w	r0, r7, #28
 8001d10:	f107 0220 	add.w	r2, r7, #32
 8001d14:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	edd7 1a01 	vldr	s3, [r7, #4]
 8001d22:	ed97 1a02 	vldr	s2, [r7, #8]
 8001d26:	edd7 0a03 	vldr	s1, [r7, #12]
 8001d2a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f000 f965 	bl	8002000 <calc_inverse_kinematics>
    move_js_scara(_scara->servo_controller_scara, theta_1, theta_2, theta_3, theta_4, _T);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d46:	ed97 6a06 	vldr	s12, [r7, #24]
 8001d4a:	ed97 2a00 	vldr	s4, [r7]
 8001d4e:	eef0 1a46 	vmov.f32	s3, s12
 8001d52:	eeb0 1a66 	vmov.f32	s2, s13
 8001d56:	eef0 0a47 	vmov.f32	s1, s14
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fa2e 	bl	80031c0 <move_js_scara>
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	@ 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <scara_get_position>:

scara_position_t scara_get_position(scara_t *_scara)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b099      	sub	sp, #100	@ 0x64
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	6178      	str	r0, [r7, #20]
	float theta_1 = potentiometers_read_angle(0);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fe6b 	bl	8001a50 <potentiometers_read_angle>
 8001d7a:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	float theta_2 = potentiometers_read_angle(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fe66 	bl	8001a50 <potentiometers_read_angle>
 8001d84:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
	float theta_3 = _scara->joint_2->cpos;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float theta_4 = _scara->joint_3->cpos;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48

	float x, y, angle_z, z;

	calc_forward_kinematics(_scara, &x, &y, &angle_z, &z, theta_1, theta_2, theta_3, theta_4);
 8001d98:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001d9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001da0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001da4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	edd7 1a12 	vldr	s3, [r7, #72]	@ 0x48
 8001dae:	ed97 1a13 	vldr	s2, [r7, #76]	@ 0x4c
 8001db2:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8001db6:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f000 f827 	bl	8001e10 <calc_forward_kinematics>

	scara_position_t pos;
	pos.x = x;
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc4:	61bb      	str	r3, [r7, #24]
	pos.y = y;
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	61fb      	str	r3, [r7, #28]
	pos.angle_z = angle_z;
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	623b      	str	r3, [r7, #32]
	pos.z = z;
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24

	return pos;
 8001dd2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001de0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de8:	ee06 0a10 	vmov	s12, r0
 8001dec:	ee06 1a90 	vmov	s13, r1
 8001df0:	ee07 2a10 	vmov	s14, r2
 8001df4:	ee07 3a90 	vmov	s15, r3
}
 8001df8:	eeb0 0a46 	vmov.f32	s0, s12
 8001dfc:	eef0 0a66 	vmov.f32	s1, s13
 8001e00:	eeb0 1a47 	vmov.f32	s2, s14
 8001e04:	eef0 1a67 	vmov.f32	s3, s15
 8001e08:	375c      	adds	r7, #92	@ 0x5c
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
	...

08001e10 <calc_forward_kinematics>:
// calculations
// ----------------------------------------------------------------------------------------------------

void calc_forward_kinematics(scara_t *_scara, float *_x, float *_y, float *_angle_z, float *_z,
											  float _theta_1, float _theta_2, float _theta_3, float _theta_4)
{
 8001e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e14:	b08c      	sub	sp, #48	@ 0x30
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	61f8      	str	r0, [r7, #28]
 8001e1a:	61b9      	str	r1, [r7, #24]
 8001e1c:	617a      	str	r2, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e24:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e28:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e2c:	edc7 1a00 	vstr	s3, [r7]
    float l1 = _scara->link_1;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float l2 = _scara->link_2;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // convert angles from degrees to radians
    float t1 = _theta_1 * (PI / 180.0);
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7fe fb47 	bl	80004d0 <__aeabi_f2d>
 8001e42:	a36d      	add	r3, pc, #436	@ (adr r3, 8001ff8 <calc_forward_kinematics+0x1e8>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fb9a 	bl	8000580 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fe8c 	bl	8000b70 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    float t2 = _theta_2 * (PI / 180.0);
 8001e5c:	68b8      	ldr	r0, [r7, #8]
 8001e5e:	f7fe fb37 	bl	80004d0 <__aeabi_f2d>
 8001e62:	a365      	add	r3, pc, #404	@ (adr r3, 8001ff8 <calc_forward_kinematics+0x1e8>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fb8a 	bl	8000580 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe fe7c 	bl	8000b70 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	623b      	str	r3, [r7, #32]

    // compute X and Y position
    *_x = l1 * sin(t1) + l2 * sin(t1 + t2);
 8001e7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e7e:	f7fe fb27 	bl	80004d0 <__aeabi_f2d>
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e88:	f7fe fb22 	bl	80004d0 <__aeabi_f2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	ec43 2b10 	vmov	d0, r2, r3
 8001e94:	f007 f868 	bl	8008f68 <sin>
 8001e98:	ec53 2b10 	vmov	r2, r3, d0
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe fb6e 	bl	8000580 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4690      	mov	r8, r2
 8001eaa:	4699      	mov	r9, r3
 8001eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001eae:	f7fe fb0f 	bl	80004d0 <__aeabi_f2d>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001eba:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	ee17 0a90 	vmov	r0, s15
 8001ec6:	f7fe fb03 	bl	80004d0 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	ec43 2b10 	vmov	d0, r2, r3
 8001ed2:	f007 f849 	bl	8008f68 <sin>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4620      	mov	r0, r4
 8001edc:	4629      	mov	r1, r5
 8001ede:	f7fe fb4f 	bl	8000580 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	4649      	mov	r1, r9
 8001eea:	f7fe f993 	bl	8000214 <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe3b 	bl	8000b70 <__aeabi_d2f>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]
    *_y = l1 * cos(t1) + l2 * cos(t1 + t2);
 8001f00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f02:	f7fe fae5 	bl	80004d0 <__aeabi_f2d>
 8001f06:	4604      	mov	r4, r0
 8001f08:	460d      	mov	r5, r1
 8001f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f0c:	f7fe fae0 	bl	80004d0 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	ec43 2b10 	vmov	d0, r2, r3
 8001f18:	f006 ffca 	bl	8008eb0 <cos>
 8001f1c:	ec53 2b10 	vmov	r2, r3, d0
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe fb2c 	bl	8000580 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4690      	mov	r8, r2
 8001f2e:	4699      	mov	r9, r3
 8001f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f32:	f7fe facd 	bl	80004d0 <__aeabi_f2d>
 8001f36:	4604      	mov	r4, r0
 8001f38:	460d      	mov	r5, r1
 8001f3a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f46:	ee17 0a90 	vmov	r0, s15
 8001f4a:	f7fe fac1 	bl	80004d0 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	ec43 2b10 	vmov	d0, r2, r3
 8001f56:	f006 ffab 	bl	8008eb0 <cos>
 8001f5a:	ec53 2b10 	vmov	r2, r3, d0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb0d 	bl	8000580 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4640      	mov	r0, r8
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	f7fe f951 	bl	8000214 <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fdf9 	bl	8000b70 <__aeabi_d2f>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]

    // compute total rotation angle around Z
    *_angle_z = _theta_1 + _theta_2 + _theta_3;
 8001f84:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	edc3 7a00 	vstr	s15, [r3]

    // convert theta_4 (the servo angle) back to Z height
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fac:	edd7 6a00 	vldr	s13, [r7]
 8001fb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
          (_scara->z_max - _scara->z_min) /
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	ed93 6a07 	vldr	s12, [r3, #28]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fc0:	ee76 7a67 	vsub.f32	s15, s12, s15
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001fc4:	ee26 6aa7 	vmul.f32	s12, s13, s15
          (_scara->joint_3->max_angle - _scara->joint_3->min_angle));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
          (_scara->z_max - _scara->z_min) /
 8001fdc:	eec6 7a26 	vdiv.f32	s15, s12, s13
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
}
 8001fea:	bf00      	nop
 8001fec:	3730      	adds	r7, #48	@ 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	a2529d39 	.word	0xa2529d39
 8001ffc:	3f91df46 	.word	0x3f91df46

08002000 <calc_inverse_kinematics>:

void calc_inverse_kinematics(scara_t *_scara, float *_theta_1, float *_theta_2, float *_theta_3, float *_theta_4,
                                              float _x, float _y, float _angle_z, float _z)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b092      	sub	sp, #72	@ 0x48
 8002004:	af00      	add	r7, sp, #0
 8002006:	61f8      	str	r0, [r7, #28]
 8002008:	61b9      	str	r1, [r7, #24]
 800200a:	617a      	str	r2, [r7, #20]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002012:	edc7 0a02 	vstr	s1, [r7, #8]
 8002016:	ed87 1a01 	vstr	s2, [r7, #4]
 800201a:	edc7 1a00 	vstr	s3, [r7]
    float l1 = _scara->link_1;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	647b      	str	r3, [r7, #68]	@ 0x44
    float l2 = _scara->link_2;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	643b      	str	r3, [r7, #64]	@ 0x40
    float x = _x;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float y = _y;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38

    float r = sqrt((x * x) + (y * y));
 8002032:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002036:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800203a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800203e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	ee17 0a90 	vmov	r0, s15
 800204a:	f7fe fa41 	bl	80004d0 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	ec43 2b10 	vmov	d0, r2, r3
 8002056:	f006 feff 	bl	8008e58 <sqrt>
 800205a:	ec53 2b10 	vmov	r2, r3, d0
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fd85 	bl	8000b70 <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34

    float phi1 = acos(((l2 * l2) - (r * r) - (l1 * l1)) / (-2 * r * l1));
 800206a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800206e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002072:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002076:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800207a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002082:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800208e:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8002092:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002096:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800209a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020a2:	ee16 0a90 	vmov	r0, s13
 80020a6:	f7fe fa13 	bl	80004d0 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b10 	vmov	d0, r2, r3
 80020b2:	f006 fe2b 	bl	8008d0c <acos>
 80020b6:	ec53 2b10 	vmov	r2, r3, d0
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd57 	bl	8000b70 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
    float phi2 = atan2(x, y);
 80020c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020c8:	f7fe fa02 	bl	80004d0 <__aeabi_f2d>
 80020cc:	4604      	mov	r4, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020d2:	f7fe f9fd 	bl	80004d0 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	ec43 2b11 	vmov	d1, r2, r3
 80020de:	ec45 4b10 	vmov	d0, r4, r5
 80020e2:	f006 fe47 	bl	8008d74 <atan2>
 80020e6:	ec53 2b10 	vmov	r2, r3, d0
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fd3f 	bl	8000b70 <__aeabi_d2f>
 80020f2:	4603      	mov	r3, r0
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float phi3 = acos(((r * r) - (l1 * l1) - (l2 * l2)) / (-2 * l1 * l2));
 80020f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020fe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002102:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002106:	ee37 7a67 	vsub.f32	s14, s14, s15
 800210a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800210e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002116:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800211a:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 800211e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002122:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800212e:	ee16 0a90 	vmov	r0, s13
 8002132:	f7fe f9cd 	bl	80004d0 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	ec43 2b10 	vmov	d0, r2, r3
 800213e:	f006 fde5 	bl	8008d0c <acos>
 8002142:	ec53 2b10 	vmov	r2, r3, d0
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd11 	bl	8000b70 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
    // convert z displacement to servo angle in degrees
    float phi4 = _scara->joint_3->min_angle + ((_z - _scara->z_min)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	ed93 7a06 	vldr	s14, [r3, #24]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002160:	edd7 6a00 	vldr	s13, [r7]
 8002164:	ee76 6ae7 	vsub.f32	s13, s13, s15
    			 * (_scara->joint_3->max_angle - _scara->joint_3->min_angle) / (_scara->z_max - _scara->z_min));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	ed93 6a07 	vldr	s12, [r3, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	edd3 7a06 	vldr	s15, [r3, #24]
 8002178:	ee76 7a67 	vsub.f32	s15, s12, s15
 800217c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	edd3 6a07 	vldr	s13, [r3, #28]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	edd3 7a06 	vldr	s15, [r3, #24]
 800218c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002190:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float phi4 = _scara->joint_3->min_angle + ((_z - _scara->z_min)
 8002194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002198:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    *_theta_1 = (phi2 - phi1) * (180.0 / PI);   // convert to degrees
 800219c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80021a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80021a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a8:	ee17 0a90 	vmov	r0, s15
 80021ac:	f7fe f990 	bl	80004d0 <__aeabi_f2d>
 80021b0:	a31f      	add	r3, pc, #124	@ (adr r3, 8002230 <calc_inverse_kinematics+0x230>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f9e3 	bl	8000580 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fcd5 	bl	8000b70 <__aeabi_d2f>
 80021c6:	4602      	mov	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]
    *_theta_2 = (PI - phi3) * (180.0 / PI);     // convert to degrees
 80021cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021ce:	f7fe f97f 	bl	80004d0 <__aeabi_f2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	a118      	add	r1, pc, #96	@ (adr r1, 8002238 <calc_inverse_kinematics+0x238>)
 80021d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021dc:	f7fe f818 	bl	8000210 <__aeabi_dsub>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	a311      	add	r3, pc, #68	@ (adr r3, 8002230 <calc_inverse_kinematics+0x230>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f9c7 	bl	8000580 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fcb9 	bl	8000b70 <__aeabi_d2f>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]
    *_theta_3 = _angle_z - (*_theta_1 + *_theta_2);
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	ed93 7a00 	vldr	s14, [r3]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002214:	ed97 7a01 	vldr	s14, [r7, #4]
 8002218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	edc3 7a00 	vstr	s15, [r3]
    *_theta_4 = phi4;
 8002222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	3748      	adds	r7, #72	@ 0x48
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	1a63c1f8 	.word	0x1a63c1f8
 8002234:	404ca5dc 	.word	0x404ca5dc
 8002238:	54442d18 	.word	0x54442d18
 800223c:	400921fb 	.word	0x400921fb

08002240 <servo_init>:
#include "servo.h"
#include "tim.h"

void servo_init(servo_t *_servo, float _min_pulse_width, float _max_pulse_width, float _zero_pulse_width,
				float _min_angle, float _max_angle, float _offset_angle, float _cpos, int _channel)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	@ 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6278      	str	r0, [r7, #36]	@ 0x24
 8002248:	ed87 0a08 	vstr	s0, [r7, #32]
 800224c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002250:	ed87 1a06 	vstr	s2, [r7, #24]
 8002254:	edc7 1a05 	vstr	s3, [r7, #20]
 8002258:	ed87 2a04 	vstr	s4, [r7, #16]
 800225c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002260:	ed87 3a02 	vstr	s6, [r7, #8]
 8002264:	6079      	str	r1, [r7, #4]
	_servo->min_pulse_width = _min_pulse_width;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	601a      	str	r2, [r3, #0]
	_servo->max_pulse_width = _max_pulse_width;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	605a      	str	r2, [r3, #4]
	_servo->zero_pulse_width = _zero_pulse_width;
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	609a      	str	r2, [r3, #8]

	// uncalibrated values
	_servo->calib_min_pulse_width = _min_pulse_width;
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	6a3a      	ldr	r2, [r7, #32]
 800227c:	60da      	str	r2, [r3, #12]
	_servo->calib_max_pulse_width = _max_pulse_width;
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	611a      	str	r2, [r3, #16]
	_servo->calib_zero_pulse_width = _zero_pulse_width;
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	615a      	str	r2, [r3, #20]

	_servo->min_angle = _min_angle;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	619a      	str	r2, [r3, #24]
	_servo->max_angle = _max_angle;
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	61da      	str	r2, [r3, #28]
	_servo->offset_angle = _offset_angle;
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	621a      	str	r2, [r3, #32]

	_servo->cpos = _cpos;
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo->last_angle_adjustment = 0;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28

	switch (_channel)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d827      	bhi.n	8002300 <servo_init+0xc0>
 80022b0:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <servo_init+0x78>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022d7 	.word	0x080022d7
 80022c0:	080022e5 	.word	0x080022e5
 80022c4:	080022f3 	.word	0x080022f3
	{
		case 0:
			// PC7 - timer 3 channel 2
			_servo->pwm_timer = &htim3;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	4a14      	ldr	r2, [pc, #80]	@ (800231c <servo_init+0xdc>)
 80022cc:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_2;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	2204      	movs	r2, #4
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 80022d4:	e01b      	b.n	800230e <servo_init+0xce>
		case 1:
			// PA6 - timer 3 channel 1
			_servo->pwm_timer = &htim3;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	4a10      	ldr	r2, [pc, #64]	@ (800231c <servo_init+0xdc>)
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_1;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 80022e2:	e014      	b.n	800230e <servo_init+0xce>
		case 2:
			// PB0 - timer 3 channel 3
			_servo->pwm_timer = &htim3;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <servo_init+0xdc>)
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_3;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	2208      	movs	r2, #8
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 80022f0:	e00d      	b.n	800230e <servo_init+0xce>
		case 3:
			// PB1 - timer 3 channel 4
			_servo->pwm_timer = &htim3;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	4a09      	ldr	r2, [pc, #36]	@ (800231c <servo_init+0xdc>)
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_4;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	220c      	movs	r2, #12
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 80022fe:	e006      	b.n	800230e <servo_init+0xce>
		default:
			// PC7 - timer 3 channel 2
			_servo->pwm_timer = &htim3;
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	4a06      	ldr	r2, [pc, #24]	@ (800231c <servo_init+0xdc>)
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_2;
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	2204      	movs	r2, #4
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 800230c:	bf00      	nop
	}
}
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	@ 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000294 	.word	0x20000294

08002320 <servo_get_pulse_width_us>:

float servo_get_pulse_width_us(servo_t *_servo)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    uint16_t pulse_width = __HAL_TIM_GET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <servo_get_pulse_width_us+0x1c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002338:	b29b      	uxth	r3, r3
 800233a:	e018      	b.n	800236e <servo_get_pulse_width_us+0x4e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	2b04      	cmp	r3, #4
 8002342:	d105      	bne.n	8002350 <servo_get_pulse_width_us+0x30>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	b29b      	uxth	r3, r3
 800234e:	e00e      	b.n	800236e <servo_get_pulse_width_us+0x4e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	2b08      	cmp	r3, #8
 8002356:	d105      	bne.n	8002364 <servo_get_pulse_width_us+0x44>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002360:	b29b      	uxth	r3, r3
 8002362:	e004      	b.n	800236e <servo_get_pulse_width_us+0x4e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	b29b      	uxth	r3, r3
 800236e:	81fb      	strh	r3, [r7, #14]
    float pulse_width_us = ((float)pulse_width * 27.0) / 9.0;
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	ee17 0a90 	vmov	r0, s15
 800237e:	f7fe f8a7 	bl	80004d0 <__aeabi_f2d>
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <servo_get_pulse_width_us+0xa0>)
 8002388:	f7fe f8fa 	bl	8000580 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <servo_get_pulse_width_us+0xa4>)
 800239a:	f7fe fa1b 	bl	80007d4 <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fbe3 	bl	8000b70 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	60bb      	str	r3, [r7, #8]
    return pulse_width_us;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	ee07 3a90 	vmov	s15, r3
}
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	403b0000 	.word	0x403b0000
 80023c4:	40220000 	.word	0x40220000

080023c8 <servo_set_pulse_width_us>:

void servo_set_pulse_width_us(servo_t *_servo, float _pulse_width_us)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t pulse_width = (uint16_t)((_pulse_width_us * 9.0) / 27.0);
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f7fe f87b 	bl	80004d0 <__aeabi_f2d>
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <servo_set_pulse_width_us+0x8c>)
 80023e0:	f7fe f8ce 	bl	8000580 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <servo_set_pulse_width_us+0x90>)
 80023f2:	f7fe f9ef 	bl	80007d4 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fb97 	bl	8000b30 <__aeabi_d2uiz>
 8002402:	4603      	mov	r3, r0
 8002404:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <servo_set_pulse_width_us+0x52>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	89fa      	ldrh	r2, [r7, #14]
 8002416:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002418:	e018      	b.n	800244c <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	2b04      	cmp	r3, #4
 8002420:	d105      	bne.n	800242e <servo_set_pulse_width_us+0x66>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800242c:	e00e      	b.n	800244c <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	2b08      	cmp	r3, #8
 8002434:	d105      	bne.n	8002442 <servo_set_pulse_width_us+0x7a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	89fb      	ldrh	r3, [r7, #14]
 800243e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002440:	e004      	b.n	800244c <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40220000 	.word	0x40220000
 8002458:	403b0000 	.word	0x403b0000

0800245c <servo_set_angle>:

    return angle;
}

void servo_set_angle(servo_t *_servo, float _angle)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	ed87 0a00 	vstr	s0, [r7]
	// set the current position parameter
	_servo->cpos = _angle;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

	float pulse_width_us;
	_angle = _angle - _servo->offset_angle;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edd3 7a08 	vldr	s15, [r3, #32]
 8002474:	ed97 7a00 	vldr	s14, [r7]
 8002478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247c:	edc7 7a00 	vstr	s15, [r7]
	if (_angle > 0)
 8002480:	edd7 7a00 	vldr	s15, [r7]
 8002484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	dd18      	ble.n	80024c0 <servo_set_angle+0x64>
	{
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	ed93 7a05 	vldr	s14, [r3, #20]
					   * (_servo->calib_max_pulse_width - _servo->calib_zero_pulse_width)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	edd3 6a04 	vldr	s13, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edd3 7a05 	vldr	s15, [r3, #20]
 80024a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024a4:	edd7 7a00 	vldr	s15, [r7]
 80024a8:	ee26 6aa7 	vmul.f32	s12, s13, s15
					   / (_servo->max_angle - 0));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edd3 6a07 	vldr	s13, [r3, #28]
 80024b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 80024b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80024be:	e026      	b.n	800250e <servo_set_angle+0xb2>
	}
	else if (_angle < 0)
 80024c0:	edd7 7a00 	vldr	s15, [r7]
 80024c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	d51c      	bpl.n	8002508 <servo_set_angle+0xac>
	{
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	ed93 7a05 	vldr	s14, [r3, #20]
					   * (_servo->calib_zero_pulse_width - _servo->calib_min_pulse_width)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edd3 6a05 	vldr	s13, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80024e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024e4:	edd7 7a00 	vldr	s15, [r7]
 80024e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
					   / (0 - _servo->min_angle));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80024f2:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002580 <servo_set_angle+0x124>
 80024f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc7 7a03 	vstr	s15, [r7, #12]
 8002506:	e002      	b.n	800250e <servo_set_angle+0xb2>
	}
	else
	{
		pulse_width_us = _servo->calib_zero_pulse_width;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	60fb      	str	r3, [r7, #12]
	}

	// Convert pulse width (us) to timer counts for 333Hz PWM
	// timer counts = (pulse width in s x 90000000) / (270 * 1000000)
	uint16_t pulse_width = (uint16_t)((pulse_width_us * 9) / 27);
 800250e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002512:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8002516:	ee27 7a87 	vmul.f32	s14, s15, s14
 800251a:	eef3 6a0b 	vmov.f32	s13, #59	@ 0x41d80000  27.0
 800251e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <servo_set_angle+0xe4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	897a      	ldrh	r2, [r7, #10]
 800253c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800253e:	e018      	b.n	8002572 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	2b04      	cmp	r3, #4
 8002546:	d105      	bne.n	8002554 <servo_set_angle+0xf8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	897b      	ldrh	r3, [r7, #10]
 8002550:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002552:	e00e      	b.n	8002572 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	2b08      	cmp	r3, #8
 800255a:	d105      	bne.n	8002568 <servo_set_angle+0x10c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002566:	e004      	b.n	8002572 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	00000000 	.word	0x00000000

08002584 <servo_controller_scara_init>:
void servo_controller_scara_init(servo_controller_scara_t *_servo_controller_scara,
						   	     servo_t *_axis_0, servo_t *_axis_1, servo_t *_axis_2, servo_t *_axis_3,
						   	   	 float _settling_time,
								 float _P_0, float _I_0, float _D_0,
							 	 float _P_1, float _I_1, float _D_1)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af00      	add	r7, sp, #0
 800258a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800258c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800258e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	ed87 0a07 	vstr	s0, [r7, #28]
 8002596:	edc7 0a06 	vstr	s1, [r7, #24]
 800259a:	ed87 1a05 	vstr	s2, [r7, #20]
 800259e:	edc7 1a04 	vstr	s3, [r7, #16]
 80025a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80025a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80025aa:	ed87 3a01 	vstr	s6, [r7, #4]
	_servo_controller_scara->axis_0 = _axis_0;
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b2:	601a      	str	r2, [r3, #0]
	_servo_controller_scara->axis_1 = _axis_1;
 80025b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	605a      	str	r2, [r3, #4]
	_servo_controller_scara->axis_2 = _axis_2;
 80025ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	609a      	str	r2, [r3, #8]
	_servo_controller_scara->axis_3 = _axis_3;
 80025c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025c4:	60da      	str	r2, [r3, #12]

	servo_init(_axis_0, 2500, 500, 1500, -90, 90, 0, 0, 0);
 80025c6:	2100      	movs	r1, #0
 80025c8:	ed9f 3a31 	vldr	s6, [pc, #196]	@ 8002690 <servo_controller_scara_init+0x10c>
 80025cc:	eddf 2a30 	vldr	s5, [pc, #192]	@ 8002690 <servo_controller_scara_init+0x10c>
 80025d0:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 8002694 <servo_controller_scara_init+0x110>
 80025d4:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8002698 <servo_controller_scara_init+0x114>
 80025d8:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800269c <servo_controller_scara_init+0x118>
 80025dc:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80026a0 <servo_controller_scara_init+0x11c>
 80025e0:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80026a4 <servo_controller_scara_init+0x120>
 80025e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e6:	f7ff fe2b 	bl	8002240 <servo_init>
	servo_init(_axis_1, 2500, 500, 1500, -90, 30, 90, 0, 1);
 80025ea:	2101      	movs	r1, #1
 80025ec:	ed9f 3a28 	vldr	s6, [pc, #160]	@ 8002690 <servo_controller_scara_init+0x10c>
 80025f0:	eddf 2a28 	vldr	s5, [pc, #160]	@ 8002694 <servo_controller_scara_init+0x110>
 80025f4:	eeb3 2a0e 	vmov.f32	s4, #62	@ 0x41f00000  30.0
 80025f8:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8002698 <servo_controller_scara_init+0x114>
 80025fc:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800269c <servo_controller_scara_init+0x118>
 8002600:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80026a0 <servo_controller_scara_init+0x11c>
 8002604:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80026a4 <servo_controller_scara_init+0x120>
 8002608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800260a:	f7ff fe19 	bl	8002240 <servo_init>
	servo_init(_axis_2, 500, 2500, 1550, -180, 180, 0, 0, 2);
 800260e:	2102      	movs	r1, #2
 8002610:	ed9f 3a1f 	vldr	s6, [pc, #124]	@ 8002690 <servo_controller_scara_init+0x10c>
 8002614:	eddf 2a1e 	vldr	s5, [pc, #120]	@ 8002690 <servo_controller_scara_init+0x10c>
 8002618:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 80026a8 <servo_controller_scara_init+0x124>
 800261c:	eddf 1a23 	vldr	s3, [pc, #140]	@ 80026ac <servo_controller_scara_init+0x128>
 8002620:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80026b0 <servo_controller_scara_init+0x12c>
 8002624:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80026a4 <servo_controller_scara_init+0x120>
 8002628:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80026a0 <servo_controller_scara_init+0x11c>
 800262c:	6a38      	ldr	r0, [r7, #32]
 800262e:	f7ff fe07 	bl	8002240 <servo_init>
	servo_init(_axis_3, 500, 2300, 1500, 90, -60, 0, 0, 3);
 8002632:	2103      	movs	r1, #3
 8002634:	ed9f 3a16 	vldr	s6, [pc, #88]	@ 8002690 <servo_controller_scara_init+0x10c>
 8002638:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8002690 <servo_controller_scara_init+0x10c>
 800263c:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 80026b4 <servo_controller_scara_init+0x130>
 8002640:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8002694 <servo_controller_scara_init+0x110>
 8002644:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800269c <servo_controller_scara_init+0x118>
 8002648:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80026b8 <servo_controller_scara_init+0x134>
 800264c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80026a0 <servo_controller_scara_init+0x11c>
 8002650:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002652:	f7ff fdf5 	bl	8002240 <servo_init>

	_servo_controller_scara->settling_time = _settling_time;
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	611a      	str	r2, [r3, #16]

	_servo_controller_scara->P_0 = _P_0;
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	615a      	str	r2, [r3, #20]
	_servo_controller_scara->I_0 = _I_0;
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	619a      	str	r2, [r3, #24]
	_servo_controller_scara->D_0 = _D_0;
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	61da      	str	r2, [r3, #28]

	_servo_controller_scara->P_1 = _P_1;
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]
	_servo_controller_scara->I_1 = _I_1;
 8002674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo_controller_scara->D_1 = _D_1;
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28

	printf("servo controller initialised\n");
 8002680:	480e      	ldr	r0, [pc, #56]	@ (80026bc <servo_controller_scara_init+0x138>)
 8002682:	f006 f85d 	bl	8008740 <puts>
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	@ 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00000000 	.word	0x00000000
 8002694:	42b40000 	.word	0x42b40000
 8002698:	c2b40000 	.word	0xc2b40000
 800269c:	44bb8000 	.word	0x44bb8000
 80026a0:	43fa0000 	.word	0x43fa0000
 80026a4:	451c4000 	.word	0x451c4000
 80026a8:	43340000 	.word	0x43340000
 80026ac:	c3340000 	.word	0xc3340000
 80026b0:	44c1c000 	.word	0x44c1c000
 80026b4:	c2700000 	.word	0xc2700000
 80026b8:	450fc000 	.word	0x450fc000
 80026bc:	0800b628 	.word	0x0800b628

080026c0 <servo_controller_scara_reinit>:

void servo_controller_scara_reinit(servo_controller_scara_t *_servo_controller_scara,
								   float _settling_time,
								   float _P_0, float _I_0, float _D_0,
								   float _P_1, float _I_1, float _D_1)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	61f8      	str	r0, [r7, #28]
 80026c8:	ed87 0a06 	vstr	s0, [r7, #24]
 80026cc:	edc7 0a05 	vstr	s1, [r7, #20]
 80026d0:	ed87 1a04 	vstr	s2, [r7, #16]
 80026d4:	edc7 1a03 	vstr	s3, [r7, #12]
 80026d8:	ed87 2a02 	vstr	s4, [r7, #8]
 80026dc:	edc7 2a01 	vstr	s5, [r7, #4]
 80026e0:	ed87 3a00 	vstr	s6, [r7]
	_servo_controller_scara->settling_time = _settling_time;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	611a      	str	r2, [r3, #16]

	_servo_controller_scara->P_0 = _P_0;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	615a      	str	r2, [r3, #20]
	_servo_controller_scara->I_0 = _I_0;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	619a      	str	r2, [r3, #24]
	_servo_controller_scara->D_0 = _D_0;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	61da      	str	r2, [r3, #28]

	_servo_controller_scara->P_1 = _P_1;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	621a      	str	r2, [r3, #32]
	_servo_controller_scara->I_1 = _I_1;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo_controller_scara->D_1 = _D_1;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <servo_controller_scara_auto_calibrate_axis>:

void servo_controller_scara_auto_calibrate_axis(servo_controller_scara_t *_servo_controller_scara, int _axis)
{
 800271c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002720:	b08c      	sub	sp, #48	@ 0x30
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
	servo_t *axis = _servo_controller_scara->axis_0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	switch (_axis)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d103      	bne.n	800273c <servo_controller_scara_auto_calibrate_axis+0x20>
	{
		case 1:
			axis = _servo_controller_scara->axis_1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 800273a:	e000      	b.n	800273e <servo_controller_scara_auto_calibrate_axis+0x22>
		default:
			break;
 800273c:	bf00      	nop
	}

	float pulse_width_us = axis->zero_pulse_width;
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
	float pot_angle = potentiometers_read_angle(_axis);
 8002744:	6838      	ldr	r0, [r7, #0]
 8002746:	f7ff f983 	bl	8001a50 <potentiometers_read_angle>
 800274a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	// reset to zero position
	servo_set_pulse_width_us(axis, pulse_width_us);
 800274e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002754:	f7ff fe38 	bl	80023c8 <servo_set_pulse_width_us>
	HAL_Delay(500);
 8002758:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800275c:	f002 fa28 	bl	8004bb0 <HAL_Delay>

	// check whether the axis is inverted
	// ==================== AXIS IS NOT INVERTED ====================
	if (axis->max_pulse_width >= axis->min_pulse_width)
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	ed93 7a01 	vldr	s14, [r3, #4]
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	f2c0 813f 	blt.w	80029f6 <servo_controller_scara_auto_calibrate_axis+0x2da>
	{
		// sweep from 0 to max pulse width (deadband = 4), stopping when max angle reached
		for (int i = axis->zero_pulse_width; i <= axis->max_pulse_width; i+=5)
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	edd3 7a02 	vldr	s15, [r3, #8]
 800277e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002782:	ee17 3a90 	vmov	r3, s15
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	e054      	b.n	8002834 <servo_controller_scara_auto_calibrate_axis+0x118>
		{
			pulse_width_us = i;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002794:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002798:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800279c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800279e:	f7ff fe13 	bl	80023c8 <servo_set_pulse_width_us>

			// check position using encoder
			pot_angle = potentiometers_read_angle(_axis);
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f7ff f954 	bl	8001a50 <potentiometers_read_angle>
 80027a8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			// if angle within 20% of target angle, move slower
			if (pot_angle >= (axis->max_angle * 0.5) + axis->offset_angle)
 80027ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027ae:	f7fd fe8f 	bl	80004d0 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe88 	bl	80004d0 <__aeabi_f2d>
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4bb9      	ldr	r3, [pc, #740]	@ (8002aac <servo_controller_scara_auto_calibrate_axis+0x390>)
 80027c6:	f7fd fedb 	bl	8000580 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4690      	mov	r8, r2
 80027d0:	4699      	mov	r9, r3
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe7a 	bl	80004d0 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4640      	mov	r0, r8
 80027e2:	4649      	mov	r1, r9
 80027e4:	f7fd fd16 	bl	8000214 <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	f7fe f94c 	bl	8000a8c <__aeabi_dcmpge>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <servo_controller_scara_auto_calibrate_axis+0xe6>
			{
				HAL_Delay(50);
 80027fa:	2032      	movs	r0, #50	@ 0x32
 80027fc:	f002 f9d8 	bl	8004bb0 <HAL_Delay>
 8002800:	e002      	b.n	8002808 <servo_controller_scara_auto_calibrate_axis+0xec>
			}
			else // otherwise move fast
			{
				HAL_Delay(5);
 8002802:	2005      	movs	r0, #5
 8002804:	f002 f9d4 	bl	8004bb0 <HAL_Delay>
			}

			// check if target angle is reached
			if (pot_angle >= (axis->max_angle + axis->offset_angle))
 8002808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280a:	ed93 7a07 	vldr	s14, [r3, #28]
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	edd3 7a08 	vldr	s15, [r3, #32]
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	db03      	blt.n	800282e <servo_controller_scara_auto_calibrate_axis+0x112>
			{
				axis->calib_max_pulse_width = pulse_width_us;
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282a:	611a      	str	r2, [r3, #16]
				break;
 800282c:	e00f      	b.n	800284e <servo_controller_scara_auto_calibrate_axis+0x132>
		for (int i = axis->zero_pulse_width; i <= axis->max_pulse_width; i+=5)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	3305      	adds	r3, #5
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	edd3 7a01 	vldr	s15, [r3, #4]
 8002844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	d99d      	bls.n	800278a <servo_controller_scara_auto_calibrate_axis+0x6e>
			}
		}
		// sweep from max angle to min angle
		for (int i = pulse_width_us; i >= axis->min_pulse_width; i-=5)
 800284e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	e054      	b.n	8002908 <servo_controller_scara_auto_calibrate_axis+0x1ec>
		{
			pulse_width_us = i;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002868:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 800286c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002872:	f7ff fda9 	bl	80023c8 <servo_set_pulse_width_us>

			// check position using encoder
			pot_angle = potentiometers_read_angle(_axis);
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f7ff f8ea 	bl	8001a50 <potentiometers_read_angle>
 800287c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle <= (axis->min_angle * 0.5) + axis->offset_angle)
 8002880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002882:	f7fd fe25 	bl	80004d0 <__aeabi_f2d>
 8002886:	4604      	mov	r4, r0
 8002888:	460d      	mov	r5, r1
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe1e 	bl	80004d0 <__aeabi_f2d>
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b84      	ldr	r3, [pc, #528]	@ (8002aac <servo_controller_scara_auto_calibrate_axis+0x390>)
 800289a:	f7fd fe71 	bl	8000580 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4690      	mov	r8, r2
 80028a4:	4699      	mov	r9, r3
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe10 	bl	80004d0 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4640      	mov	r0, r8
 80028b6:	4649      	mov	r1, r9
 80028b8:	f7fd fcac 	bl	8000214 <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fe f8d8 	bl	8000a78 <__aeabi_dcmple>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <servo_controller_scara_auto_calibrate_axis+0x1ba>
			{
				HAL_Delay(50);
 80028ce:	2032      	movs	r0, #50	@ 0x32
 80028d0:	f002 f96e 	bl	8004bb0 <HAL_Delay>
 80028d4:	e002      	b.n	80028dc <servo_controller_scara_auto_calibrate_axis+0x1c0>
			}
			else
			{
				HAL_Delay(5);
 80028d6:	2005      	movs	r0, #5
 80028d8:	f002 f96a 	bl	8004bb0 <HAL_Delay>
			}

			if (pot_angle <= (axis->min_angle + axis->offset_angle))
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	ed93 7a06 	vldr	s14, [r3, #24]
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d803      	bhi.n	8002902 <servo_controller_scara_auto_calibrate_axis+0x1e6>
			{
				axis->calib_min_pulse_width = pulse_width_us;
 80028fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028fe:	60da      	str	r2, [r3, #12]
				break;
 8002900:	e00f      	b.n	8002922 <servo_controller_scara_auto_calibrate_axis+0x206>
		for (int i = pulse_width_us; i >= axis->min_pulse_width; i-=5)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b05      	subs	r3, #5
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	da9d      	bge.n	800285e <servo_controller_scara_auto_calibrate_axis+0x142>
			}
		}
		// sweep towards max pulse width again, but stopping at 0 degrees
		for (int i = pulse_width_us; i <= axis->max_pulse_width; i+=5)
 8002922:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292a:	ee17 3a90 	vmov	r3, s15
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e053      	b.n	80029da <servo_controller_scara_auto_calibrate_axis+0x2be>
		{
			pulse_width_us = i;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002940:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002946:	f7ff fd3f 	bl	80023c8 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f7ff f880 	bl	8001a50 <potentiometers_read_angle>
 8002950:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->min_angle * 0.5) + axis->offset_angle)
 8002954:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002956:	f7fd fdbb 	bl	80004d0 <__aeabi_f2d>
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fdb4 	bl	80004d0 <__aeabi_f2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <servo_controller_scara_auto_calibrate_axis+0x390>)
 800296e:	f7fd fe07 	bl	8000580 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fda6 	bl	80004d0 <__aeabi_f2d>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4640      	mov	r0, r8
 800298a:	4649      	mov	r1, r9
 800298c:	f7fd fc42 	bl	8000214 <__adddf3>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fe f878 	bl	8000a8c <__aeabi_dcmpge>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <servo_controller_scara_auto_calibrate_axis+0x28e>
			{
				HAL_Delay(50);
 80029a2:	2032      	movs	r0, #50	@ 0x32
 80029a4:	f002 f904 	bl	8004bb0 <HAL_Delay>
 80029a8:	e002      	b.n	80029b0 <servo_controller_scara_auto_calibrate_axis+0x294>
			}
			else
			{
				HAL_Delay(5);
 80029aa:	2005      	movs	r0, #5
 80029ac:	f002 f900 	bl	8004bb0 <HAL_Delay>
			}

			if (pot_angle >= (0 + axis->offset_angle))
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029b6:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002ab0 <servo_controller_scara_auto_calibrate_axis+0x394>
 80029ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	db03      	blt.n	80029d4 <servo_controller_scara_auto_calibrate_axis+0x2b8>
			{
				axis->calib_zero_pulse_width = pulse_width_us;
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d0:	615a      	str	r2, [r3, #20]
				break;
 80029d2:	e152      	b.n	8002c7a <servo_controller_scara_auto_calibrate_axis+0x55e>
		for (int i = pulse_width_us; i <= axis->max_pulse_width; i+=5)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	3305      	adds	r3, #5
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d99e      	bls.n	8002932 <servo_controller_scara_auto_calibrate_axis+0x216>
 80029f4:	e141      	b.n	8002c7a <servo_controller_scara_auto_calibrate_axis+0x55e>
	}
	// ==================== AXIS IS INVERTED ====================
	else
	{
		// sweep towards max angle
		for (int i = axis->zero_pulse_width; i >= axis->max_pulse_width; i-=5)
 80029f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a00:	ee17 3a90 	vmov	r3, s15
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e058      	b.n	8002aba <servo_controller_scara_auto_calibrate_axis+0x39e>
		{
			pulse_width_us = i;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a12:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002a16:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002a1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a1c:	f7ff fcd4 	bl	80023c8 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 8002a20:	6838      	ldr	r0, [r7, #0]
 8002a22:	f7ff f815 	bl	8001a50 <potentiometers_read_angle>
 8002a26:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->max_angle * 0.5) + axis->offset_angle)
 8002a2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a2c:	f7fd fd50 	bl	80004d0 <__aeabi_f2d>
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fd49 	bl	80004d0 <__aeabi_f2d>
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <servo_controller_scara_auto_calibrate_axis+0x390>)
 8002a44:	f7fd fd9c 	bl	8000580 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd3b 	bl	80004d0 <__aeabi_f2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4640      	mov	r0, r8
 8002a60:	4649      	mov	r1, r9
 8002a62:	f7fd fbd7 	bl	8000214 <__adddf3>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fe f80d 	bl	8000a8c <__aeabi_dcmpge>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <servo_controller_scara_auto_calibrate_axis+0x364>
			{
				HAL_Delay(50);
 8002a78:	2032      	movs	r0, #50	@ 0x32
 8002a7a:	f002 f899 	bl	8004bb0 <HAL_Delay>
 8002a7e:	e002      	b.n	8002a86 <servo_controller_scara_auto_calibrate_axis+0x36a>
			}
			else
			{
				HAL_Delay(5);
 8002a80:	2005      	movs	r0, #5
 8002a82:	f002 f895 	bl	8004bb0 <HAL_Delay>
			}

			if (pot_angle >= (axis->max_angle + axis->offset_angle))
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a88:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	db07      	blt.n	8002ab4 <servo_controller_scara_auto_calibrate_axis+0x398>
			{
				axis->calib_max_pulse_width = pulse_width_us;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aa8:	611a      	str	r2, [r3, #16]
				break;
 8002aaa:	e013      	b.n	8002ad4 <servo_controller_scara_auto_calibrate_axis+0x3b8>
 8002aac:	3fe00000 	.word	0x3fe00000
 8002ab0:	00000000 	.word	0x00000000
		for (int i = axis->zero_pulse_width; i >= axis->max_pulse_width; i-=5)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3b05      	subs	r3, #5
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	da99      	bge.n	8002a08 <servo_controller_scara_auto_calibrate_axis+0x2ec>
			}
		}
		// sweep from max angle to min angle
		for (int i = pulse_width_us; i <= axis->min_pulse_width; i+=5)
 8002ad4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002adc:	ee17 3a90 	vmov	r3, s15
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e054      	b.n	8002b8e <servo_controller_scara_auto_calibrate_axis+0x472>
		{
			pulse_width_us = i;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002af2:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002af6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002af8:	f7ff fc66 	bl	80023c8 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 8002afc:	6838      	ldr	r0, [r7, #0]
 8002afe:	f7fe ffa7 	bl	8001a50 <potentiometers_read_angle>
 8002b02:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle <= (axis->min_angle * 0.5) + axis->offset_angle)
 8002b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b08:	f7fd fce2 	bl	80004d0 <__aeabi_f2d>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	460d      	mov	r5, r1
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fcdb 	bl	80004d0 <__aeabi_f2d>
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c8c <servo_controller_scara_auto_calibrate_axis+0x570>)
 8002b20:	f7fd fd2e 	bl	8000580 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4690      	mov	r8, r2
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fccd 	bl	80004d0 <__aeabi_f2d>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	f7fd fb69 	bl	8000214 <__adddf3>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd ff95 	bl	8000a78 <__aeabi_dcmple>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <servo_controller_scara_auto_calibrate_axis+0x440>
			{
				HAL_Delay(50);
 8002b54:	2032      	movs	r0, #50	@ 0x32
 8002b56:	f002 f82b 	bl	8004bb0 <HAL_Delay>
 8002b5a:	e002      	b.n	8002b62 <servo_controller_scara_auto_calibrate_axis+0x446>
			}
			else
			{
				HAL_Delay(5);
 8002b5c:	2005      	movs	r0, #5
 8002b5e:	f002 f827 	bl	8004bb0 <HAL_Delay>
			}

			if (pot_angle <= (axis->min_angle + axis->offset_angle))
 8002b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b64:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d803      	bhi.n	8002b88 <servo_controller_scara_auto_calibrate_axis+0x46c>
			{
				axis->calib_min_pulse_width = pulse_width_us;
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b84:	60da      	str	r2, [r3, #12]
				break;
 8002b86:	e00f      	b.n	8002ba8 <servo_controller_scara_auto_calibrate_axis+0x48c>
		for (int i = pulse_width_us; i <= axis->min_pulse_width; i+=5)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	3305      	adds	r3, #5
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d99d      	bls.n	8002ae4 <servo_controller_scara_auto_calibrate_axis+0x3c8>
			}
		}
		// return to 0
		for (int i = pulse_width_us; i >= axis->max_pulse_width; i-=5)
 8002ba8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb0:	ee17 3a90 	vmov	r3, s15
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e053      	b.n	8002c60 <servo_controller_scara_auto_calibrate_axis+0x544>
		{
			pulse_width_us = i;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002bc6:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bcc:	f7ff fbfc 	bl	80023c8 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f7fe ff3d 	bl	8001a50 <potentiometers_read_angle>
 8002bd6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->min_angle * 0.5) + axis->offset_angle)
 8002bda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bdc:	f7fd fc78 	bl	80004d0 <__aeabi_f2d>
 8002be0:	4604      	mov	r4, r0
 8002be2:	460d      	mov	r5, r1
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc71 	bl	80004d0 <__aeabi_f2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <servo_controller_scara_auto_calibrate_axis+0x570>)
 8002bf4:	f7fd fcc4 	bl	8000580 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc63 	bl	80004d0 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4640      	mov	r0, r8
 8002c10:	4649      	mov	r1, r9
 8002c12:	f7fd faff 	bl	8000214 <__adddf3>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd ff35 	bl	8000a8c <__aeabi_dcmpge>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <servo_controller_scara_auto_calibrate_axis+0x514>
			{
				HAL_Delay(50);
 8002c28:	2032      	movs	r0, #50	@ 0x32
 8002c2a:	f001 ffc1 	bl	8004bb0 <HAL_Delay>
 8002c2e:	e002      	b.n	8002c36 <servo_controller_scara_auto_calibrate_axis+0x51a>
			}
			else
			{
				HAL_Delay(5);
 8002c30:	2005      	movs	r0, #5
 8002c32:	f001 ffbd 	bl	8004bb0 <HAL_Delay>
			}

			if (pot_angle >= (0 + axis->offset_angle))
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c3c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c90 <servo_controller_scara_auto_calibrate_axis+0x574>
 8002c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c44:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	db03      	blt.n	8002c5a <servo_controller_scara_auto_calibrate_axis+0x53e>
			{
				axis->calib_zero_pulse_width = pulse_width_us;
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c56:	615a      	str	r2, [r3, #20]
				break;
 8002c58:	e00f      	b.n	8002c7a <servo_controller_scara_auto_calibrate_axis+0x55e>
		for (int i = pulse_width_us; i >= axis->max_pulse_width; i-=5)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b05      	subs	r3, #5
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	da9e      	bge.n	8002bb8 <servo_controller_scara_auto_calibrate_axis+0x49c>
			}
		}
	}
	axis->cpos = pot_angle;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c80:	bf00      	nop
 8002c82:	3730      	adds	r7, #48	@ 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c8a:	bf00      	nop
 8002c8c:	3fe00000 	.word	0x3fe00000
	...

08002c98 <move_j_scara>:

void move_j_scara(servo_controller_scara_t *_servo_controller_scara, int _axis, float _angle, float _T)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	ed2d 8b06 	vpush	{d8-d10}
 8002c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002caa:	edc7 0a00 	vstr	s1, [r7]
    // assign axis
    servo_t *axis = _servo_controller_scara->axis_0;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    switch (_axis)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d013      	beq.n	8002ce4 <move_j_scara+0x4c>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	dc15      	bgt.n	8002cee <move_j_scara+0x56>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d003      	beq.n	8002cd0 <move_j_scara+0x38>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d005      	beq.n	8002cda <move_j_scara+0x42>
            break;
        case 3:
			axis = _servo_controller_scara->axis_3;
			break;
        default:
            break;
 8002cce:	e00e      	b.n	8002cee <move_j_scara+0x56>
            axis = _servo_controller_scara->axis_1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 8002cd8:	e00a      	b.n	8002cf0 <move_j_scara+0x58>
            axis = _servo_controller_scara->axis_2;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 8002ce2:	e005      	b.n	8002cf0 <move_j_scara+0x58>
			axis = _servo_controller_scara->axis_3;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			break;
 8002cec:	e000      	b.n	8002cf0 <move_j_scara+0x58>
            break;
 8002cee:	bf00      	nop
    }

    // compensate for adjustment from previous move
    float cpos = axis->cpos;
 8002cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (_axis == 0 || _axis == 1)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <move_j_scara+0x6e>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d14a      	bne.n	8002d9c <move_j_scara+0x104>
	{
		float cpos_adjustment;
		if (axis->last_angle_adjustment < 0)
 8002d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	d50c      	bpl.n	8002d32 <move_j_scara+0x9a>
		{
			cpos_adjustment = -(axis->last_angle_adjustment) * 0.5;
 8002d18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d1c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d20:	eef1 7a67 	vneg.f32	s15, s15
 8002d24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 8002d30:	e009      	b.n	8002d46 <move_j_scara+0xae>
		}
		else
		{
			cpos_adjustment = axis->last_angle_adjustment * 0.5;
 8002d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d36:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		}

		if (_angle - cpos > cpos_adjustment)
 8002d46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d4a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d52:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d508      	bpl.n	8002d72 <move_j_scara+0xda>
		{
			cpos += cpos_adjustment;
 8002d60:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8002d64:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
 8002d70:	e014      	b.n	8002d9c <move_j_scara+0x104>
		}
		else if (_angle - cpos < cpos_adjustment)
 8002d72:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d76:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd07      	ble.n	8002d9c <move_j_scara+0x104>
		{
			cpos -= cpos_adjustment;
 8002d8c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8002d90:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d98:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		}
	}

	float tpos = _angle;        // target position in degrees
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	673b      	str	r3, [r7, #112]	@ 0x70
	float h = tpos - cpos;     	// displacement in degrees
 8002da0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002da4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dac:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	float T = _T;				// time to complete move
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	66bb      	str	r3, [r7, #104]	@ 0x68
	float alpha = 0.3;         	// acceleration phase duration as fraction of T
 8002db4:	4bc6      	ldr	r3, [pc, #792]	@ (80030d0 <move_j_scara+0x438>)
 8002db6:	667b      	str	r3, [r7, #100]	@ 0x64
	float beta = 0.3;          	// jerk phase duration as fraction of T_a
 8002db8:	4bc5      	ldr	r3, [pc, #788]	@ (80030d0 <move_j_scara+0x438>)
 8002dba:	663b      	str	r3, [r7, #96]	@ 0x60

	// calculate double-S profile parameters
	float T_a, T_j, v_max, a_max, j_max;
	calc_double_s_parameters(T, h, alpha, beta, &T_a, &T_j, &v_max, &a_max, &j_max);
 8002dbc:	f107 0414 	add.w	r4, r7, #20
 8002dc0:	f107 0218 	add.w	r2, r7, #24
 8002dc4:	f107 011c 	add.w	r1, r7, #28
 8002dc8:	f107 0020 	add.w	r0, r7, #32
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	edd7 1a18 	vldr	s3, [r7, #96]	@ 0x60
 8002dd8:	ed97 1a19 	vldr	s2, [r7, #100]	@ 0x64
 8002ddc:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8002de0:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8002de4:	f000 fed8 	bl	8003b98 <calc_double_s_parameters>
	// ============================== MOVE ==============================

	float P;
	float I;
	float D;
	if (_axis == 0)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <move_j_scara+0x170>
	{
		P = _servo_controller_scara->P_0;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		I = _servo_controller_scara->I_0;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		D = _servo_controller_scara->D_0;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e06:	e00b      	b.n	8002e20 <move_j_scara+0x188>
	}
	else
	{
		P = _servo_controller_scara->P_1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		I = _servo_controller_scara->I_1;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		D = _servo_controller_scara->D_1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}

	float error_sum = 0.0;
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	float last_error = 0.0;
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	float max_integral = 20.0;
 8002e30:	4ba8      	ldr	r3, [pc, #672]	@ (80030d4 <move_j_scara+0x43c>)
 8002e32:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// calculate samples
	int samples = (int)(T * 1000.0 / SAMPLING_TIME);
 8002e34:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002e36:	f7fd fb4b 	bl	80004d0 <__aeabi_f2d>
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4ba6      	ldr	r3, [pc, #664]	@ (80030d8 <move_j_scara+0x440>)
 8002e40:	f7fd fb9e 	bl	8000580 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f7fd fe48 	bl	8000ae0 <__aeabi_d2iz>
 8002e50:	4603      	mov	r3, r0
 8002e52:	65bb      	str	r3, [r7, #88]	@ 0x58

	for (int i = 0; i < samples; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e5a:	e100      	b.n	800305e <move_j_scara+0x3c6>
	{
	    double t = i * SAMPLING_TIME / 1000.0; // Convert sampling time to seconds
 8002e5c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002e60:	f7fd fb24 	bl	80004ac <__aeabi_i2d>
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	4b9b      	ldr	r3, [pc, #620]	@ (80030d8 <move_j_scara+0x440>)
 8002e6a:	f7fd fcb3 	bl	80007d4 <__aeabi_ddiv>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	    // desired position using double S-curve profile
	    float dpos = cpos + calc_double_s_value(T, h, T_a, T_j, v_max, a_max, j_max, t);
 8002e76:	ed97 8a08 	vldr	s16, [r7, #32]
 8002e7a:	edd7 8a07 	vldr	s17, [r7, #28]
 8002e7e:	ed97 9a06 	vldr	s18, [r7, #24]
 8002e82:	edd7 9a05 	vldr	s19, [r7, #20]
 8002e86:	ed97 aa04 	vldr	s20, [r7, #16]
 8002e8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002e8e:	f7fd fe6f 	bl	8000b70 <__aeabi_d2f>
 8002e92:	4603      	mov	r3, r0
 8002e94:	ee03 3a90 	vmov	s7, r3
 8002e98:	eeb0 3a4a 	vmov.f32	s6, s20
 8002e9c:	eef0 2a69 	vmov.f32	s5, s19
 8002ea0:	eeb0 2a49 	vmov.f32	s4, s18
 8002ea4:	eef0 1a68 	vmov.f32	s3, s17
 8002ea8:	eeb0 1a48 	vmov.f32	s2, s16
 8002eac:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8002eb0:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8002eb4:	f000 fef8 	bl	8003ca8 <calc_double_s_value>
 8002eb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ebc:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ec4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	    // ----- control loop -----
	    if (_axis == 0 || _axis == 1)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <move_j_scara+0x23e>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 80b6 	bne.w	8003042 <move_j_scara+0x3aa>
	    {
	        // error calculation
	        float pot_read = potentiometers_read_angle(_axis);
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	f7fe fdba 	bl	8001a50 <potentiometers_read_angle>
 8002edc:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	        float error = dpos - pot_read;
 8002ee0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002ee4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	        // PID terms
	        float P_term_move = error * P;
 8002ef0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002ef4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	        // integral term (with anti-windup)
	        error_sum += error * (SAMPLING_TIME / 1000.0);
 8002f00:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002f04:	f7fd fae4 	bl	80004d0 <__aeabi_f2d>
 8002f08:	4604      	mov	r4, r0
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f0e:	f7fd fadf 	bl	80004d0 <__aeabi_f2d>
 8002f12:	a36d      	add	r3, pc, #436	@ (adr r3, 80030c8 <move_j_scara+0x430>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb32 	bl	8000580 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd f976 	bl	8000214 <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7fd fe1e 	bl	8000b70 <__aeabi_d2f>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	        if (error_sum > max_integral)
 8002f3a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002f3e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	dd03      	ble.n	8002f54 <move_j_scara+0x2bc>
	            error_sum = max_integral;
 8002f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f52:	e010      	b.n	8002f76 <move_j_scara+0x2de>
	        else if (error_sum < -max_integral)
 8002f54:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002f58:	eef1 7a67 	vneg.f32	s15, s15
 8002f5c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d505      	bpl.n	8002f76 <move_j_scara+0x2de>
	            error_sum = -max_integral;
 8002f6a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
 8002f72:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

	        float I_term_move = error_sum * I;
 8002f76:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002f7a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	        // derivative term
	        float D_term_move = ((error - last_error) / (SAMPLING_TIME / 1000.0)) * D;
 8002f86:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002f8a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd fa9b 	bl	80004d0 <__aeabi_f2d>
 8002f9a:	a34b      	add	r3, pc, #300	@ (adr r3, 80030c8 <move_j_scara+0x430>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f7fd fc18 	bl	80007d4 <__aeabi_ddiv>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002fb0:	f7fd fa8e 	bl	80004d0 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd fae0 	bl	8000580 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fdd2 	bl	8000b70 <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
	        last_error = error;
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	        // PID output
	        float pid_output = P_term_move + I_term_move + D_term_move;
 8002fd6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002fda:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	        // limit PID output to +-5 degrees
	        float adjusted_error;
	        if (pid_output > 5)
 8002fee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ff2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	dd03      	ble.n	8003008 <move_j_scara+0x370>
	        {
	            adjusted_error = 5;
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <move_j_scara+0x444>)
 8003002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003006:	e00f      	b.n	8003028 <move_j_scara+0x390>
	        }
	        else if (pid_output < -5)
 8003008:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800300c:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8003010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d503      	bpl.n	8003022 <move_j_scara+0x38a>
	        {
	            adjusted_error = -5;
 800301a:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <move_j_scara+0x448>)
 800301c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003020:	e002      	b.n	8003028 <move_j_scara+0x390>
	        }
	        else
	        {
	            adjusted_error = pid_output;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	        }

	        // set adjusted position with PID correction
	        servo_set_angle(axis, dpos + adjusted_error);
 8003028:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800302c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800303c:	f7ff fa0e 	bl	800245c <servo_set_angle>
	    {
 8003040:	e005      	b.n	800304e <move_j_scara+0x3b6>
	    }
	    // ------------------------
	    else
	    {
	        // no PID correction for other axes
	        servo_set_angle(axis, dpos);
 8003042:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8003046:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800304a:	f7ff fa07 	bl	800245c <servo_set_angle>
	    }

	    HAL_Delay(SAMPLING_TIME);
 800304e:	2001      	movs	r0, #1
 8003050:	f001 fdae 	bl	8004bb0 <HAL_Delay>
	for (int i = 0; i < samples; i++)
 8003054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003058:	3301      	adds	r3, #1
 800305a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003064:	429a      	cmp	r2, r3
 8003066:	f6ff aef9 	blt.w	8002e5c <move_j_scara+0x1c4>
	}

	// ============================== SETTLING ==============================

	// get angle before settling
	float angle_before_settling = 0.0;
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if (_axis == 0 || _axis == 1)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <move_j_scara+0x3e4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d104      	bne.n	8003086 <move_j_scara+0x3ee>
	{
		angle_before_settling = potentiometers_read_angle(_axis);
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f7fe fce7 	bl	8001a50 <potentiometers_read_angle>
 8003082:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
	}
    float pulse_width_correction = 0.0;
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	67bb      	str	r3, [r7, #120]	@ 0x78

	// settling time (seconds) to reduce backlash
	int settling_samples = (int)(_servo_controller_scara->settling_time * 1000.0 / SAMPLING_TIME_SETTLING);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa1d 	bl	80004d0 <__aeabi_f2d>
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <move_j_scara+0x440>)
 800309c:	f7fd fa70 	bl	8000580 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <move_j_scara+0x44c>)
 80030ae:	f7fd fb91 	bl	80007d4 <__aeabi_ddiv>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7fd fd11 	bl	8000ae0 <__aeabi_d2iz>
 80030be:	4603      	mov	r3, r0
 80030c0:	657b      	str	r3, [r7, #84]	@ 0x54

	for (int i = 0; i < settling_samples; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80030c6:	e057      	b.n	8003178 <move_j_scara+0x4e0>
 80030c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80030cc:	3f50624d 	.word	0x3f50624d
 80030d0:	3e99999a 	.word	0x3e99999a
 80030d4:	41a00000 	.word	0x41a00000
 80030d8:	408f4000 	.word	0x408f4000
 80030dc:	40a00000 	.word	0x40a00000
 80030e0:	c0a00000 	.word	0xc0a00000
 80030e4:	40490000 	.word	0x40490000
	{
	    // ----- control loop -----
	    if (_axis == 0 || _axis == 1)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <move_j_scara+0x45c>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d13b      	bne.n	800316c <move_j_scara+0x4d4>
	    {
	        float pot_read = potentiometers_read_angle(_axis);
 80030f4:	68b8      	ldr	r0, [r7, #8]
 80030f6:	f7fe fcab 	bl	8001a50 <potentiometers_read_angle>
 80030fa:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

	        if (tpos - pot_read < -0.5) {
 80030fe:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003102:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800310e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d502      	bpl.n	800311e <move_j_scara+0x486>
	        	pulse_width_correction = 5;
 8003118:	4b26      	ldr	r3, [pc, #152]	@ (80031b4 <move_j_scara+0x51c>)
 800311a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800311c:	e012      	b.n	8003144 <move_j_scara+0x4ac>
	        } else if (tpos - pot_read > 0.5) {
 800311e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003122:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800312e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003136:	dd02      	ble.n	800313e <move_j_scara+0x4a6>
	        	pulse_width_correction = -5;
 8003138:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <move_j_scara+0x520>)
 800313a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800313c:	e002      	b.n	8003144 <move_j_scara+0x4ac>
	        } else {
	        	pulse_width_correction = 0;
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	67bb      	str	r3, [r7, #120]	@ 0x78
	        }

	        float current_pulse_width = servo_get_pulse_width_us(axis);
 8003144:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003148:	f7ff f8ea 	bl	8002320 <servo_get_pulse_width_us>
 800314c:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	        float adjusted_pulse_width = current_pulse_width + pulse_width_correction;
 8003150:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003154:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	        servo_set_pulse_width_us(axis, adjusted_pulse_width);
 8003160:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8003164:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003168:	f7ff f92e 	bl	80023c8 <servo_set_pulse_width_us>
	    }

	    HAL_Delay(SAMPLING_TIME_SETTLING);
 800316c:	2032      	movs	r0, #50	@ 0x32
 800316e:	f001 fd1f 	bl	8004bb0 <HAL_Delay>
	for (int i = 0; i < settling_samples; i++)
 8003172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003174:	3301      	adds	r3, #1
 8003176:	677b      	str	r3, [r7, #116]	@ 0x74
 8003178:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	429a      	cmp	r2, r3
 800317e:	dbb3      	blt.n	80030e8 <move_j_scara+0x450>
	}

	// set last angle adjustment from settling
	if (_axis == 0 || _axis == 1)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <move_j_scara+0x4f4>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <move_j_scara+0x50e>
	{
		axis->last_angle_adjustment = angle_before_settling - potentiometers_read_angle(_axis);
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	f7fe fc5f 	bl	8001a50 <potentiometers_read_angle>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800319a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031a2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}
}
 80031a6:	bf00      	nop
 80031a8:	37a8      	adds	r7, #168	@ 0xa8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	ecbd 8b06 	vpop	{d8-d10}
 80031b0:	bdb0      	pop	{r4, r5, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40a00000 	.word	0x40a00000
 80031b8:	c0a00000 	.word	0xc0a00000
 80031bc:	00000000 	.word	0x00000000

080031c0 <move_js_scara>:

void move_js_scara(servo_controller_scara_t *_servo_controller_scara,
		     	   float _angle_0, float _angle_1, float _angle_2, float _angle_3, float _T)
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	ed2d 8b08 	vpush	{d8-d11}
 80031c6:	b0d6      	sub	sp, #344	@ 0x158
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031d2:	6018      	str	r0, [r3, #0]
 80031d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031dc:	ed83 0a00 	vstr	s0, [r3]
 80031e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031e8:	edc3 0a00 	vstr	s1, [r3]
 80031ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80031f4:	ed83 1a00 	vstr	s2, [r3]
 80031f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003200:	edc3 1a00 	vstr	s3, [r3]
 8003204:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003208:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800320c:	ed83 2a00 	vstr	s4, [r3]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 8003210:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003214:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						   _servo_controller_scara->axis_1,
 8003220:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003224:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 800322c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
						   _servo_controller_scara->axis_2,
 8003230:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003234:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 800323c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
						   _servo_controller_scara->axis_3};
 8003240:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 800324c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	// input variables
    float cpos[AXES];
    float tpos[AXES] = {_angle_0, _angle_1, _angle_2, _angle_3};
 8003250:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003254:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800325e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003262:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800326c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003270:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800327a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    float h[AXES];     	        // displacement in degrees
	float T = _T;				// time to complete move
 8003288:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800328c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	float alpha = 0.3;         	// acceleration phase duration as fraction of T
 8003296:	4bc6      	ldr	r3, [pc, #792]	@ (80035b0 <move_js_scara+0x3f0>)
 8003298:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	float beta = 0.3;          	// jerk phase duration as fraction of T_a
 800329c:	4bc4      	ldr	r3, [pc, #784]	@ (80035b0 <move_js_scara+0x3f0>)
 800329e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    // calculate double-S profile parameters
	float T_a[AXES], T_j[AXES], v_max[AXES], a_max[AXES], j_max[AXES];

    for (int i = 0; i < AXES; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80032a8:	e0f6      	b.n	8003498 <move_js_scara+0x2d8>
    {
    	cpos[i] = axis[i]->cpos;
 80032aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032b4:	443b      	add	r3, r7
 80032b6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80032ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032c6:	443b      	add	r3, r7
 80032c8:	3b84      	subs	r3, #132	@ 0x84
 80032ca:	601a      	str	r2, [r3, #0]

    	if (i == 0 || i == 1)
 80032cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <move_js_scara+0x11e>
 80032d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 8087 	bne.w	80033ec <move_js_scara+0x22c>
    	{
    		float cpos_adjustment;
			if (axis[i]->last_angle_adjustment < 0)
 80032de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032e8:	443b      	add	r3, r7
 80032ea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80032ee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80032f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d512      	bpl.n	8003322 <move_js_scara+0x162>
			{
				cpos_adjustment = -(axis[i]->last_angle_adjustment) * 0.5;
 80032fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003306:	443b      	add	r3, r7
 8003308:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800330c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003310:	eef1 7a67 	vneg.f32	s15, s15
 8003314:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331c:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
 8003320:	e00f      	b.n	8003342 <move_js_scara+0x182>
			}
			else
			{
				cpos_adjustment = axis[i]->last_angle_adjustment * 0.5;
 8003322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800332c:	443b      	add	r3, r7
 800332e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003332:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003336:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800333a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333e:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
			}

			if (tpos[AXES] - cpos[i] > cpos_adjustment)
 8003342:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8003346:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003350:	443b      	add	r3, r7
 8003352:	3b84      	subs	r3, #132	@ 0x84
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335c:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d516      	bpl.n	8003398 <move_js_scara+0x1d8>
			{
				cpos[i] += cpos_adjustment;
 800336a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003374:	443b      	add	r3, r7
 8003376:	3b84      	subs	r3, #132	@ 0x84
 8003378:	ed93 7a00 	vldr	s14, [r3]
 800337c:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800338e:	443b      	add	r3, r7
 8003390:	3b84      	subs	r3, #132	@ 0x84
 8003392:	edc3 7a00 	vstr	s15, [r3]
 8003396:	e029      	b.n	80033ec <move_js_scara+0x22c>
			}
			else if (tpos[AXES] - cpos[i] < cpos_adjustment)
 8003398:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800339c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033a6:	443b      	add	r3, r7
 80033a8:	3b84      	subs	r3, #132	@ 0x84
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80033b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd15      	ble.n	80033ec <move_js_scara+0x22c>
			{
				cpos[i] -= cpos_adjustment;
 80033c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033ca:	443b      	add	r3, r7
 80033cc:	3b84      	subs	r3, #132	@ 0x84
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80033d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033e4:	443b      	add	r3, r7
 80033e6:	3b84      	subs	r3, #132	@ 0x84
 80033e8:	edc3 7a00 	vstr	s15, [r3]
			}
    	}

        h[i] = tpos[i] - cpos[i];
 80033ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033f6:	443b      	add	r3, r7
 80033f8:	3b94      	subs	r3, #148	@ 0x94
 80033fa:	ed93 7a00 	vldr	s14, [r3]
 80033fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003408:	443b      	add	r3, r7
 800340a:	3b84      	subs	r3, #132	@ 0x84
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800341e:	443b      	add	r3, r7
 8003420:	3ba4      	subs	r3, #164	@ 0xa4
 8003422:	edc3 7a00 	vstr	s15, [r3]
    	calc_double_s_parameters(T, h[i], alpha, beta, &T_a[i], &T_j[i], &v_max[i], &a_max[i], &j_max[i]);
 8003426:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003430:	443b      	add	r3, r7
 8003432:	3ba4      	subs	r3, #164	@ 0xa4
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800343c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	18d0      	adds	r0, r2, r3
 8003444:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8003448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	18d1      	adds	r1, r2, r3
 8003450:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	18d4      	adds	r4, r2, r3
 800345c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	18d5      	adds	r5, r2, r3
 8003468:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800346c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	462b      	mov	r3, r5
 8003478:	4622      	mov	r2, r4
 800347a:	edd7 1a4a 	vldr	s3, [r7, #296]	@ 0x128
 800347e:	ed97 1a4b 	vldr	s2, [r7, #300]	@ 0x12c
 8003482:	eef0 0a67 	vmov.f32	s1, s15
 8003486:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 800348a:	f000 fb85 	bl	8003b98 <calc_double_s_parameters>
    for (int i = 0; i < AXES; i++)
 800348e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003492:	3301      	adds	r3, #1
 8003494:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800349c:	2b03      	cmp	r3, #3
 800349e:	f77f af04 	ble.w	80032aa <move_js_scara+0xea>
    }

	// ============================== MOVE ==============================

    // PID for axis 0 and 1
    float P[2] = {_servo_controller_scara->P_0, _servo_controller_scara->P_1};
 80034a2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80034b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	65bb      	str	r3, [r7, #88]	@ 0x58
	float I[2] = {_servo_controller_scara->I_0, _servo_controller_scara->I_1};
 80034be:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034e8:	605a      	str	r2, [r3, #4]
	float D[2] = {_servo_controller_scara->D_0, _servo_controller_scara->D_1};
 80034ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003504:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800350c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003510:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003514:	605a      	str	r2, [r3, #4]

	float error_sum[2] = {0.0, 0.0};
 8003516:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800351a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003528:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
	float last_error[2] = {0.0, 0.0};
 8003532:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003536:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003544:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	605a      	str	r2, [r3, #4]
	float max_integral[2] = {20.0, 20.0};
 800354e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003552:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003556:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <move_js_scara+0x3f4>)
 8003558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800355c:	e883 0003 	stmia.w	r3, {r0, r1}

	// calculate samples
	int samples = (int)(T * 1000.0 / SAMPLING_TIME);
 8003560:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8003564:	f7fc ffb4 	bl	80004d0 <__aeabi_f2d>
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <move_js_scara+0x3f8>)
 800356e:	f7fd f807 	bl	8000580 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f7fd fab1 	bl	8000ae0 <__aeabi_d2iz>
 800357e:	4603      	mov	r3, r0
 8003580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	for (int i = 0; i < samples; i++) {
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800358a:	e1da      	b.n	8003942 <move_js_scara+0x782>
        double t = i * SAMPLING_TIME / 1000.0; // convert sampling time to seconds
 800358c:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8003590:	f7fc ff8c 	bl	80004ac <__aeabi_i2d>
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <move_js_scara+0x3f8>)
 800359a:	f7fd f91b 	bl	80007d4 <__aeabi_ddiv>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < AXES; j++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80035ac:	e1bc      	b.n	8003928 <move_js_scara+0x768>
 80035ae:	bf00      	nop
 80035b0:	3e99999a 	.word	0x3e99999a
 80035b4:	0800b648 	.word	0x0800b648
 80035b8:	408f4000 	.word	0x408f4000
        {
            float dpos = cpos[j]
 80035bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035c6:	443b      	add	r3, r7
 80035c8:	3b84      	subs	r3, #132	@ 0x84
 80035ca:	ed93 8a00 	vldr	s16, [r3]
                         + calc_double_s_value(T, h[j], T_a[j], T_j[j], v_max[j], a_max[j], j_max[j], t);
 80035ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035d8:	443b      	add	r3, r7
 80035da:	3ba4      	subs	r3, #164	@ 0xa4
 80035dc:	edd3 8a00 	vldr	s17, [r3]
 80035e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ea:	443b      	add	r3, r7
 80035ec:	3bb4      	subs	r3, #180	@ 0xb4
 80035ee:	ed93 9a00 	vldr	s18, [r3]
 80035f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035fc:	443b      	add	r3, r7
 80035fe:	3bc4      	subs	r3, #196	@ 0xc4
 8003600:	edd3 9a00 	vldr	s19, [r3]
 8003604:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800360e:	443b      	add	r3, r7
 8003610:	3bd4      	subs	r3, #212	@ 0xd4
 8003612:	ed93 aa00 	vldr	s20, [r3]
 8003616:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003620:	443b      	add	r3, r7
 8003622:	3be4      	subs	r3, #228	@ 0xe4
 8003624:	edd3 aa00 	vldr	s21, [r3]
 8003628:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003632:	443b      	add	r3, r7
 8003634:	3bf4      	subs	r3, #244	@ 0xf4
 8003636:	ed93 ba00 	vldr	s22, [r3]
 800363a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800363e:	f7fd fa97 	bl	8000b70 <__aeabi_d2f>
 8003642:	4603      	mov	r3, r0
 8003644:	ee03 3a90 	vmov	s7, r3
 8003648:	eeb0 3a4b 	vmov.f32	s6, s22
 800364c:	eef0 2a6a 	vmov.f32	s5, s21
 8003650:	eeb0 2a4a 	vmov.f32	s4, s20
 8003654:	eef0 1a69 	vmov.f32	s3, s19
 8003658:	eeb0 1a49 	vmov.f32	s2, s18
 800365c:	eef0 0a68 	vmov.f32	s1, s17
 8003660:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 8003664:	f000 fb20 	bl	8003ca8 <calc_double_s_value>
 8003668:	eef0 7a40 	vmov.f32	s15, s0
            float dpos = cpos[j]
 800366c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003670:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104

            // ----- control loop -----
            if (j == 0 || j == 1)
 8003674:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <move_js_scara+0x4c6>
 800367c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 813f 	bne.w	8003904 <move_js_scara+0x744>
            {
            	// error calculation
				float pot_read = potentiometers_read_angle(j);
 8003686:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 800368a:	f7fe f9e1 	bl	8001a50 <potentiometers_read_angle>
 800368e:	ed87 0a40 	vstr	s0, [r7, #256]	@ 0x100
				float error = dpos - pot_read;
 8003692:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003696:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

				// PID terms
				float P_term_move = error * P[j];
 80036a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036ac:	443b      	add	r3, r7
 80036ae:	3bfc      	subs	r3, #252	@ 0xfc
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

				// integral term (with anti-windup)
				error_sum[j] += error * (SAMPLING_TIME / 1000.0);
 80036c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80036c4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80036c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fefc 	bl	80004d0 <__aeabi_f2d>
 80036d8:	4604      	mov	r4, r0
 80036da:	460d      	mov	r5, r1
 80036dc:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80036e0:	f7fc fef6 	bl	80004d0 <__aeabi_f2d>
 80036e4:	f20f 43a8 	addw	r3, pc, #1192	@ 0x4a8
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff48 	bl	8000580 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f7fc fd8c 	bl	8000214 <__adddf3>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f7fd fa34 	bl	8000b70 <__aeabi_d2f>
 8003708:	4601      	mov	r1, r0
 800370a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800370e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003712:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	6019      	str	r1, [r3, #0]
				if (error_sum[j] > max_integral[j])
 800371c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003720:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003724:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	ed93 7a00 	vldr	s14, [r3]
 8003730:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003734:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003738:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	dd12      	ble.n	8003774 <move_js_scara+0x5b4>
					error_sum[j] = max_integral[j];
 800374e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003752:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003756:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003764:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8003768:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e030      	b.n	80037d6 <move_js_scara+0x616>
				else if (error_sum[j] < -max_integral[j])
 8003774:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003778:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800377c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	ed93 7a00 	vldr	s14, [r3]
 8003788:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800378c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003790:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	eef1 7a67 	vneg.f32	s15, s15
 80037a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d515      	bpl.n	80037d6 <move_js_scara+0x616>
					error_sum[j] = -max_integral[j];
 80037aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037ae:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80037b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	eef1 7a67 	vneg.f32	s15, s15
 80037c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037c6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80037ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	edc3 7a00 	vstr	s15, [r3]

				float I_term_move = error_sum[j] * I[j];
 80037d6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037da:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80037de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	ed93 7a00 	vldr	s14, [r3]
 80037ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037ee:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 80037f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4

				// derivative term
				float D_term_move = ((error - last_error[j]) / (SAMPLING_TIME / 1000.0)) * D[j];
 8003806:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800380a:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800380e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 800381e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fe53 	bl	80004d0 <__aeabi_f2d>
 800382a:	a3d9      	add	r3, pc, #868	@ (adr r3, 8003b90 <move_js_scara+0x9d0>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc ffd0 	bl	80007d4 <__aeabi_ddiv>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003840:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8003844:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe3e 	bl	80004d0 <__aeabi_f2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4620      	mov	r0, r4
 800385a:	4629      	mov	r1, r5
 800385c:	f7fc fe90 	bl	8000580 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f982 	bl	8000b70 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
				last_error[j] = error;
 8003872:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003876:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800387a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003886:	601a      	str	r2, [r3, #0]

				// PID output
				float pid_output = P_term_move + I_term_move + D_term_move;
 8003888:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800388c:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8003898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389c:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec

				// limit PID output to +-5 degrees
				float adjusted_error;
				if (pid_output > 5)
 80038a0:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80038a4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	dd03      	ble.n	80038ba <move_js_scara+0x6fa>
				{
					adjusted_error = 5;
 80038b2:	4bb3      	ldr	r3, [pc, #716]	@ (8003b80 <move_js_scara+0x9c0>)
 80038b4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80038b8:	e010      	b.n	80038dc <move_js_scara+0x71c>
				}
				else if (pid_output < -5)
 80038ba:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80038be:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 80038c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	d503      	bpl.n	80038d4 <move_js_scara+0x714>
				{
					adjusted_error = -5;
 80038cc:	4bad      	ldr	r3, [pc, #692]	@ (8003b84 <move_js_scara+0x9c4>)
 80038ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80038d2:	e003      	b.n	80038dc <move_js_scara+0x71c>
				}
				else
				{
					adjusted_error = pid_output;
 80038d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
				}

				// set adjusted position with PID correction
            	servo_set_angle(axis[j], dpos + adjusted_error);
 80038dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038e6:	443b      	add	r3, r7
 80038e8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80038ec:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 80038f0:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80038f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f8:	eeb0 0a67 	vmov.f32	s0, s15
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fdad 	bl	800245c <servo_set_angle>
            {
 8003902:	e00c      	b.n	800391e <move_js_scara+0x75e>
            }
            // ------------------------
            else
            {
            	servo_set_angle(axis[j], dpos);
 8003904:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800390e:	443b      	add	r3, r7
 8003910:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003914:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fd9f 	bl	800245c <servo_set_angle>
        for (int j = 0; j < AXES; j++)
 800391e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003922:	3301      	adds	r3, #1
 8003924:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003928:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800392c:	2b03      	cmp	r3, #3
 800392e:	f77f ae45 	ble.w	80035bc <move_js_scara+0x3fc>
            }
        }

        //Sleep(SAMPLING_TIME);
        HAL_Delay(SAMPLING_TIME);
 8003932:	2001      	movs	r0, #1
 8003934:	f001 f93c 	bl	8004bb0 <HAL_Delay>
	for (int i = 0; i < samples; i++) {
 8003938:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800393c:	3301      	adds	r3, #1
 800393e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003942:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003946:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800394a:	429a      	cmp	r2, r3
 800394c:	f6ff ae1e 	blt.w	800358c <move_js_scara+0x3cc>
	}

	// ============================== SETTLING ==============================

	// get angle before settling
	float angle_before_settling[2] = {0.0, 0.0};
 8003950:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003954:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003962:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
	angle_before_settling[0] = potentiometers_read_angle(0);
 800396c:	2000      	movs	r0, #0
 800396e:	f7fe f86f 	bl	8001a50 <potentiometers_read_angle>
 8003972:	eef0 7a40 	vmov.f32	s15, s0
 8003976:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800397a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800397e:	edc3 7a00 	vstr	s15, [r3]
	angle_before_settling[1] = potentiometers_read_angle(1);
 8003982:	2001      	movs	r0, #1
 8003984:	f7fe f864 	bl	8001a50 <potentiometers_read_angle>
 8003988:	eef0 7a40 	vmov.f32	s15, s0
 800398c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003990:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003994:	edc3 7a01 	vstr	s15, [r3, #4]

	float pulse_width_correction[2] = {0.0, 0.0};
 8003998:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800399c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80039aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]

	// settling time (seconds) to reduce backlash
	int settling_samples = (int)(_servo_controller_scara->settling_time * 1000.0 / SAMPLING_TIME_SETTLING);
 80039b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80039b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fc fd85 	bl	80004d0 <__aeabi_f2d>
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003b88 <move_js_scara+0x9c8>)
 80039cc:	f7fc fdd8 	bl	8000580 <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b8c <move_js_scara+0x9cc>)
 80039de:	f7fc fef9 	bl	80007d4 <__aeabi_ddiv>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	f7fd f879 	bl	8000ae0 <__aeabi_d2iz>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	for (int i = 0; i < settling_samples; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80039fa:	e08e      	b.n	8003b1a <move_js_scara+0x95a>
	{
		// apply to only axis 0 and 1 ...
		for (int j = 0; j < 2; j++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003a02:	e07d      	b.n	8003b00 <move_js_scara+0x940>
		{
			float pot_read = potentiometers_read_angle(j);
 8003a04:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8003a08:	f7fe f822 	bl	8001a50 <potentiometers_read_angle>
 8003a0c:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c

			if (tpos[j] - pot_read < -0.5)
 8003a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a1a:	443b      	add	r3, r7
 8003a1c:	3b94      	subs	r3, #148	@ 0x94
 8003a1e:	ed93 7a00 	vldr	s14, [r3]
 8003a22:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8003a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8003a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d50a      	bpl.n	8003a4e <move_js_scara+0x88e>
			{
				pulse_width_correction[j] = 5; // minimum pulse width as deadband = 4ms
 8003a38:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003a3c:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <move_js_scara+0x9c0>)
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e029      	b.n	8003aa2 <move_js_scara+0x8e2>
			}
			else if (tpos[j] - pot_read > 0.5)
 8003a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a58:	443b      	add	r3, r7
 8003a5a:	3b94      	subs	r3, #148	@ 0x94
 8003a5c:	ed93 7a00 	vldr	s14, [r3]
 8003a60:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8003a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	dd0a      	ble.n	8003a8c <move_js_scara+0x8cc>
			{
				pulse_width_correction[j] = -5;
 8003a76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003a7a:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	4a3f      	ldr	r2, [pc, #252]	@ (8003b84 <move_js_scara+0x9c4>)
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e00a      	b.n	8003aa2 <move_js_scara+0x8e2>
			}
			else
			{
				pulse_width_correction[j] = 0;
 8003a8c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003a90:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
			}

			float current_pulse_width = servo_get_pulse_width_us(axis[j]);
 8003aa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aac:	443b      	add	r3, r7
 8003aae:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fc34 	bl	8002320 <servo_get_pulse_width_us>
 8003ab8:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
			float adjusted_pulse_width = current_pulse_width + pulse_width_correction[j];
 8003abc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003ac0:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003ac4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8003ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad8:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

			servo_set_pulse_width_us(axis[j], adjusted_pulse_width);
 8003adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ae6:	443b      	add	r3, r7
 8003ae8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003aec:	ed97 0a45 	vldr	s0, [r7, #276]	@ 0x114
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fc69 	bl	80023c8 <servo_set_pulse_width_us>
		for (int j = 0; j < 2; j++)
 8003af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003afa:	3301      	adds	r3, #1
 8003afc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003b00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f77f af7d 	ble.w	8003a04 <move_js_scara+0x844>
		}

		HAL_Delay(SAMPLING_TIME_SETTLING);
 8003b0a:	2032      	movs	r0, #50	@ 0x32
 8003b0c:	f001 f850 	bl	8004bb0 <HAL_Delay>
	for (int i = 0; i < settling_samples; i++)
 8003b10:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003b14:	3301      	adds	r3, #1
 8003b16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003b1a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f6ff af6a 	blt.w	80039fc <move_js_scara+0x83c>
	}

	// set last angle adjustment from settling
	axis[0]->last_angle_adjustment = angle_before_settling[0] - potentiometers_read_angle(0);
 8003b28:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003b2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b30:	ed93 8a00 	vldr	s16, [r3]
 8003b34:	2000      	movs	r0, #0
 8003b36:	f7fd ff8b 	bl	8001a50 <potentiometers_read_angle>
 8003b3a:	eef0 7a40 	vmov.f32	s15, s0
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b42:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003b46:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	axis[1]->last_angle_adjustment = angle_before_settling[1] - potentiometers_read_angle(1);
 8003b4a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003b4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b52:	ed93 8a01 	vldr	s16, [r3, #4]
 8003b56:	2001      	movs	r0, #1
 8003b58:	f7fd ff7a 	bl	8001a50 <potentiometers_read_angle>
 8003b5c:	eef0 7a40 	vmov.f32	s15, s0
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003b68:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8003b6c:	bf00      	nop
 8003b6e:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8003b72:	46bd      	mov	sp, r7
 8003b74:	ecbd 8b08 	vpop	{d8-d11}
 8003b78:	bdb0      	pop	{r4, r5, r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w
 8003b80:	40a00000 	.word	0x40a00000
 8003b84:	c0a00000 	.word	0xc0a00000
 8003b88:	408f4000 	.word	0x408f4000
 8003b8c:	40490000 	.word	0x40490000
 8003b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b94:	3f50624d 	.word	0x3f50624d

08003b98 <calc_double_s_parameters>:
// ----------------------------------------------------------------------------------------------------

void calc_double_s_parameters(float T, float h, float alpha, float beta,
							  float *T_a, float *T_j,
							  float *v_max, float *a_max, float *j_max)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	ed87 0a07 	vstr	s0, [r7, #28]
 8003ba2:	edc7 0a06 	vstr	s1, [r7, #24]
 8003ba6:	ed87 1a05 	vstr	s2, [r7, #20]
 8003baa:	edc7 1a04 	vstr	s3, [r7, #16]
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
    // accel / decel duration    0 < alpha < 1/2
    *T_a = alpha * T;
 8003bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bba:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	edc3 7a00 	vstr	s15, [r3]
    // jerk duration             0 < beta < 1/2
    *T_j = beta * (*T_a);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	ed93 7a00 	vldr	s14, [r3]
 8003bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum velocity
    *v_max = h / ((1 - alpha) * T);
 8003bdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003be8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bf0:	edd7 6a06 	vldr	s13, [r7, #24]
 8003bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum acceleration
    *a_max = h / (alpha * (1 - alpha) * (1 - beta) * T * T);
 8003bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c32:	edd7 6a06 	vldr	s13, [r7, #24]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum jerk
    *j_max = h / (alpha * alpha * beta * (1 - alpha) * (1 - beta) * T * T * T);
 8003c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003c48:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c88:	edd7 6a06 	vldr	s13, [r7, #24]
 8003c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	edc3 7a00 	vstr	s15, [r3]
}
 8003c96:	bf00      	nop
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	0000      	movs	r0, r0
 8003ca4:	0000      	movs	r0, r0
	...

08003ca8 <calc_double_s_value>:


float calc_double_s_value(float T, float h, float T_a, float T_j,
						  float v_max, float a_max, float j_max,
						  float t)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	ed87 0a07 	vstr	s0, [r7, #28]
 8003cb4:	edc7 0a06 	vstr	s1, [r7, #24]
 8003cb8:	ed87 1a05 	vstr	s2, [r7, #20]
 8003cbc:	edc7 1a04 	vstr	s3, [r7, #16]
 8003cc0:	ed87 2a03 	vstr	s4, [r7, #12]
 8003cc4:	edc7 2a02 	vstr	s5, [r7, #8]
 8003cc8:	ed87 3a01 	vstr	s6, [r7, #4]
 8003ccc:	edc7 3a00 	vstr	s7, [r7]
    // acceleration phase
    if (t >= 0 && t <= T_j)
 8003cd0:	edd7 7a00 	vldr	s15, [r7]
 8003cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	db2d      	blt.n	8003d3a <calc_double_s_value+0x92>
 8003cde:	ed97 7a00 	vldr	s14, [r7]
 8003ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	d824      	bhi.n	8003d3a <calc_double_s_value+0x92>
    {
        return j_max * (pow(t, 3) / 6.0);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fc fbed 	bl	80004d0 <__aeabi_f2d>
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	6838      	ldr	r0, [r7, #0]
 8003cfc:	f7fc fbe8 	bl	80004d0 <__aeabi_f2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8003fa0 <calc_double_s_value+0x2f8>
 8003d08:	ec43 2b10 	vmov	d0, r2, r3
 8003d0c:	f005 f834 	bl	8008d78 <pow>
 8003d10:	ec51 0b10 	vmov	r0, r1, d0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	4ba5      	ldr	r3, [pc, #660]	@ (8003fb0 <calc_double_s_value+0x308>)
 8003d1a:	f7fc fd5b 	bl	80007d4 <__aeabi_ddiv>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7fc fc2b 	bl	8000580 <__aeabi_dmul>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f7fc ff1d 	bl	8000b70 <__aeabi_d2f>
 8003d36:	4603      	mov	r3, r0
 8003d38:	e2f3      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    else if (t > T_j && t <= T_a - T_j)
 8003d3a:	ed97 7a00 	vldr	s14, [r7]
 8003d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4a:	dd65      	ble.n	8003e18 <calc_double_s_value+0x170>
 8003d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d50:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d58:	ed97 7a00 	vldr	s14, [r7]
 8003d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d858      	bhi.n	8003e18 <calc_double_s_value+0x170>
    {
    	return (a_max / 6.0) * ((3 * pow(t, 2)) - (3 * T_j * t) + pow(T_j, 2));
 8003d66:	68b8      	ldr	r0, [r7, #8]
 8003d68:	f7fc fbb2 	bl	80004d0 <__aeabi_f2d>
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb0 <calc_double_s_value+0x308>)
 8003d72:	f7fc fd2f 	bl	80007d4 <__aeabi_ddiv>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	6838      	ldr	r0, [r7, #0]
 8003d80:	f7fc fba6 	bl	80004d0 <__aeabi_f2d>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	ed9f 1b87 	vldr	d1, [pc, #540]	@ 8003fa8 <calc_double_s_value+0x300>
 8003d8c:	ec43 2b10 	vmov	d0, r2, r3
 8003d90:	f004 fff2 	bl	8008d78 <pow>
 8003d94:	ec51 0b10 	vmov	r0, r1, d0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	4b85      	ldr	r3, [pc, #532]	@ (8003fb4 <calc_double_s_value+0x30c>)
 8003d9e:	f7fc fbef 	bl	8000580 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4690      	mov	r8, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dae:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003db2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003db6:	edd7 7a00 	vldr	s15, [r7]
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	ee17 0a90 	vmov	r0, s15
 8003dc2:	f7fc fb85 	bl	80004d0 <__aeabi_f2d>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fa1f 	bl	8000210 <__aeabi_dsub>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	4699      	mov	r9, r3
 8003dda:	6938      	ldr	r0, [r7, #16]
 8003ddc:	f7fc fb78 	bl	80004d0 <__aeabi_f2d>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8003fa8 <calc_double_s_value+0x300>
 8003de8:	ec43 2b10 	vmov	d0, r2, r3
 8003dec:	f004 ffc4 	bl	8008d78 <pow>
 8003df0:	ec53 2b10 	vmov	r2, r3, d0
 8003df4:	4640      	mov	r0, r8
 8003df6:	4649      	mov	r1, r9
 8003df8:	f7fc fa0c 	bl	8000214 <__adddf3>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fbbc 	bl	8000580 <__aeabi_dmul>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fc feae 	bl	8000b70 <__aeabi_d2f>
 8003e14:	4603      	mov	r3, r0
 8003e16:	e284      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    else if (t > T_a - T_j && t <= T_a)
 8003e18:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e24:	ed97 7a00 	vldr	s14, [r7]
 8003e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e30:	dd6a      	ble.n	8003f08 <calc_double_s_value+0x260>
 8003e32:	ed97 7a00 	vldr	s14, [r7]
 8003e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	d861      	bhi.n	8003f08 <calc_double_s_value+0x260>
    {
    	return (v_max * (T_a / 2.0)) - (v_max * (T_a - t)) - (-j_max * (pow(T_a - t, 3) / 6.0));
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7fc fb43 	bl	80004d0 <__aeabi_f2d>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f7fc fb3e 	bl	80004d0 <__aeabi_f2d>
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e5c:	f7fc fcba 	bl	80007d4 <__aeabi_ddiv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc fb8a 	bl	8000580 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e78:	edd7 7a00 	vldr	s15, [r7]
 8003e7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e88:	ee17 0a90 	vmov	r0, s15
 8003e8c:	f7fc fb20 	bl	80004d0 <__aeabi_f2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc f9ba 	bl	8000210 <__aeabi_dsub>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4690      	mov	r8, r2
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fc fb13 	bl	80004d0 <__aeabi_f2d>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	460d      	mov	r5, r1
 8003eae:	ed97 7a05 	vldr	s14, [r7, #20]
 8003eb2:	edd7 7a00 	vldr	s15, [r7]
 8003eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eba:	ee17 0a90 	vmov	r0, s15
 8003ebe:	f7fc fb07 	bl	80004d0 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8003fa0 <calc_double_s_value+0x2f8>
 8003eca:	ec43 2b10 	vmov	d0, r2, r3
 8003ece:	f004 ff53 	bl	8008d78 <pow>
 8003ed2:	ec51 0b10 	vmov	r0, r1, d0
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <calc_double_s_value+0x308>)
 8003edc:	f7fc fc7a 	bl	80007d4 <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fb4a 	bl	8000580 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc f98e 	bl	8000214 <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fe36 	bl	8000b70 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	e20c      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    // constant velocity phase
    else if (t > T_a && t <= T - T_a)
 8003f08:	ed97 7a00 	vldr	s14, [r7]
 8003f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	dd4e      	ble.n	8003fb8 <calc_double_s_value+0x310>
 8003f1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f26:	ed97 7a00 	vldr	s14, [r7]
 8003f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f32:	d841      	bhi.n	8003fb8 <calc_double_s_value+0x310>
    {
    	return v_max * (T_a / 2.0) + (v_max * (t - T_a));
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7fc facb 	bl	80004d0 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7fc fac6 	bl	80004d0 <__aeabi_f2d>
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f4c:	f7fc fc42 	bl	80007d4 <__aeabi_ddiv>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4620      	mov	r0, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	f7fc fb12 	bl	8000580 <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	461d      	mov	r5, r3
 8003f64:	ed97 7a00 	vldr	s14, [r7]
 8003f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	ee17 0a90 	vmov	r0, s15
 8003f7c:	f7fc faa8 	bl	80004d0 <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4620      	mov	r0, r4
 8003f86:	4629      	mov	r1, r5
 8003f88:	f7fc f944 	bl	8000214 <__adddf3>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7fc fdec 	bl	8000b70 <__aeabi_d2f>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	e1c2      	b.n	8004322 <calc_double_s_value+0x67a>
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	40080000 	.word	0x40080000
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	40000000 	.word	0x40000000
 8003fb0:	40180000 	.word	0x40180000
 8003fb4:	40080000 	.word	0x40080000
    }
    // deceleration phase
    else if (t > T - T_a && t <= T - T_a + T_j)
 8003fb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc4:	ed97 7a00 	vldr	s14, [r7]
 8003fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	f340 8088 	ble.w	80040e4 <calc_double_s_value+0x43c>
 8003fd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe8:	ed97 7a00 	vldr	s14, [r7]
 8003fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff4:	d876      	bhi.n	80040e4 <calc_double_s_value+0x43c>
    {
    	return h - (v_max * (T_a / 2.0)) + v_max * (t - T + T_a) - (j_max * pow(t - T + T_a, 3) / 6.0);
 8003ff6:	69b8      	ldr	r0, [r7, #24]
 8003ff8:	f7fc fa6a 	bl	80004d0 <__aeabi_f2d>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	460d      	mov	r5, r1
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7fc fa65 	bl	80004d0 <__aeabi_f2d>
 8004006:	4680      	mov	r8, r0
 8004008:	4689      	mov	r9, r1
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7fc fa60 	bl	80004d0 <__aeabi_f2d>
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004018:	f7fc fbdc 	bl	80007d4 <__aeabi_ddiv>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc faac 	bl	8000580 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc f8ee 	bl	8000210 <__aeabi_dsub>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	ed97 7a00 	vldr	s14, [r7]
 8004040:	edd7 7a07 	vldr	s15, [r7, #28]
 8004044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004048:	edd7 7a05 	vldr	s15, [r7, #20]
 800404c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004050:	edd7 7a03 	vldr	s15, [r7, #12]
 8004054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004058:	ee17 0a90 	vmov	r0, s15
 800405c:	f7fc fa38 	bl	80004d0 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	f7fc f8d4 	bl	8000214 <__adddf3>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4690      	mov	r8, r2
 8004072:	4699      	mov	r9, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc fa2b 	bl	80004d0 <__aeabi_f2d>
 800407a:	4604      	mov	r4, r0
 800407c:	460d      	mov	r5, r1
 800407e:	ed97 7a00 	vldr	s14, [r7]
 8004082:	edd7 7a07 	vldr	s15, [r7, #28]
 8004086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800408a:	edd7 7a05 	vldr	s15, [r7, #20]
 800408e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004092:	ee17 0a90 	vmov	r0, s15
 8004096:	f7fc fa1b 	bl	80004d0 <__aeabi_f2d>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8004338 <calc_double_s_value+0x690>
 80040a2:	ec43 2b10 	vmov	d0, r2, r3
 80040a6:	f004 fe67 	bl	8008d78 <pow>
 80040aa:	ec53 2b10 	vmov	r2, r3, d0
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f7fc fa65 	bl	8000580 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4ba1      	ldr	r3, [pc, #644]	@ (8004348 <calc_double_s_value+0x6a0>)
 80040c4:	f7fc fb86 	bl	80007d4 <__aeabi_ddiv>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4640      	mov	r0, r8
 80040ce:	4649      	mov	r1, r9
 80040d0:	f7fc f89e 	bl	8000210 <__aeabi_dsub>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fc fd48 	bl	8000b70 <__aeabi_d2f>
 80040e0:	4603      	mov	r3, r0
 80040e2:	e11e      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    else if (t > T - T_a + T_j && t <= T - T_j)
 80040e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80040e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f8:	ed97 7a00 	vldr	s14, [r7]
 80040fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	f340 80bf 	ble.w	8004286 <calc_double_s_value+0x5de>
 8004108:	ed97 7a07 	vldr	s14, [r7, #28]
 800410c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004114:	ed97 7a00 	vldr	s14, [r7]
 8004118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004120:	f200 80b1 	bhi.w	8004286 <calc_double_s_value+0x5de>
    {
    	return h - (v_max * (T_a / 2.0)) + v_max * (t - T + T_a)
 8004124:	69b8      	ldr	r0, [r7, #24]
 8004126:	f7fc f9d3 	bl	80004d0 <__aeabi_f2d>
 800412a:	4604      	mov	r4, r0
 800412c:	460d      	mov	r5, r1
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7fc f9ce 	bl	80004d0 <__aeabi_f2d>
 8004134:	4680      	mov	r8, r0
 8004136:	4689      	mov	r9, r1
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	f7fc f9c9 	bl	80004d0 <__aeabi_f2d>
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004146:	f7fc fb45 	bl	80007d4 <__aeabi_ddiv>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4640      	mov	r0, r8
 8004150:	4649      	mov	r1, r9
 8004152:	f7fc fa15 	bl	8000580 <__aeabi_dmul>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc f857 	bl	8000210 <__aeabi_dsub>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4614      	mov	r4, r2
 8004168:	461d      	mov	r5, r3
 800416a:	ed97 7a00 	vldr	s14, [r7]
 800416e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004176:	edd7 7a05 	vldr	s15, [r7, #20]
 800417a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800417e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	ee17 0a90 	vmov	r0, s15
 800418a:	f7fc f9a1 	bl	80004d0 <__aeabi_f2d>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fc f83d 	bl	8000214 <__adddf3>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4614      	mov	r4, r2
 80041a0:	461d      	mov	r5, r3
               - ((a_max / 6.0) * (3 * pow(t - T + T_a, 2) - 3 * T_j * (t - T + T_a) + pow(T_j, 2)));
 80041a2:	68b8      	ldr	r0, [r7, #8]
 80041a4:	f7fc f994 	bl	80004d0 <__aeabi_f2d>
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	4b66      	ldr	r3, [pc, #408]	@ (8004348 <calc_double_s_value+0x6a0>)
 80041ae:	f7fc fb11 	bl	80007d4 <__aeabi_ddiv>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
 80041ba:	ed97 7a00 	vldr	s14, [r7]
 80041be:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	ee17 0a90 	vmov	r0, s15
 80041d2:	f7fc f97d 	bl	80004d0 <__aeabi_f2d>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 8004340 <calc_double_s_value+0x698>
 80041de:	ec43 2b10 	vmov	d0, r2, r3
 80041e2:	f004 fdc9 	bl	8008d78 <pow>
 80041e6:	ec51 0b10 	vmov	r0, r1, d0
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	4b57      	ldr	r3, [pc, #348]	@ (800434c <calc_double_s_value+0x6a4>)
 80041f0:	f7fc f9c6 	bl	8000580 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4692      	mov	sl, r2
 80041fa:	469b      	mov	fp, r3
 80041fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004200:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004204:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004208:	edd7 6a00 	vldr	s13, [r7]
 800420c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004210:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004214:	edd7 7a05 	vldr	s15, [r7, #20]
 8004218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	ee17 0a90 	vmov	r0, s15
 8004224:	f7fc f954 	bl	80004d0 <__aeabi_f2d>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4650      	mov	r0, sl
 800422e:	4659      	mov	r1, fp
 8004230:	f7fb ffee 	bl	8000210 <__aeabi_dsub>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4692      	mov	sl, r2
 800423a:	469b      	mov	fp, r3
 800423c:	6938      	ldr	r0, [r7, #16]
 800423e:	f7fc f947 	bl	80004d0 <__aeabi_f2d>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8004340 <calc_double_s_value+0x698>
 800424a:	ec43 2b10 	vmov	d0, r2, r3
 800424e:	f004 fd93 	bl	8008d78 <pow>
 8004252:	ec53 2b10 	vmov	r2, r3, d0
 8004256:	4650      	mov	r0, sl
 8004258:	4659      	mov	r1, fp
 800425a:	f7fb ffdb 	bl	8000214 <__adddf3>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4640      	mov	r0, r8
 8004264:	4649      	mov	r1, r9
 8004266:	f7fc f98b 	bl	8000580 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4620      	mov	r0, r4
 8004270:	4629      	mov	r1, r5
 8004272:	f7fb ffcd 	bl	8000210 <__aeabi_dsub>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f7fc fc77 	bl	8000b70 <__aeabi_d2f>
 8004282:	4603      	mov	r3, r0
 8004284:	e04d      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    else if (t > T - T_j && t <= T)
 8004286:	ed97 7a07 	vldr	s14, [r7, #28]
 800428a:	edd7 7a04 	vldr	s15, [r7, #16]
 800428e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004292:	ed97 7a00 	vldr	s14, [r7]
 8004296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	dd3f      	ble.n	8004320 <calc_double_s_value+0x678>
 80042a0:	ed97 7a00 	vldr	s14, [r7]
 80042a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80042a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	d836      	bhi.n	8004320 <calc_double_s_value+0x678>
    {
    	return h - (j_max * (pow(T - t, 3) / 6.0));
 80042b2:	69b8      	ldr	r0, [r7, #24]
 80042b4:	f7fc f90c 	bl	80004d0 <__aeabi_f2d>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fc f907 	bl	80004d0 <__aeabi_f2d>
 80042c2:	4680      	mov	r8, r0
 80042c4:	4689      	mov	r9, r1
 80042c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80042ca:	edd7 7a00 	vldr	s15, [r7]
 80042ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d2:	ee17 0a90 	vmov	r0, s15
 80042d6:	f7fc f8fb 	bl	80004d0 <__aeabi_f2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8004338 <calc_double_s_value+0x690>
 80042e2:	ec43 2b10 	vmov	d0, r2, r3
 80042e6:	f004 fd47 	bl	8008d78 <pow>
 80042ea:	ec51 0b10 	vmov	r0, r1, d0
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <calc_double_s_value+0x6a0>)
 80042f4:	f7fc fa6e 	bl	80007d4 <__aeabi_ddiv>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc f93e 	bl	8000580 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fb ff80 	bl	8000210 <__aeabi_dsub>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f7fc fc2a 	bl	8000b70 <__aeabi_d2f>
 800431c:	4603      	mov	r3, r0
 800431e:	e000      	b.n	8004322 <calc_double_s_value+0x67a>
    }
    else
    {
    	return 999;
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <calc_double_s_value+0x6a8>)
    }
}
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eeb0 0a67 	vmov.f32	s0, s15
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004332:	bf00      	nop
 8004334:	f3af 8000 	nop.w
 8004338:	00000000 	.word	0x00000000
 800433c:	40080000 	.word	0x40080000
 8004340:	00000000 	.word	0x00000000
 8004344:	40000000 	.word	0x40000000
 8004348:	40180000 	.word	0x40180000
 800434c:	40080000 	.word	0x40080000
 8004350:	4479c000 	.word	0x4479c000

08004354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_MspInit+0x4c>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	4a0f      	ldr	r2, [pc, #60]	@ (80043a0 <HAL_MspInit+0x4c>)
 8004364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004368:	6453      	str	r3, [r2, #68]	@ 0x44
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <HAL_MspInit+0x4c>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_MspInit+0x4c>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	4a08      	ldr	r2, [pc, #32]	@ (80043a0 <HAL_MspInit+0x4c>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	@ 0x40
 8004386:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <HAL_MspInit+0x4c>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004392:	2007      	movs	r0, #7
 8004394:	f001 f922 	bl	80055dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800

080043a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <NMI_Handler+0x4>

080043ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043b0:	bf00      	nop
 80043b2:	e7fd      	b.n	80043b0 <HardFault_Handler+0x4>

080043b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <MemManage_Handler+0x4>

080043bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <BusFault_Handler+0x4>

080043c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <UsageFault_Handler+0x4>

080043cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043fa:	f000 fbb9 	bl	8004b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004408:	4802      	ldr	r0, [pc, #8]	@ (8004414 <DMA2_Stream0_IRQHandler+0x10>)
 800440a:	f001 fa2f 	bl	800586c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200000dc 	.word	0x200000dc

08004418 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e00a      	b.n	8004440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800442a:	f3af 8000 	nop.w
 800442e:	4601      	mov	r1, r0
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	60ba      	str	r2, [r7, #8]
 8004436:	b2ca      	uxtb	r2, r1
 8004438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	dbf0      	blt.n	800442a <_read+0x12>
  }

  return len;
 8004448:	687b      	ldr	r3, [r7, #4]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e009      	b.n	8004478 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	60ba      	str	r2, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3301      	adds	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	dbf1      	blt.n	8004464 <_write+0x12>
  }
  return len;
 8004480:	687b      	ldr	r3, [r7, #4]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_close>:

int _close(int file)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044b2:	605a      	str	r2, [r3, #4]
  return 0;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <_isatty>:

int _isatty(int file)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044fc:	4a14      	ldr	r2, [pc, #80]	@ (8004550 <_sbrk+0x5c>)
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <_sbrk+0x60>)
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004508:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <_sbrk+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004510:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <_sbrk+0x64>)
 8004512:	4a12      	ldr	r2, [pc, #72]	@ (800455c <_sbrk+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004524:	f004 fa4a 	bl	80089bc <__errno>
 8004528:	4603      	mov	r3, r0
 800452a:	220c      	movs	r2, #12
 800452c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e009      	b.n	8004548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004534:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <_sbrk+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800453a:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	4a05      	ldr	r2, [pc, #20]	@ (8004558 <_sbrk+0x64>)
 8004544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20020000 	.word	0x20020000
 8004554:	00000400 	.word	0x00000400
 8004558:	20000290 	.word	0x20000290
 800455c:	20000508 	.word	0x20000508

08004560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <SystemInit+0x20>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	4a05      	ldr	r2, [pc, #20]	@ (8004580 <SystemInit+0x20>)
 800456c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	@ 0x38
 8004588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800458a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
 80045b0:	615a      	str	r2, [r3, #20]
 80045b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045b4:	4b45      	ldr	r3, [pc, #276]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045b6:	4a46      	ldr	r2, [pc, #280]	@ (80046d0 <MX_TIM3_Init+0x14c>)
 80045b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 270-1;
 80045ba:	4b44      	ldr	r3, [pc, #272]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80045c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b42      	ldr	r3, [pc, #264]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80045c8:	4b40      	ldr	r3, [pc, #256]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d0:	4b3e      	ldr	r3, [pc, #248]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045d6:	4b3d      	ldr	r3, [pc, #244]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045d8:	2280      	movs	r2, #128	@ 0x80
 80045da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045dc:	483b      	ldr	r0, [pc, #236]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045de:	f002 fbad 	bl	8006d3c <HAL_TIM_Base_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80045e8:	f7fd f9f8 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045f6:	4619      	mov	r1, r3
 80045f8:	4834      	ldr	r0, [pc, #208]	@ (80046cc <MX_TIM3_Init+0x148>)
 80045fa:	f002 fdd1 	bl	80071a0 <HAL_TIM_ConfigClockSource>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004604:	f7fd f9ea 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004608:	4830      	ldr	r0, [pc, #192]	@ (80046cc <MX_TIM3_Init+0x148>)
 800460a:	f002 fbe6 	bl	8006dda <HAL_TIM_PWM_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004614:	f7fd f9e2 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004620:	f107 0320 	add.w	r3, r7, #32
 8004624:	4619      	mov	r1, r3
 8004626:	4829      	ldr	r0, [pc, #164]	@ (80046cc <MX_TIM3_Init+0x148>)
 8004628:	f003 f99e 	bl	8007968 <HAL_TIMEx_MasterConfigSynchronization>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004632:	f7fd f9d3 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004636:	2360      	movs	r3, #96	@ 0x60
 8004638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	2200      	movs	r2, #0
 800464a:	4619      	mov	r1, r3
 800464c:	481f      	ldr	r0, [pc, #124]	@ (80046cc <MX_TIM3_Init+0x148>)
 800464e:	f002 fce5 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004658:	f7fd f9c0 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	2204      	movs	r2, #4
 8004660:	4619      	mov	r1, r3
 8004662:	481a      	ldr	r0, [pc, #104]	@ (80046cc <MX_TIM3_Init+0x148>)
 8004664:	f002 fcda 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800466e:	f7fd f9b5 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2208      	movs	r2, #8
 8004676:	4619      	mov	r1, r3
 8004678:	4814      	ldr	r0, [pc, #80]	@ (80046cc <MX_TIM3_Init+0x148>)
 800467a:	f002 fccf 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004684:	f7fd f9aa 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	220c      	movs	r2, #12
 800468c:	4619      	mov	r1, r3
 800468e:	480f      	ldr	r0, [pc, #60]	@ (80046cc <MX_TIM3_Init+0x148>)
 8004690:	f002 fcc4 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800469a:	f7fd f99f 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800469e:	2100      	movs	r1, #0
 80046a0:	480a      	ldr	r0, [pc, #40]	@ (80046cc <MX_TIM3_Init+0x148>)
 80046a2:	f002 fbf3 	bl	8006e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80046a6:	2104      	movs	r1, #4
 80046a8:	4808      	ldr	r0, [pc, #32]	@ (80046cc <MX_TIM3_Init+0x148>)
 80046aa:	f002 fbef 	bl	8006e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80046ae:	2108      	movs	r1, #8
 80046b0:	4806      	ldr	r0, [pc, #24]	@ (80046cc <MX_TIM3_Init+0x148>)
 80046b2:	f002 fbeb 	bl	8006e8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80046b6:	210c      	movs	r1, #12
 80046b8:	4804      	ldr	r0, [pc, #16]	@ (80046cc <MX_TIM3_Init+0x148>)
 80046ba:	f002 fbe7 	bl	8006e8c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046be:	4803      	ldr	r0, [pc, #12]	@ (80046cc <MX_TIM3_Init+0x148>)
 80046c0:	f000 f88e 	bl	80047e0 <HAL_TIM_MspPostInit>

}
 80046c4:	bf00      	nop
 80046c6:	3738      	adds	r7, #56	@ 0x38
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000294 	.word	0x20000294
 80046d0:	40000400 	.word	0x40000400

080046d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e8:	463b      	mov	r3, r7
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <MX_TIM4_Init+0x94>)
 80046f2:	4a1e      	ldr	r2, [pc, #120]	@ (800476c <MX_TIM4_Init+0x98>)
 80046f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 270-1;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <MX_TIM4_Init+0x94>)
 80046f8:	f240 120d 	movw	r2, #269	@ 0x10d
 80046fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <MX_TIM4_Init+0x94>)
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004704:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <MX_TIM4_Init+0x94>)
 8004706:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800470a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800470c:	4b16      	ldr	r3, [pc, #88]	@ (8004768 <MX_TIM4_Init+0x94>)
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <MX_TIM4_Init+0x94>)
 8004714:	2280      	movs	r2, #128	@ 0x80
 8004716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004718:	4813      	ldr	r0, [pc, #76]	@ (8004768 <MX_TIM4_Init+0x94>)
 800471a:	f002 fb0f 	bl	8006d3c <HAL_TIM_Base_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004724:	f7fd f95a 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800472c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	480c      	ldr	r0, [pc, #48]	@ (8004768 <MX_TIM4_Init+0x94>)
 8004736:	f002 fd33 	bl	80071a0 <HAL_TIM_ConfigClockSource>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004740:	f7fd f94c 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800474c:	463b      	mov	r3, r7
 800474e:	4619      	mov	r1, r3
 8004750:	4805      	ldr	r0, [pc, #20]	@ (8004768 <MX_TIM4_Init+0x94>)
 8004752:	f003 f909 	bl	8007968 <HAL_TIMEx_MasterConfigSynchronization>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800475c:	f7fd f93e 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200002dc 	.word	0x200002dc
 800476c:	40000800 	.word	0x40000800

08004770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a15      	ldr	r2, [pc, #84]	@ (80047d4 <HAL_TIM_Base_MspInit+0x64>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10e      	bne.n	80047a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	6413      	str	r3, [r2, #64]	@ 0x40
 8004792:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800479e:	e012      	b.n	80047c6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0d      	ldr	r2, [pc, #52]	@ (80047dc <HAL_TIM_Base_MspInit+0x6c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10d      	bne.n	80047c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <HAL_TIM_Base_MspInit+0x68>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40000800 	.word	0x40000800

080047e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	@ 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a30      	ldr	r2, [pc, #192]	@ (80048c0 <HAL_TIM_MspPostInit+0xe0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d15a      	bne.n	80048b8 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	4b2f      	ldr	r3, [pc, #188]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a2e      	ldr	r2, [pc, #184]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b2c      	ldr	r3, [pc, #176]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	6313      	str	r3, [r2, #48]	@ 0x30
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	6313      	str	r3, [r2, #48]	@ 0x30
 800484a:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <HAL_TIM_MspPostInit+0xe4>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004856:	2340      	movs	r3, #64	@ 0x40
 8004858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004866:	2302      	movs	r3, #2
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	4619      	mov	r1, r3
 8004870:	4815      	ldr	r0, [pc, #84]	@ (80048c8 <HAL_TIM_MspPostInit+0xe8>)
 8004872:	f001 fa65 	bl	8005d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004876:	2302      	movs	r3, #2
 8004878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487a:	2302      	movs	r3, #2
 800487c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004886:	2302      	movs	r3, #2
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4619      	mov	r1, r3
 8004890:	480e      	ldr	r0, [pc, #56]	@ (80048cc <HAL_TIM_MspPostInit+0xec>)
 8004892:	f001 fa55 	bl	8005d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004896:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800489a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489c:	2302      	movs	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a4:	2300      	movs	r3, #0
 80048a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048a8:	2302      	movs	r3, #2
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	4619      	mov	r1, r3
 80048b2:	4807      	ldr	r0, [pc, #28]	@ (80048d0 <HAL_TIM_MspPostInit+0xf0>)
 80048b4:	f001 fa44 	bl	8005d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048b8:	bf00      	nop
 80048ba:	3728      	adds	r7, #40	@ 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40020000 	.word	0x40020000
 80048cc:	40020400 	.word	0x40020400
 80048d0:	40020800 	.word	0x40020800

080048d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048da:	4a12      	ldr	r2, [pc, #72]	@ (8004924 <MX_USART2_UART_Init+0x50>)
 80048dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 80048fa:	220c      	movs	r2, #12
 80048fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048fe:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 8004906:	2200      	movs	r2, #0
 8004908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800490a:	4805      	ldr	r0, [pc, #20]	@ (8004920 <MX_USART2_UART_Init+0x4c>)
 800490c:	f003 f8a8 	bl	8007a60 <HAL_UART_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004916:	f7fd f861 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000324 	.word	0x20000324
 8004924:	40004400 	.word	0x40004400

08004928 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 800492e:	4a12      	ldr	r2, [pc, #72]	@ (8004978 <MX_USART3_UART_Init+0x50>)
 8004930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004932:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 8004934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800493a:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004940:	4b0c      	ldr	r3, [pc, #48]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 8004942:	2200      	movs	r2, #0
 8004944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 8004948:	2200      	movs	r2, #0
 800494a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 800494e:	220c      	movs	r2, #12
 8004950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004952:	4b08      	ldr	r3, [pc, #32]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800495e:	4805      	ldr	r0, [pc, #20]	@ (8004974 <MX_USART3_UART_Init+0x4c>)
 8004960:	f003 f87e 	bl	8007a60 <HAL_UART_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800496a:	f7fd f837 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2000036c 	.word	0x2000036c
 8004978:	40004800 	.word	0x40004800

0800497c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	@ 0x30
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a32      	ldr	r2, [pc, #200]	@ (8004a64 <HAL_UART_MspInit+0xe8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d12c      	bne.n	80049f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	4b2a      	ldr	r3, [pc, #168]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	4a29      	ldr	r2, [pc, #164]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ca:	4b27      	ldr	r3, [pc, #156]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049d6:	230c      	movs	r3, #12
 80049d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e2:	2303      	movs	r3, #3
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049e6:	2307      	movs	r3, #7
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ea:	f107 031c 	add.w	r3, r7, #28
 80049ee:	4619      	mov	r1, r3
 80049f0:	481e      	ldr	r0, [pc, #120]	@ (8004a6c <HAL_UART_MspInit+0xf0>)
 80049f2:	f001 f9a5 	bl	8005d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80049f6:	e031      	b.n	8004a5c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <HAL_UART_MspInit+0xf4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d12c      	bne.n	8004a5c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	4b18      	ldr	r3, [pc, #96]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a12:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a28:	f043 0304 	orr.w	r3, r3, #4
 8004a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <HAL_UART_MspInit+0xec>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a40:	2302      	movs	r3, #2
 8004a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a4c:	2307      	movs	r3, #7
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a50:	f107 031c 	add.w	r3, r7, #28
 8004a54:	4619      	mov	r1, r3
 8004a56:	4807      	ldr	r0, [pc, #28]	@ (8004a74 <HAL_UART_MspInit+0xf8>)
 8004a58:	f001 f972 	bl	8005d40 <HAL_GPIO_Init>
}
 8004a5c:	bf00      	nop
 8004a5e:	3730      	adds	r7, #48	@ 0x30
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40004400 	.word	0x40004400
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020000 	.word	0x40020000
 8004a70:	40004800 	.word	0x40004800
 8004a74:	40020800 	.word	0x40020800

08004a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ab0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004a7c:	f7ff fd70 	bl	8004560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a80:	480c      	ldr	r0, [pc, #48]	@ (8004ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a82:	490d      	ldr	r1, [pc, #52]	@ (8004ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a84:	4a0d      	ldr	r2, [pc, #52]	@ (8004abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a88:	e002      	b.n	8004a90 <LoopCopyDataInit>

08004a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8e:	3304      	adds	r3, #4

08004a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a94:	d3f9      	bcc.n	8004a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a98:	4c0a      	ldr	r4, [pc, #40]	@ (8004ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a9c:	e001      	b.n	8004aa2 <LoopFillZerobss>

08004a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa0:	3204      	adds	r2, #4

08004aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa4:	d3fb      	bcc.n	8004a9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004aa6:	f003 ff8f 	bl	80089c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aaa:	f7fc ff0b 	bl	80018c4 <main>
  bx  lr    
 8004aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004abc:	0800b900 	.word	0x0800b900
  ldr r2, =_sbss
 8004ac0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004ac4:	20000504 	.word	0x20000504

08004ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac8:	e7fe      	b.n	8004ac8 <ADC_IRQHandler>
	...

08004acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <HAL_Init+0x40>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <HAL_Init+0x40>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_Init+0x40>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <HAL_Init+0x40>)
 8004ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae8:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <HAL_Init+0x40>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a07      	ldr	r2, [pc, #28]	@ (8004b0c <HAL_Init+0x40>)
 8004aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af4:	2003      	movs	r0, #3
 8004af6:	f000 fd71 	bl	80055dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f808 	bl	8004b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b00:	f7ff fc28 	bl	8004354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00

08004b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b18:	4b12      	ldr	r3, [pc, #72]	@ (8004b64 <HAL_InitTick+0x54>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <HAL_InitTick+0x58>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fd89 	bl	8005646 <HAL_SYSTICK_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00e      	b.n	8004b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d80a      	bhi.n	8004b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b44:	2200      	movs	r2, #0
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	f000 fd51 	bl	80055f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b50:	4a06      	ldr	r2, [pc, #24]	@ (8004b6c <HAL_InitTick+0x5c>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000000 	.word	0x20000000
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	20000004 	.word	0x20000004

08004b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <HAL_IncTick+0x20>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_IncTick+0x24>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a04      	ldr	r2, [pc, #16]	@ (8004b94 <HAL_IncTick+0x24>)
 8004b82:	6013      	str	r3, [r2, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000008 	.word	0x20000008
 8004b94:	200003b4 	.word	0x200003b4

08004b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <HAL_GetTick+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200003b4 	.word	0x200003b4

08004bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff ffee 	bl	8004b98 <HAL_GetTick>
 8004bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d005      	beq.n	8004bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bca:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <HAL_Delay+0x44>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bd6:	bf00      	nop
 8004bd8:	f7ff ffde 	bl	8004b98 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d8f7      	bhi.n	8004bd8 <HAL_Delay+0x28>
  {
  }
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000008 	.word	0x20000008

08004bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e033      	b.n	8004c76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc f9d2 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c3e:	f023 0302 	bic.w	r3, r3, #2
 8004c42:	f043 0202 	orr.w	r2, r3, #2
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa78 	bl	8005140 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c66:	e001      	b.n	8004c6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_ADC_Start_DMA+0x1e>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0e9      	b.n	8004e72 <HAL_ADC_Start_DMA+0x1f2>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d018      	beq.n	8004ce6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8004e7c <HAL_ADC_Start_DMA+0x1fc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8004e80 <HAL_ADC_Start_DMA+0x200>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0c9a      	lsrs	r2, r3, #18
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004cd8:	e002      	b.n	8004ce0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f9      	bne.n	8004cda <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf4:	d107      	bne.n	8004d06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	f040 80a1 	bne.w	8004e58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d54:	d106      	bne.n	8004d64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f023 0206 	bic.w	r2, r3, #6
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d62:	e002      	b.n	8004d6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d72:	4b44      	ldr	r3, [pc, #272]	@ (8004e84 <HAL_ADC_Start_DMA+0x204>)
 8004d74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	4a43      	ldr	r2, [pc, #268]	@ (8004e88 <HAL_ADC_Start_DMA+0x208>)
 8004d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	4a42      	ldr	r2, [pc, #264]	@ (8004e8c <HAL_ADC_Start_DMA+0x20c>)
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	4a41      	ldr	r2, [pc, #260]	@ (8004e90 <HAL_ADC_Start_DMA+0x210>)
 8004d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004da6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	334c      	adds	r3, #76	@ 0x4c
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f000 fcf8 	bl	80057bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d12a      	bne.n	8004e2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <HAL_ADC_Start_DMA+0x214>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d015      	beq.n	8004e0e <HAL_ADC_Start_DMA+0x18e>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <HAL_ADC_Start_DMA+0x218>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d105      	bne.n	8004df8 <HAL_ADC_Start_DMA+0x178>
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <HAL_ADC_Start_DMA+0x204>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <HAL_ADC_Start_DMA+0x21c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d136      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_ADC_Start_DMA+0x204>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d130      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d129      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e020      	b.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a18      	ldr	r2, [pc, #96]	@ (8004e94 <HAL_ADC_Start_DMA+0x214>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d11b      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d114      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	e00b      	b.n	8004e70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	f043 0210 	orr.w	r2, r3, #16
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e68:	f043 0201 	orr.w	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	431bde83 	.word	0x431bde83
 8004e84:	40012300 	.word	0x40012300
 8004e88:	08005339 	.word	0x08005339
 8004e8c:	080053f3 	.word	0x080053f3
 8004e90:	0800540f 	.word	0x0800540f
 8004e94:	40012000 	.word	0x40012000
 8004e98:	40012100 	.word	0x40012100
 8004e9c:	40012200 	.word	0x40012200

08004ea0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e113      	b.n	8005120 <HAL_ADC_ConfigChannel+0x244>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d925      	bls.n	8004f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b1e      	subs	r3, #30
 8004f1e:	2207      	movs	r2, #7
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43da      	mvns	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68d9      	ldr	r1, [r3, #12]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4403      	add	r3, r0
 8004f46:	3b1e      	subs	r3, #30
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e022      	b.n	8004f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6919      	ldr	r1, [r3, #16]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	2207      	movs	r2, #7
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	400a      	ands	r2, r1
 8004f76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4618      	mov	r0, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4403      	add	r3, r0
 8004f90:	409a      	lsls	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d824      	bhi.n	8004fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b05      	subs	r3, #5
 8004fb4:	221f      	movs	r2, #31
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b05      	subs	r3, #5
 8004fde:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fea:	e04c      	b.n	8005086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d824      	bhi.n	800503e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	3b23      	subs	r3, #35	@ 0x23
 8005006:	221f      	movs	r2, #31
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43da      	mvns	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	400a      	ands	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	4618      	mov	r0, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	3b23      	subs	r3, #35	@ 0x23
 8005030:	fa00 f203 	lsl.w	r2, r0, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
 800503c:	e023      	b.n	8005086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b41      	subs	r3, #65	@ 0x41
 8005050:	221f      	movs	r2, #31
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	400a      	ands	r2, r1
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4618      	mov	r0, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	3b41      	subs	r3, #65	@ 0x41
 800507a:	fa00 f203 	lsl.w	r2, r0, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005086:	4b29      	ldr	r3, [pc, #164]	@ (800512c <HAL_ADC_ConfigChannel+0x250>)
 8005088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a28      	ldr	r2, [pc, #160]	@ (8005130 <HAL_ADC_ConfigChannel+0x254>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10f      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x1d8>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b12      	cmp	r3, #18
 800509a:	d10b      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <HAL_ADC_ConfigChannel+0x254>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d12b      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <HAL_ADC_ConfigChannel+0x258>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x1f4>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b11      	cmp	r3, #17
 80050ce:	d122      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HAL_ADC_ConfigChannel+0x258>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050f2:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <HAL_ADC_ConfigChannel+0x25c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a11      	ldr	r2, [pc, #68]	@ (800513c <HAL_ADC_ConfigChannel+0x260>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	0c9a      	lsrs	r2, r3, #18
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005108:	e002      	b.n	8005110 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3b01      	subs	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f9      	bne.n	800510a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40012300 	.word	0x40012300
 8005130:	40012000 	.word	0x40012000
 8005134:	10000012 	.word	0x10000012
 8005138:	20000000 	.word	0x20000000
 800513c:	431bde83 	.word	0x431bde83

08005140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005148:	4b79      	ldr	r3, [pc, #484]	@ (8005330 <ADC_Init+0x1f0>)
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	021a      	lsls	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	4a58      	ldr	r2, [pc, #352]	@ (8005334 <ADC_Init+0x1f4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6899      	ldr	r1, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	e00f      	b.n	800523e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800522c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800523c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0202 	bic.w	r2, r2, #2
 800524c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7e1b      	ldrb	r3, [r3, #24]
 8005258:	005a      	lsls	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800528a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	3b01      	subs	r3, #1
 8005298:	035a      	lsls	r2, r3, #13
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	e007      	b.n	80052b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	051a      	lsls	r2, r3, #20
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6899      	ldr	r1, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052f6:	025a      	lsls	r2, r3, #9
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6899      	ldr	r1, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	029a      	lsls	r2, r3, #10
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012300 	.word	0x40012300
 8005334:	0f000001 	.word	0x0f000001

08005338 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d13c      	bne.n	80053cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d12b      	bne.n	80053c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005370:	2b00      	cmp	r3, #0
 8005372:	d127      	bne.n	80053c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d119      	bne.n	80053c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0220 	bic.w	r2, r2, #32
 800539e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fd6b 	bl	8004ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053ca:	e00e      	b.n	80053ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fd75 	bl	8004ec8 <HAL_ADC_ErrorCallback>
}
 80053de:	e004      	b.n	80053ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fd57 	bl	8004eb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	@ 0x40
 8005420:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f043 0204 	orr.w	r2, r3, #4
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fd4a 	bl	8004ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <__NVIC_SetPriorityGrouping+0x44>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800546e:	4a04      	ldr	r2, [pc, #16]	@ (8005480 <__NVIC_SetPriorityGrouping+0x44>)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	60d3      	str	r3, [r2, #12]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005488:	4b04      	ldr	r3, [pc, #16]	@ (800549c <__NVIC_GetPriorityGrouping+0x18>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	f003 0307 	and.w	r3, r3, #7
}
 8005492:	4618      	mov	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db0b      	blt.n	80054ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	f003 021f 	and.w	r2, r3, #31
 80054b8:	4907      	ldr	r1, [pc, #28]	@ (80054d8 <__NVIC_EnableIRQ+0x38>)
 80054ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2001      	movs	r0, #1
 80054c2:	fa00 f202 	lsl.w	r2, r0, r2
 80054c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	e000e100 	.word	0xe000e100

080054dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	6039      	str	r1, [r7, #0]
 80054e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	db0a      	blt.n	8005506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	490c      	ldr	r1, [pc, #48]	@ (8005528 <__NVIC_SetPriority+0x4c>)
 80054f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fa:	0112      	lsls	r2, r2, #4
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	440b      	add	r3, r1
 8005500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005504:	e00a      	b.n	800551c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4908      	ldr	r1, [pc, #32]	@ (800552c <__NVIC_SetPriority+0x50>)
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	3b04      	subs	r3, #4
 8005514:	0112      	lsls	r2, r2, #4
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	440b      	add	r3, r1
 800551a:	761a      	strb	r2, [r3, #24]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	e000e100 	.word	0xe000e100
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005530:	b480      	push	{r7}
 8005532:	b089      	sub	sp, #36	@ 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f1c3 0307 	rsb	r3, r3, #7
 800554a:	2b04      	cmp	r3, #4
 800554c:	bf28      	it	cs
 800554e:	2304      	movcs	r3, #4
 8005550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3304      	adds	r3, #4
 8005556:	2b06      	cmp	r3, #6
 8005558:	d902      	bls.n	8005560 <NVIC_EncodePriority+0x30>
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3b03      	subs	r3, #3
 800555e:	e000      	b.n	8005562 <NVIC_EncodePriority+0x32>
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43da      	mvns	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	401a      	ands	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005578:	f04f 31ff 	mov.w	r1, #4294967295
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	43d9      	mvns	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005588:	4313      	orrs	r3, r2
         );
}
 800558a:	4618      	mov	r0, r3
 800558c:	3724      	adds	r7, #36	@ 0x24
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055a8:	d301      	bcc.n	80055ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00f      	b.n	80055ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ae:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <SysTick_Config+0x40>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055b6:	210f      	movs	r1, #15
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	f7ff ff8e 	bl	80054dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <SysTick_Config+0x40>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055c6:	4b04      	ldr	r3, [pc, #16]	@ (80055d8 <SysTick_Config+0x40>)
 80055c8:	2207      	movs	r2, #7
 80055ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	e000e010 	.word	0xe000e010

080055dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff29 	bl	800543c <__NVIC_SetPriorityGrouping>
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	4603      	mov	r3, r0
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005604:	f7ff ff3e 	bl	8005484 <__NVIC_GetPriorityGrouping>
 8005608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff ff8e 	bl	8005530 <NVIC_EncodePriority>
 8005614:	4602      	mov	r2, r0
 8005616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800561a:	4611      	mov	r1, r2
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff5d 	bl	80054dc <__NVIC_SetPriority>
}
 8005622:	bf00      	nop
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	4603      	mov	r3, r0
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff31 	bl	80054a0 <__NVIC_EnableIRQ>
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffa2 	bl	8005598 <SysTick_Config>
 8005654:	4603      	mov	r3, r0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7ff fa94 	bl	8004b98 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e099      	b.n	80057b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800569c:	e00f      	b.n	80056be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800569e:	f7ff fa7b 	bl	8004b98 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d908      	bls.n	80056be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2203      	movs	r2, #3
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e078      	b.n	80057b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e8      	bne.n	800569e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4b38      	ldr	r3, [pc, #224]	@ (80057b8 <HAL_DMA_Init+0x158>)
 80056d8:	4013      	ands	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	2b04      	cmp	r3, #4
 8005716:	d107      	bne.n	8005728 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	4313      	orrs	r3, r2
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	2b04      	cmp	r3, #4
 8005750:	d117      	bne.n	8005782 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa6f 	bl	8005c48 <DMA_CheckFifoParam>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2240      	movs	r2, #64	@ 0x40
 8005774:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800577e:	2301      	movs	r3, #1
 8005780:	e016      	b.n	80057b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa26 	bl	8005bdc <DMA_CalcBaseAndBitshift>
 8005790:	4603      	mov	r3, r0
 8005792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	223f      	movs	r2, #63	@ 0x3f
 800579a:	409a      	lsls	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	f010803f 	.word	0xf010803f

080057bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_DMA_Start_IT+0x26>
 80057de:	2302      	movs	r3, #2
 80057e0:	e040      	b.n	8005864 <HAL_DMA_Start_IT+0xa8>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12f      	bne.n	8005856 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f9b8 	bl	8005b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	223f      	movs	r2, #63	@ 0x3f
 8005816:	409a      	lsls	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0216 	orr.w	r2, r2, #22
 800582a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0208 	orr.w	r2, r2, #8
 8005842:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e005      	b.n	8005862 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800585e:	2302      	movs	r3, #2
 8005860:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005878:	4b8e      	ldr	r3, [pc, #568]	@ (8005ab4 <HAL_DMA_IRQHandler+0x248>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a8e      	ldr	r2, [pc, #568]	@ (8005ab8 <HAL_DMA_IRQHandler+0x24c>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0a9b      	lsrs	r3, r3, #10
 8005884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005896:	2208      	movs	r2, #8
 8005898:	409a      	lsls	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01a      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	2208      	movs	r2, #8
 80058c6:	409a      	lsls	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	2201      	movs	r2, #1
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fa:	2201      	movs	r2, #1
 80058fc:	409a      	lsls	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	f043 0202 	orr.w	r2, r3, #2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005912:	2204      	movs	r2, #4
 8005914:	409a      	lsls	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	2204      	movs	r2, #4
 8005932:	409a      	lsls	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593c:	f043 0204 	orr.w	r2, r3, #4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	2210      	movs	r2, #16
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d043      	beq.n	80059dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03c      	beq.n	80059dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005966:	2210      	movs	r2, #16
 8005968:	409a      	lsls	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d018      	beq.n	80059ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d024      	beq.n	80059dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
 800599a:	e01f      	b.n	80059dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
 80059ac:	e016      	b.n	80059dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0208 	bic.w	r2, r2, #8
 80059ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e0:	2220      	movs	r2, #32
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 808f 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8087 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	2220      	movs	r2, #32
 8005a04:	409a      	lsls	r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d136      	bne.n	8005a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0216 	bic.w	r2, r2, #22
 8005a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_DMA_IRQHandler+0x1da>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0208 	bic.w	r2, r2, #8
 8005a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5a:	223f      	movs	r2, #63	@ 0x3f
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d07e      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
        }
        return;
 8005a82:	e079      	b.n	8005b78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01d      	beq.n	8005ace <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d031      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
 8005ab0:	e02c      	b.n	8005b0c <HAL_DMA_IRQHandler+0x2a0>
 8005ab2:	bf00      	nop
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d023      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
 8005acc:	e01e      	b.n	8005b0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10f      	bne.n	8005afc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0210 	bic.w	r2, r2, #16
 8005aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d032      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2205      	movs	r2, #5
 8005b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d307      	bcc.n	8005b54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f2      	bne.n	8005b38 <HAL_DMA_IRQHandler+0x2cc>
 8005b52:	e000      	b.n	8005b56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
 8005b76:	e000      	b.n	8005b7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b78:	bf00      	nop
    }
  }
}
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b40      	cmp	r3, #64	@ 0x40
 8005bac:	d108      	bne.n	8005bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bbe:	e007      	b.n	8005bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	3b10      	subs	r3, #16
 8005bec:	4a14      	ldr	r2, [pc, #80]	@ (8005c40 <DMA_CalcBaseAndBitshift+0x64>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bf6:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <DMA_CalcBaseAndBitshift+0x68>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d909      	bls.n	8005c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	1d1a      	adds	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c1c:	e007      	b.n	8005c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	aaaaaaab 	.word	0xaaaaaaab
 8005c44:	0800b668 	.word	0x0800b668

08005c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d11f      	bne.n	8005ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d856      	bhi.n	8005d16 <DMA_CheckFifoParam+0xce>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <DMA_CheckFifoParam+0x28>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c93 	.word	0x08005c93
 8005c78:	08005c81 	.word	0x08005c81
 8005c7c:	08005d17 	.word	0x08005d17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d046      	beq.n	8005d1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c90:	e043      	b.n	8005d1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c9a:	d140      	bne.n	8005d1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca0:	e03d      	b.n	8005d1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005caa:	d121      	bne.n	8005cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d837      	bhi.n	8005d22 <DMA_CheckFifoParam+0xda>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <DMA_CheckFifoParam+0x70>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005ccf 	.word	0x08005ccf
 8005cc0:	08005cc9 	.word	0x08005cc9
 8005cc4:	08005ce1 	.word	0x08005ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	e030      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d025      	beq.n	8005d26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cde:	e022      	b.n	8005d26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ce8:	d11f      	bne.n	8005d2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cee:	e01c      	b.n	8005d2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d903      	bls.n	8005cfe <DMA_CheckFifoParam+0xb6>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d003      	beq.n	8005d04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cfc:	e018      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
      break;
 8005d02:	e015      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      break;
 8005d14:	e00b      	b.n	8005d2e <DMA_CheckFifoParam+0xe6>
      break;
 8005d16:	bf00      	nop
 8005d18:	e00a      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e008      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;
 8005d1e:	bf00      	nop
 8005d20:	e006      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;
 8005d22:	bf00      	nop
 8005d24:	e004      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <DMA_CheckFifoParam+0xe8>
      break;
 8005d2e:	bf00      	nop
    }
  } 
  
  return status; 
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop

08005d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	@ 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e165      	b.n	8006028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	f040 8154 	bne.w	8006022 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d005      	beq.n	8005d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d130      	bne.n	8005df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4013      	ands	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dc8:	2201      	movs	r2, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 0201 	and.w	r2, r3, #1
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d017      	beq.n	8005e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d123      	bne.n	8005e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	08da      	lsrs	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3208      	adds	r2, #8
 8005e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	220f      	movs	r2, #15
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	08da      	lsrs	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3208      	adds	r2, #8
 8005e7e:	69b9      	ldr	r1, [r7, #24]
 8005e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	2203      	movs	r2, #3
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0203 	and.w	r2, r3, #3
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80ae 	beq.w	8006022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	4b5d      	ldr	r3, [pc, #372]	@ (8006040 <HAL_GPIO_Init+0x300>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	4a5c      	ldr	r2, [pc, #368]	@ (8006040 <HAL_GPIO_Init+0x300>)
 8005ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8006040 <HAL_GPIO_Init+0x300>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ee2:	4a58      	ldr	r2, [pc, #352]	@ (8006044 <HAL_GPIO_Init+0x304>)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	220f      	movs	r2, #15
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a4f      	ldr	r2, [pc, #316]	@ (8006048 <HAL_GPIO_Init+0x308>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d025      	beq.n	8005f5a <HAL_GPIO_Init+0x21a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a4e      	ldr	r2, [pc, #312]	@ (800604c <HAL_GPIO_Init+0x30c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <HAL_GPIO_Init+0x216>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a4d      	ldr	r2, [pc, #308]	@ (8006050 <HAL_GPIO_Init+0x310>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d019      	beq.n	8005f52 <HAL_GPIO_Init+0x212>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a4c      	ldr	r2, [pc, #304]	@ (8006054 <HAL_GPIO_Init+0x314>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_GPIO_Init+0x20e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a4b      	ldr	r2, [pc, #300]	@ (8006058 <HAL_GPIO_Init+0x318>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <HAL_GPIO_Init+0x20a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a4a      	ldr	r2, [pc, #296]	@ (800605c <HAL_GPIO_Init+0x31c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <HAL_GPIO_Init+0x206>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a49      	ldr	r2, [pc, #292]	@ (8006060 <HAL_GPIO_Init+0x320>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <HAL_GPIO_Init+0x202>
 8005f3e:	2306      	movs	r3, #6
 8005f40:	e00c      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f42:	2307      	movs	r3, #7
 8005f44:	e00a      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f46:	2305      	movs	r3, #5
 8005f48:	e008      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	e006      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e004      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e002      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_GPIO_Init+0x21c>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	f002 0203 	and.w	r2, r2, #3
 8005f62:	0092      	lsls	r2, r2, #2
 8005f64:	4093      	lsls	r3, r2
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f6c:	4935      	ldr	r1, [pc, #212]	@ (8006044 <HAL_GPIO_Init+0x304>)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	089b      	lsrs	r3, r3, #2
 8005f72:	3302      	adds	r3, #2
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4013      	ands	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f9e:	4a31      	ldr	r2, [pc, #196]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fc8:	4a26      	ldr	r2, [pc, #152]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fce:	4b25      	ldr	r3, [pc, #148]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8006064 <HAL_GPIO_Init+0x324>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800601c:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <HAL_GPIO_Init+0x324>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b0f      	cmp	r3, #15
 800602c:	f67f ae96 	bls.w	8005d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	3724      	adds	r7, #36	@ 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	40013800 	.word	0x40013800
 8006048:	40020000 	.word	0x40020000
 800604c:	40020400 	.word	0x40020400
 8006050:	40020800 	.word	0x40020800
 8006054:	40020c00 	.word	0x40020c00
 8006058:	40021000 	.word	0x40021000
 800605c:	40021400 	.word	0x40021400
 8006060:	40021800 	.word	0x40021800
 8006064:	40013c00 	.word	0x40013c00

08006068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	887b      	ldrh	r3, [r7, #2]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e001      	b.n	800608a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
 80060a4:	4613      	mov	r3, r2
 80060a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060a8:	787b      	ldrb	r3, [r7, #1]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ae:	887a      	ldrh	r2, [r7, #2]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060b4:	e003      	b.n	80060be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	041a      	lsls	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	619a      	str	r2, [r3, #24]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	4b20      	ldr	r3, [pc, #128]	@ (800615c <HAL_PWREx_EnableOverDrive+0x90>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <HAL_PWREx_EnableOverDrive+0x90>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80060e6:	4b1d      	ldr	r3, [pc, #116]	@ (800615c <HAL_PWREx_EnableOverDrive+0x90>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <HAL_PWREx_EnableOverDrive+0x94>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f8:	f7fe fd4e 	bl	8004b98 <HAL_GetTick>
 80060fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060fe:	e009      	b.n	8006114 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006100:	f7fe fd4a 	bl	8004b98 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800610e:	d901      	bls.n	8006114 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e01f      	b.n	8006154 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006114:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <HAL_PWREx_EnableOverDrive+0x98>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006120:	d1ee      	bne.n	8006100 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006122:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006128:	f7fe fd36 	bl	8004b98 <HAL_GetTick>
 800612c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800612e:	e009      	b.n	8006144 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006130:	f7fe fd32 	bl	8004b98 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800613e:	d901      	bls.n	8006144 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e007      	b.n	8006154 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006144:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <HAL_PWREx_EnableOverDrive+0x98>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006150:	d1ee      	bne.n	8006130 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40023800 	.word	0x40023800
 8006160:	420e0040 	.word	0x420e0040
 8006164:	40007000 	.word	0x40007000
 8006168:	420e0044 	.word	0x420e0044

0800616c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0cc      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006180:	4b68      	ldr	r3, [pc, #416]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d90c      	bls.n	80061a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b65      	ldr	r3, [pc, #404]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006196:	4b63      	ldr	r3, [pc, #396]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0b8      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c0:	4b59      	ldr	r3, [pc, #356]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a58      	ldr	r2, [pc, #352]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d8:	4b53      	ldr	r3, [pc, #332]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a52      	ldr	r2, [pc, #328]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e4:	4b50      	ldr	r3, [pc, #320]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	494d      	ldr	r1, [pc, #308]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d044      	beq.n	800628c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620a:	4b47      	ldr	r3, [pc, #284]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d119      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e07f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d003      	beq.n	800622a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006226:	2b03      	cmp	r3, #3
 8006228:	d107      	bne.n	800623a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622a:	4b3f      	ldr	r3, [pc, #252]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e06f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623a:	4b3b      	ldr	r3, [pc, #236]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e067      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800624a:	4b37      	ldr	r3, [pc, #220]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 0203 	bic.w	r2, r3, #3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4934      	ldr	r1, [pc, #208]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800625c:	f7fe fc9c 	bl	8004b98 <HAL_GetTick>
 8006260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	e00a      	b.n	800627a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006264:	f7fe fc98 	bl	8004b98 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e04f      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	4b2b      	ldr	r3, [pc, #172]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 020c 	and.w	r2, r3, #12
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	429a      	cmp	r2, r3
 800628a:	d1eb      	bne.n	8006264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800628c:	4b25      	ldr	r3, [pc, #148]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d20c      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a2:	4b20      	ldr	r3, [pc, #128]	@ (8006324 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e032      	b.n	800631a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c0:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4916      	ldr	r1, [pc, #88]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062de:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	490e      	ldr	r1, [pc, #56]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062f2:	f000 f855 	bl	80063a0 <HAL_RCC_GetSysClockFreq>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	490a      	ldr	r1, [pc, #40]	@ (800632c <HAL_RCC_ClockConfig+0x1c0>)
 8006304:	5ccb      	ldrb	r3, [r1, r3]
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	4a09      	ldr	r2, [pc, #36]	@ (8006330 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800630e:	4b09      	ldr	r3, [pc, #36]	@ (8006334 <HAL_RCC_ClockConfig+0x1c8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fbfc 	bl	8004b10 <HAL_InitTick>

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40023c00 	.word	0x40023c00
 8006328:	40023800 	.word	0x40023800
 800632c:	0800b650 	.word	0x0800b650
 8006330:	20000000 	.word	0x20000000
 8006334:	20000004 	.word	0x20000004

08006338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800633c:	4b03      	ldr	r3, [pc, #12]	@ (800634c <HAL_RCC_GetHCLKFreq+0x14>)
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000000 	.word	0x20000000

08006350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006354:	f7ff fff0 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0a9b      	lsrs	r3, r3, #10
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4903      	ldr	r1, [pc, #12]	@ (8006374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40023800 	.word	0x40023800
 8006374:	0800b660 	.word	0x0800b660

08006378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800637c:	f7ff ffdc 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006380:	4602      	mov	r2, r0
 8006382:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	0b5b      	lsrs	r3, r3, #13
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	4903      	ldr	r1, [pc, #12]	@ (800639c <HAL_RCC_GetPCLK2Freq+0x24>)
 800638e:	5ccb      	ldrb	r3, [r1, r3]
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40023800 	.word	0x40023800
 800639c:	0800b660 	.word	0x0800b660

080063a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a4:	b0ae      	sub	sp, #184	@ 0xb8
 80063a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c6:	4bcb      	ldr	r3, [pc, #812]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	f200 8206 	bhi.w	80067e0 <HAL_RCC_GetSysClockFreq+0x440>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006411 	.word	0x08006411
 80063e0:	080067e1 	.word	0x080067e1
 80063e4:	080067e1 	.word	0x080067e1
 80063e8:	080067e1 	.word	0x080067e1
 80063ec:	08006419 	.word	0x08006419
 80063f0:	080067e1 	.word	0x080067e1
 80063f4:	080067e1 	.word	0x080067e1
 80063f8:	080067e1 	.word	0x080067e1
 80063fc:	08006421 	.word	0x08006421
 8006400:	080067e1 	.word	0x080067e1
 8006404:	080067e1 	.word	0x080067e1
 8006408:	080067e1 	.word	0x080067e1
 800640c:	08006611 	.word	0x08006611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006410:	4bb9      	ldr	r3, [pc, #740]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006416:	e1e7      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006418:	4bb8      	ldr	r3, [pc, #736]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800641a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800641e:	e1e3      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006420:	4bb4      	ldr	r3, [pc, #720]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800642c:	4bb1      	ldr	r3, [pc, #708]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d071      	beq.n	800651c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006438:	4bae      	ldr	r3, [pc, #696]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	099b      	lsrs	r3, r3, #6
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800645a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800645e:	4622      	mov	r2, r4
 8006460:	462b      	mov	r3, r5
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f04f 0100 	mov.w	r1, #0
 800646a:	0159      	lsls	r1, r3, #5
 800646c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006470:	0150      	lsls	r0, r2, #5
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4621      	mov	r1, r4
 8006478:	1a51      	subs	r1, r2, r1
 800647a:	6439      	str	r1, [r7, #64]	@ 0x40
 800647c:	4629      	mov	r1, r5
 800647e:	eb63 0301 	sbc.w	r3, r3, r1
 8006482:	647b      	str	r3, [r7, #68]	@ 0x44
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006490:	4649      	mov	r1, r9
 8006492:	018b      	lsls	r3, r1, #6
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800649a:	4641      	mov	r1, r8
 800649c:	018a      	lsls	r2, r1, #6
 800649e:	4641      	mov	r1, r8
 80064a0:	1a51      	subs	r1, r2, r1
 80064a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064a4:	4649      	mov	r1, r9
 80064a6:	eb63 0301 	sbc.w	r3, r3, r1
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80064b8:	4649      	mov	r1, r9
 80064ba:	00cb      	lsls	r3, r1, #3
 80064bc:	4641      	mov	r1, r8
 80064be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c2:	4641      	mov	r1, r8
 80064c4:	00ca      	lsls	r2, r1, #3
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	4622      	mov	r2, r4
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d2:	462b      	mov	r3, r5
 80064d4:	460a      	mov	r2, r1
 80064d6:	eb42 0303 	adc.w	r3, r2, r3
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80064e8:	4629      	mov	r1, r5
 80064ea:	024b      	lsls	r3, r1, #9
 80064ec:	4621      	mov	r1, r4
 80064ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064f2:	4621      	mov	r1, r4
 80064f4:	024a      	lsls	r2, r1, #9
 80064f6:	4610      	mov	r0, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800650c:	f7fa fb80 	bl	8000c10 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4613      	mov	r3, r2
 8006516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800651a:	e067      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651c:	4b75      	ldr	r3, [pc, #468]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	099b      	lsrs	r3, r3, #6
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800652c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006536:	2300      	movs	r3, #0
 8006538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800653a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f04f 0100 	mov.w	r1, #0
 800654a:	0159      	lsls	r1, r3, #5
 800654c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006550:	0150      	lsls	r0, r2, #5
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4621      	mov	r1, r4
 8006558:	1a51      	subs	r1, r2, r1
 800655a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800655c:	4629      	mov	r1, r5
 800655e:	eb63 0301 	sbc.w	r3, r3, r1
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006570:	4649      	mov	r1, r9
 8006572:	018b      	lsls	r3, r1, #6
 8006574:	4641      	mov	r1, r8
 8006576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800657a:	4641      	mov	r1, r8
 800657c:	018a      	lsls	r2, r1, #6
 800657e:	4641      	mov	r1, r8
 8006580:	ebb2 0a01 	subs.w	sl, r2, r1
 8006584:	4649      	mov	r1, r9
 8006586:	eb63 0b01 	sbc.w	fp, r3, r1
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800659a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800659e:	4692      	mov	sl, r2
 80065a0:	469b      	mov	fp, r3
 80065a2:	4623      	mov	r3, r4
 80065a4:	eb1a 0303 	adds.w	r3, sl, r3
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	462b      	mov	r3, r5
 80065ac:	eb4b 0303 	adc.w	r3, fp, r3
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80065be:	4629      	mov	r1, r5
 80065c0:	028b      	lsls	r3, r1, #10
 80065c2:	4621      	mov	r1, r4
 80065c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065c8:	4621      	mov	r1, r4
 80065ca:	028a      	lsls	r2, r1, #10
 80065cc:	4610      	mov	r0, r2
 80065ce:	4619      	mov	r1, r3
 80065d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065d4:	2200      	movs	r2, #0
 80065d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80065d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80065da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80065de:	f7fa fb17 	bl	8000c10 <__aeabi_uldivmod>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4613      	mov	r3, r2
 80065e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065ec:	4b41      	ldr	r3, [pc, #260]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	3301      	adds	r3, #1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80065fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006606:	fbb2 f3f3 	udiv	r3, r2, r3
 800660a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800660e:	e0eb      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006610:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800661c:	4b35      	ldr	r3, [pc, #212]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d06b      	beq.n	8006700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006628:	4b32      	ldr	r3, [pc, #200]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	2200      	movs	r2, #0
 8006630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	663b      	str	r3, [r7, #96]	@ 0x60
 800663c:	2300      	movs	r3, #0
 800663e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006644:	4622      	mov	r2, r4
 8006646:	462b      	mov	r3, r5
 8006648:	f04f 0000 	mov.w	r0, #0
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	0159      	lsls	r1, r3, #5
 8006652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006656:	0150      	lsls	r0, r2, #5
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4621      	mov	r1, r4
 800665e:	1a51      	subs	r1, r2, r1
 8006660:	61b9      	str	r1, [r7, #24]
 8006662:	4629      	mov	r1, r5
 8006664:	eb63 0301 	sbc.w	r3, r3, r1
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006676:	4659      	mov	r1, fp
 8006678:	018b      	lsls	r3, r1, #6
 800667a:	4651      	mov	r1, sl
 800667c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006680:	4651      	mov	r1, sl
 8006682:	018a      	lsls	r2, r1, #6
 8006684:	4651      	mov	r1, sl
 8006686:	ebb2 0801 	subs.w	r8, r2, r1
 800668a:	4659      	mov	r1, fp
 800668c:	eb63 0901 	sbc.w	r9, r3, r1
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800669c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066a4:	4690      	mov	r8, r2
 80066a6:	4699      	mov	r9, r3
 80066a8:	4623      	mov	r3, r4
 80066aa:	eb18 0303 	adds.w	r3, r8, r3
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	462b      	mov	r3, r5
 80066b2:	eb49 0303 	adc.w	r3, r9, r3
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80066c4:	4629      	mov	r1, r5
 80066c6:	024b      	lsls	r3, r1, #9
 80066c8:	4621      	mov	r1, r4
 80066ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066ce:	4621      	mov	r1, r4
 80066d0:	024a      	lsls	r2, r1, #9
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066da:	2200      	movs	r2, #0
 80066dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80066e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066e4:	f7fa fa94 	bl	8000c10 <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4613      	mov	r3, r2
 80066ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f2:	e065      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x420>
 80066f4:	40023800 	.word	0x40023800
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006700:	4b3d      	ldr	r3, [pc, #244]	@ (80067f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	2200      	movs	r2, #0
 8006708:	4618      	mov	r0, r3
 800670a:	4611      	mov	r1, r2
 800670c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006710:	653b      	str	r3, [r7, #80]	@ 0x50
 8006712:	2300      	movs	r3, #0
 8006714:	657b      	str	r3, [r7, #84]	@ 0x54
 8006716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800671a:	4642      	mov	r2, r8
 800671c:	464b      	mov	r3, r9
 800671e:	f04f 0000 	mov.w	r0, #0
 8006722:	f04f 0100 	mov.w	r1, #0
 8006726:	0159      	lsls	r1, r3, #5
 8006728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800672c:	0150      	lsls	r0, r2, #5
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4641      	mov	r1, r8
 8006734:	1a51      	subs	r1, r2, r1
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4649      	mov	r1, r9
 800673a:	eb63 0301 	sbc.w	r3, r3, r1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800674c:	4659      	mov	r1, fp
 800674e:	018b      	lsls	r3, r1, #6
 8006750:	4651      	mov	r1, sl
 8006752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006756:	4651      	mov	r1, sl
 8006758:	018a      	lsls	r2, r1, #6
 800675a:	4651      	mov	r1, sl
 800675c:	1a54      	subs	r4, r2, r1
 800675e:	4659      	mov	r1, fp
 8006760:	eb63 0501 	sbc.w	r5, r3, r1
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	00eb      	lsls	r3, r5, #3
 800676e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006772:	00e2      	lsls	r2, r4, #3
 8006774:	4614      	mov	r4, r2
 8006776:	461d      	mov	r5, r3
 8006778:	4643      	mov	r3, r8
 800677a:	18e3      	adds	r3, r4, r3
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	464b      	mov	r3, r9
 8006780:	eb45 0303 	adc.w	r3, r5, r3
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006792:	4629      	mov	r1, r5
 8006794:	028b      	lsls	r3, r1, #10
 8006796:	4621      	mov	r1, r4
 8006798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800679c:	4621      	mov	r1, r4
 800679e:	028a      	lsls	r2, r1, #10
 80067a0:	4610      	mov	r0, r2
 80067a2:	4619      	mov	r1, r3
 80067a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067a8:	2200      	movs	r2, #0
 80067aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80067ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067b2:	f7fa fa2d 	bl	8000c10 <__aeabi_uldivmod>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4613      	mov	r3, r2
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80067c0:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	0f1b      	lsrs	r3, r3, #28
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80067ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80067de:	e003      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80067e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80067e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	37b8      	adds	r7, #184	@ 0xb8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800
 80067fc:	00f42400 	.word	0x00f42400

08006800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e28d      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8083 	beq.w	8006926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006820:	4b94      	ldr	r3, [pc, #592]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b04      	cmp	r3, #4
 800682a:	d019      	beq.n	8006860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800682c:	4b91      	ldr	r3, [pc, #580]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
        || \
 8006834:	2b08      	cmp	r3, #8
 8006836:	d106      	bne.n	8006846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006838:	4b8e      	ldr	r3, [pc, #568]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006844:	d00c      	beq.n	8006860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006846:	4b8b      	ldr	r3, [pc, #556]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d112      	bne.n	8006878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006852:	4b88      	ldr	r3, [pc, #544]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800685a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800685e:	d10b      	bne.n	8006878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006860:	4b84      	ldr	r3, [pc, #528]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d05b      	beq.n	8006924 <HAL_RCC_OscConfig+0x124>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d157      	bne.n	8006924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e25a      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006880:	d106      	bne.n	8006890 <HAL_RCC_OscConfig+0x90>
 8006882:	4b7c      	ldr	r3, [pc, #496]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a7b      	ldr	r2, [pc, #492]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e01d      	b.n	80068cc <HAL_RCC_OscConfig+0xcc>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0xb4>
 800689a:	4b76      	ldr	r3, [pc, #472]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a75      	ldr	r2, [pc, #468]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b73      	ldr	r3, [pc, #460]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a72      	ldr	r2, [pc, #456]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0xcc>
 80068b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a6b      	ldr	r2, [pc, #428]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fe f960 	bl	8004b98 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fe f95c 	bl	8004b98 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	@ 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e21f      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b61      	ldr	r3, [pc, #388]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0xdc>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fe f94c 	bl	8004b98 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006904:	f7fe f948 	bl	8004b98 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	@ 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e20b      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006916:	4b57      	ldr	r3, [pc, #348]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x104>
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d06f      	beq.n	8006a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006932:	4b50      	ldr	r3, [pc, #320]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b00      	cmp	r3, #0
 800693c:	d017      	beq.n	800696e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800693e:	4b4d      	ldr	r3, [pc, #308]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 030c 	and.w	r3, r3, #12
        || \
 8006946:	2b08      	cmp	r3, #8
 8006948:	d105      	bne.n	8006956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800694a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006956:	4b47      	ldr	r3, [pc, #284]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d11c      	bne.n	800699c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006962:	4b44      	ldr	r3, [pc, #272]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d116      	bne.n	800699c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696e:	4b41      	ldr	r3, [pc, #260]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_RCC_OscConfig+0x186>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d001      	beq.n	8006986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e1d3      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4937      	ldr	r1, [pc, #220]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800699a:	e03a      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d020      	beq.n	80069e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069a4:	4b34      	ldr	r3, [pc, #208]	@ (8006a78 <HAL_RCC_OscConfig+0x278>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069aa:	f7fe f8f5 	bl	8004b98 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b2:	f7fe f8f1 	bl	8004b98 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e1b4      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d0:	4b28      	ldr	r3, [pc, #160]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4925      	ldr	r1, [pc, #148]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	600b      	str	r3, [r1, #0]
 80069e4:	e015      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e6:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <HAL_RCC_OscConfig+0x278>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fe f8d4 	bl	8004b98 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f4:	f7fe f8d0 	bl	8004b98 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e193      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d036      	beq.n	8006a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <HAL_RCC_OscConfig+0x27c>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fe f8b4 	bl	8004b98 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a34:	f7fe f8b0 	bl	8004b98 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e173      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a46:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x234>
 8006a52:	e01b      	b.n	8006a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a54:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <HAL_RCC_OscConfig+0x27c>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5a:	f7fe f89d 	bl	8004b98 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a60:	e00e      	b.n	8006a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a62:	f7fe f899 	bl	8004b98 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d907      	bls.n	8006a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e15c      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
 8006a74:	40023800 	.word	0x40023800
 8006a78:	42470000 	.word	0x42470000
 8006a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	4b8a      	ldr	r3, [pc, #552]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ea      	bne.n	8006a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8097 	beq.w	8006bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9e:	4b83      	ldr	r3, [pc, #524]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	4b7f      	ldr	r3, [pc, #508]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aba:	4b7c      	ldr	r3, [pc, #496]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aca:	4b79      	ldr	r3, [pc, #484]	@ (8006cb0 <HAL_RCC_OscConfig+0x4b0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d118      	bne.n	8006b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad6:	4b76      	ldr	r3, [pc, #472]	@ (8006cb0 <HAL_RCC_OscConfig+0x4b0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a75      	ldr	r2, [pc, #468]	@ (8006cb0 <HAL_RCC_OscConfig+0x4b0>)
 8006adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae2:	f7fe f859 	bl	8004b98 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aea:	f7fe f855 	bl	8004b98 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e118      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006afc:	4b6c      	ldr	r3, [pc, #432]	@ (8006cb0 <HAL_RCC_OscConfig+0x4b0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x31e>
 8006b10:	4b66      	ldr	r3, [pc, #408]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	4a65      	ldr	r2, [pc, #404]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b1c:	e01c      	b.n	8006b58 <HAL_RCC_OscConfig+0x358>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x340>
 8006b26:	4b61      	ldr	r3, [pc, #388]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2a:	4a60      	ldr	r2, [pc, #384]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b32:	4b5e      	ldr	r3, [pc, #376]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	4a5d      	ldr	r2, [pc, #372]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3e:	e00b      	b.n	8006b58 <HAL_RCC_OscConfig+0x358>
 8006b40:	4b5a      	ldr	r3, [pc, #360]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b44:	4a59      	ldr	r2, [pc, #356]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b4c:	4b57      	ldr	r3, [pc, #348]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b50:	4a56      	ldr	r2, [pc, #344]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b52:	f023 0304 	bic.w	r3, r3, #4
 8006b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d015      	beq.n	8006b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b60:	f7fe f81a 	bl	8004b98 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b66:	e00a      	b.n	8006b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f7fe f816 	bl	8004b98 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0d7      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ee      	beq.n	8006b68 <HAL_RCC_OscConfig+0x368>
 8006b8a:	e014      	b.n	8006bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8c:	f7fe f804 	bl	8004b98 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b94:	f7fe f800 	bl	8004b98 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e0c1      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006baa:	4b40      	ldr	r3, [pc, #256]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ee      	bne.n	8006b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d105      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80ad 	beq.w	8006d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bd2:	4b36      	ldr	r3, [pc, #216]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d060      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d145      	bne.n	8006c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be6:	4b33      	ldr	r3, [pc, #204]	@ (8006cb4 <HAL_RCC_OscConfig+0x4b4>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bec:	f7fd ffd4 	bl	8004b98 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fd ffd0 	bl	8004b98 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e093      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c06:	4b29      	ldr	r3, [pc, #164]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	019b      	lsls	r3, r3, #6
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	061b      	lsls	r3, r3, #24
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3c:	071b      	lsls	r3, r3, #28
 8006c3e:	491b      	ldr	r1, [pc, #108]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c44:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb4 <HAL_RCC_OscConfig+0x4b4>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fd ffa5 	bl	8004b98 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c52:	f7fd ffa1 	bl	8004b98 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e064      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c64:	4b11      	ldr	r3, [pc, #68]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCC_OscConfig+0x452>
 8006c70:	e05c      	b.n	8006d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c72:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <HAL_RCC_OscConfig+0x4b4>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fd ff8e 	bl	8004b98 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c80:	f7fd ff8a 	bl	8004b98 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e04d      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c92:	4b06      	ldr	r3, [pc, #24]	@ (8006cac <HAL_RCC_OscConfig+0x4ac>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x480>
 8006c9e:	e045      	b.n	8006d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e040      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	40007000 	.word	0x40007000
 8006cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d38 <HAL_RCC_OscConfig+0x538>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d030      	beq.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d129      	bne.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d122      	bne.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ce8:	4013      	ands	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d119      	bne.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	3b01      	subs	r3, #1
 8006d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d10f      	bne.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d107      	bne.n	8006d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d001      	beq.n	8006d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	40023800 	.word	0x40023800

08006d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e041      	b.n	8006dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fd fd04 	bl	8004770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f000 fad8 	bl	8007330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e041      	b.n	8006e70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f839 	bl	8006e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3304      	adds	r3, #4
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f000 fa89 	bl	8007330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_TIM_PWM_Start+0x24>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e022      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d109      	bne.n	8006eca <HAL_TIM_PWM_Start+0x3e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	bf14      	ite	ne
 8006ec2:	2301      	movne	r3, #1
 8006ec4:	2300      	moveq	r3, #0
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	e015      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d109      	bne.n	8006ee4 <HAL_TIM_PWM_Start+0x58>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e008      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x6a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e07c      	b.n	8006ff8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_PWM_Start+0x82>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Start+0x92>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Start+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_PWM_Start+0xaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fcec 	bl	800791c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2d      	ldr	r2, [pc, #180]	@ (8007000 <HAL_TIM_PWM_Start+0x174>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIM_PWM_Start+0xcc>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2c      	ldr	r2, [pc, #176]	@ (8007004 <HAL_TIM_PWM_Start+0x178>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d101      	bne.n	8006f5c <HAL_TIM_PWM_Start+0xd0>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <HAL_TIM_PWM_Start+0xd2>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <HAL_TIM_PWM_Start+0x174>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d022      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f84:	d01d      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007008 <HAL_TIM_PWM_Start+0x17c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	@ (800700c <HAL_TIM_PWM_Start+0x180>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007010 <HAL_TIM_PWM_Start+0x184>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <HAL_TIM_PWM_Start+0x178>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a18      	ldr	r2, [pc, #96]	@ (8007014 <HAL_TIM_PWM_Start+0x188>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x136>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a16      	ldr	r2, [pc, #88]	@ (8007018 <HAL_TIM_PWM_Start+0x18c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d111      	bne.n	8006fe6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b06      	cmp	r3, #6
 8006fd2:	d010      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	e007      	b.n	8006ff6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007036:	2302      	movs	r3, #2
 8007038:	e0ae      	b.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b0c      	cmp	r3, #12
 8007046:	f200 809f 	bhi.w	8007188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800704a:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007085 	.word	0x08007085
 8007054:	08007189 	.word	0x08007189
 8007058:	08007189 	.word	0x08007189
 800705c:	08007189 	.word	0x08007189
 8007060:	080070c5 	.word	0x080070c5
 8007064:	08007189 	.word	0x08007189
 8007068:	08007189 	.word	0x08007189
 800706c:	08007189 	.word	0x08007189
 8007070:	08007107 	.word	0x08007107
 8007074:	08007189 	.word	0x08007189
 8007078:	08007189 	.word	0x08007189
 800707c:	08007189 	.word	0x08007189
 8007080:	08007147 	.word	0x08007147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f9fc 	bl	8007488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0208 	orr.w	r2, r2, #8
 800709e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0204 	bic.w	r2, r2, #4
 80070ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6999      	ldr	r1, [r3, #24]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	619a      	str	r2, [r3, #24]
      break;
 80070c2:	e064      	b.n	800718e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fa4c 	bl	8007568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6999      	ldr	r1, [r3, #24]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	021a      	lsls	r2, r3, #8
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	619a      	str	r2, [r3, #24]
      break;
 8007104:	e043      	b.n	800718e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 faa1 	bl	8007654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0208 	orr.w	r2, r2, #8
 8007120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0204 	bic.w	r2, r2, #4
 8007130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69d9      	ldr	r1, [r3, #28]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	61da      	str	r2, [r3, #28]
      break;
 8007144:	e023      	b.n	800718e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 faf5 	bl	800773c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69da      	ldr	r2, [r3, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69d9      	ldr	r1, [r3, #28]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	021a      	lsls	r2, r3, #8
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	61da      	str	r2, [r3, #28]
      break;
 8007186:	e002      	b.n	800718e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
      break;
 800718c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIM_ConfigClockSource+0x1c>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e0b4      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x186>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f4:	d03e      	beq.n	8007274 <HAL_TIM_ConfigClockSource+0xd4>
 80071f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071fa:	f200 8087 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x16c>
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	f000 8086 	beq.w	8007312 <HAL_TIM_ConfigClockSource+0x172>
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720a:	d87f      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 800720c:	2b70      	cmp	r3, #112	@ 0x70
 800720e:	d01a      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0xa6>
 8007210:	2b70      	cmp	r3, #112	@ 0x70
 8007212:	d87b      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 8007214:	2b60      	cmp	r3, #96	@ 0x60
 8007216:	d050      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x11a>
 8007218:	2b60      	cmp	r3, #96	@ 0x60
 800721a:	d877      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 800721c:	2b50      	cmp	r3, #80	@ 0x50
 800721e:	d03c      	beq.n	800729a <HAL_TIM_ConfigClockSource+0xfa>
 8007220:	2b50      	cmp	r3, #80	@ 0x50
 8007222:	d873      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b40      	cmp	r3, #64	@ 0x40
 8007226:	d058      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x13a>
 8007228:	2b40      	cmp	r3, #64	@ 0x40
 800722a:	d86f      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b30      	cmp	r3, #48	@ 0x30
 800722e:	d064      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x15a>
 8007230:	2b30      	cmp	r3, #48	@ 0x30
 8007232:	d86b      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d060      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x15a>
 8007238:	2b20      	cmp	r3, #32
 800723a:	d867      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d05c      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x15a>
 8007240:	2b10      	cmp	r3, #16
 8007242:	d05a      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x15a>
 8007244:	e062      	b.n	800730c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007256:	f000 fb41 	bl	80078dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	609a      	str	r2, [r3, #8]
      break;
 8007272:	e04f      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007284:	f000 fb2a 	bl	80078dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007296:	609a      	str	r2, [r3, #8]
      break;
 8007298:	e03c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a6:	461a      	mov	r2, r3
 80072a8:	f000 fa9e 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2150      	movs	r1, #80	@ 0x50
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 faf7 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 80072b8:	e02c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 fabd 	bl	8007846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2160      	movs	r1, #96	@ 0x60
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fae7 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 80072d8:	e01c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 fa7e 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2140      	movs	r1, #64	@ 0x40
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fad7 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 80072f8:	e00c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f000 face 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 800730a:	e003      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e000      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a46      	ldr	r2, [pc, #280]	@ (800745c <TIM_Base_SetConfig+0x12c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734e:	d00f      	beq.n	8007370 <TIM_Base_SetConfig+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a43      	ldr	r2, [pc, #268]	@ (8007460 <TIM_Base_SetConfig+0x130>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00b      	beq.n	8007370 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a42      	ldr	r2, [pc, #264]	@ (8007464 <TIM_Base_SetConfig+0x134>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d007      	beq.n	8007370 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a41      	ldr	r2, [pc, #260]	@ (8007468 <TIM_Base_SetConfig+0x138>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d003      	beq.n	8007370 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a40      	ldr	r2, [pc, #256]	@ (800746c <TIM_Base_SetConfig+0x13c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d108      	bne.n	8007382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a35      	ldr	r2, [pc, #212]	@ (800745c <TIM_Base_SetConfig+0x12c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d02b      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007390:	d027      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a32      	ldr	r2, [pc, #200]	@ (8007460 <TIM_Base_SetConfig+0x130>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d023      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a31      	ldr	r2, [pc, #196]	@ (8007464 <TIM_Base_SetConfig+0x134>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01f      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a30      	ldr	r2, [pc, #192]	@ (8007468 <TIM_Base_SetConfig+0x138>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01b      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2f      	ldr	r2, [pc, #188]	@ (800746c <TIM_Base_SetConfig+0x13c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d017      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007470 <TIM_Base_SetConfig+0x140>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007474 <TIM_Base_SetConfig+0x144>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00f      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007478 <TIM_Base_SetConfig+0x148>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00b      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2b      	ldr	r2, [pc, #172]	@ (800747c <TIM_Base_SetConfig+0x14c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007480 <TIM_Base_SetConfig+0x150>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a29      	ldr	r2, [pc, #164]	@ (8007484 <TIM_Base_SetConfig+0x154>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d108      	bne.n	80073f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a10      	ldr	r2, [pc, #64]	@ (800745c <TIM_Base_SetConfig+0x12c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d003      	beq.n	8007428 <TIM_Base_SetConfig+0xf8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a12      	ldr	r2, [pc, #72]	@ (800746c <TIM_Base_SetConfig+0x13c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d103      	bne.n	8007430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b01      	cmp	r3, #1
 8007440:	d105      	bne.n	800744e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f023 0201 	bic.w	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	611a      	str	r2, [r3, #16]
  }
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40014400 	.word	0x40014400
 8007478:	40014800 	.word	0x40014800
 800747c:	40001800 	.word	0x40001800
 8007480:	40001c00 	.word	0x40001c00
 8007484:	40002000 	.word	0x40002000

08007488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f023 0201 	bic.w	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f023 0302 	bic.w	r3, r3, #2
 80074d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a20      	ldr	r2, [pc, #128]	@ (8007560 <TIM_OC1_SetConfig+0xd8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC1_SetConfig+0x64>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007564 <TIM_OC1_SetConfig+0xdc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10c      	bne.n	8007506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 0308 	bic.w	r3, r3, #8
 80074f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 0304 	bic.w	r3, r3, #4
 8007504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a15      	ldr	r2, [pc, #84]	@ (8007560 <TIM_OC1_SetConfig+0xd8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_OC1_SetConfig+0x8e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a14      	ldr	r2, [pc, #80]	@ (8007564 <TIM_OC1_SetConfig+0xdc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d111      	bne.n	800753a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800751c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	621a      	str	r2, [r3, #32]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40010000 	.word	0x40010000
 8007564:	40010400 	.word	0x40010400

08007568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	f023 0210 	bic.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800759e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0320 	bic.w	r3, r3, #32
 80075b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a22      	ldr	r2, [pc, #136]	@ (800764c <TIM_OC2_SetConfig+0xe4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_OC2_SetConfig+0x68>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a21      	ldr	r2, [pc, #132]	@ (8007650 <TIM_OC2_SetConfig+0xe8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10d      	bne.n	80075ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a17      	ldr	r2, [pc, #92]	@ (800764c <TIM_OC2_SetConfig+0xe4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC2_SetConfig+0x94>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a16      	ldr	r2, [pc, #88]	@ (8007650 <TIM_OC2_SetConfig+0xe8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d113      	bne.n	8007624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800760a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a21      	ldr	r2, [pc, #132]	@ (8007734 <TIM_OC3_SetConfig+0xe0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC3_SetConfig+0x66>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a20      	ldr	r2, [pc, #128]	@ (8007738 <TIM_OC3_SetConfig+0xe4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d10d      	bne.n	80076d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a16      	ldr	r2, [pc, #88]	@ (8007734 <TIM_OC3_SetConfig+0xe0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC3_SetConfig+0x92>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a15      	ldr	r2, [pc, #84]	@ (8007738 <TIM_OC3_SetConfig+0xe4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d113      	bne.n	800770e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40010000 	.word	0x40010000
 8007738:	40010400 	.word	0x40010400

0800773c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a12      	ldr	r2, [pc, #72]	@ (80077e0 <TIM_OC4_SetConfig+0xa4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <TIM_OC4_SetConfig+0x68>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <TIM_OC4_SetConfig+0xa8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d109      	bne.n	80077b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	019b      	lsls	r3, r3, #6
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40010400 	.word	0x40010400

080077e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f023 030a 	bic.w	r3, r3, #10
 8007824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f023 0210 	bic.w	r2, r3, #16
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	031b      	lsls	r3, r3, #12
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f043 0307 	orr.w	r3, r3, #7
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	021a      	lsls	r2, r3, #8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	431a      	orrs	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4313      	orrs	r3, r2
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	609a      	str	r2, [r3, #8]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2201      	movs	r2, #1
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1a      	ldr	r2, [r3, #32]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	43db      	mvns	r3, r3
 800793e:	401a      	ands	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	fa01 f303 	lsl.w	r3, r1, r3
 8007954:	431a      	orrs	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800797c:	2302      	movs	r3, #2
 800797e:	e05a      	b.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a21      	ldr	r2, [pc, #132]	@ (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d022      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079cc:	d01d      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d018      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00e      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a18      	ldr	r2, [pc, #96]	@ (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d009      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a17      	ldr	r2, [pc, #92]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d004      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a15      	ldr	r2, [pc, #84]	@ (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d10c      	bne.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40001800 	.word	0x40001800

08007a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e042      	b.n	8007af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fc ff78 	bl	800497c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2224      	movs	r2, #36	@ 0x24
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fa09 	bl	8007ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695a      	ldr	r2, [r3, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	@ 0x28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d175      	bne.n	8007c0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_UART_Transmit+0x2c>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e06e      	b.n	8007c0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2221      	movs	r2, #33	@ 0x21
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b3e:	f7fd f82b 	bl	8004b98 <HAL_GetTick>
 8007b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b58:	d108      	bne.n	8007b6c <HAL_UART_Transmit+0x6c>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	e003      	b.n	8007b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b74:	e02e      	b.n	8007bd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2180      	movs	r1, #128	@ 0x80
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f8df 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e03a      	b.n	8007c0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	3302      	adds	r3, #2
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	e007      	b.n	8007bc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	781a      	ldrb	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1cb      	bne.n	8007b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2200      	movs	r2, #0
 8007be6:	2140      	movs	r1, #64	@ 0x40
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f8ab 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e006      	b.n	8007c0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e000      	b.n	8007c0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3720      	adds	r7, #32
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b08a      	sub	sp, #40	@ 0x28
 8007c1a:	af02      	add	r7, sp, #8
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	603b      	str	r3, [r7, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	f040 8081 	bne.w	8007d3a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <HAL_UART_Receive+0x2e>
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e079      	b.n	8007d3c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2222      	movs	r2, #34	@ 0x22
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c5c:	f7fc ff9c 	bl	8004b98 <HAL_GetTick>
 8007c60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c76:	d108      	bne.n	8007c8a <HAL_UART_Receive+0x74>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	61bb      	str	r3, [r7, #24]
 8007c88:	e003      	b.n	8007c92 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007c92:	e047      	b.n	8007d24 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2120      	movs	r1, #32
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f850 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e042      	b.n	8007d3c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10c      	bne.n	8007cd6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	3302      	adds	r3, #2
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	e01f      	b.n	8007d16 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cde:	d007      	beq.n	8007cf0 <HAL_UART_Receive+0xda>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <HAL_UART_Receive+0xe8>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e008      	b.n	8007d10 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1b2      	bne.n	8007c94 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e000      	b.n	8007d3c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d3a:	2302      	movs	r3, #2
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3720      	adds	r7, #32
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	e03b      	b.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d037      	beq.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fc ff1b 	bl	8004b98 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e03a      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d023      	beq.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b80      	cmp	r3, #128	@ 0x80
 8007d8a:	d020      	beq.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d01d      	beq.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d116      	bne.n	8007dce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f81d 	bl	8007df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e00f      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d0b4      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b095      	sub	sp, #84	@ 0x54
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3314      	adds	r3, #20
 8007e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d119      	bne.n	8007ea2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f023 0310 	bic.w	r3, r3, #16
 8007e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e8e:	61ba      	str	r2, [r7, #24]
 8007e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6979      	ldr	r1, [r7, #20]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007eb0:	bf00      	nop
 8007eb2:	3754      	adds	r7, #84	@ 0x54
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec0:	b0c0      	sub	sp, #256	@ 0x100
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed8:	68d9      	ldr	r1, [r3, #12]
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	ea40 0301 	orr.w	r3, r0, r1
 8007ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f14:	f021 010c 	bic.w	r1, r1, #12
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f22:	430b      	orrs	r3, r1
 8007f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f36:	6999      	ldr	r1, [r3, #24]
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	ea40 0301 	orr.w	r3, r0, r1
 8007f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8008188 <UART_SetConfig+0x2cc>)
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d005      	beq.n	8007f5c <UART_SetConfig+0xa0>
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b8d      	ldr	r3, [pc, #564]	@ (800818c <UART_SetConfig+0x2d0>)
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d104      	bne.n	8007f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7fe fa0c 	bl	8006378 <HAL_RCC_GetPCLK2Freq>
 8007f60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f64:	e003      	b.n	8007f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f66:	f7fe f9f3 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f78:	f040 810c 	bne.w	8008194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	1891      	adds	r1, r2, r2
 8007f94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f96:	415b      	adcs	r3, r3
 8007f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	eb12 0801 	adds.w	r8, r2, r1
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	eb43 0901 	adc.w	r9, r3, r1
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fbe:	4690      	mov	r8, r2
 8007fc0:	4699      	mov	r9, r3
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	eb18 0303 	adds.w	r3, r8, r3
 8007fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fcc:	462b      	mov	r3, r5
 8007fce:	eb49 0303 	adc.w	r3, r9, r3
 8007fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fea:	460b      	mov	r3, r1
 8007fec:	18db      	adds	r3, r3, r3
 8007fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	eb42 0303 	adc.w	r3, r2, r3
 8007ff6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008000:	f7f8 fe06 	bl	8000c10 <__aeabi_uldivmod>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4b61      	ldr	r3, [pc, #388]	@ (8008190 <UART_SetConfig+0x2d4>)
 800800a:	fba3 2302 	umull	r2, r3, r3, r2
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	011c      	lsls	r4, r3, #4
 8008012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008016:	2200      	movs	r2, #0
 8008018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800801c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	1891      	adds	r1, r2, r2
 800802a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800802c:	415b      	adcs	r3, r3
 800802e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008034:	4641      	mov	r1, r8
 8008036:	eb12 0a01 	adds.w	sl, r2, r1
 800803a:	4649      	mov	r1, r9
 800803c:	eb43 0b01 	adc.w	fp, r3, r1
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800804c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008054:	4692      	mov	sl, r2
 8008056:	469b      	mov	fp, r3
 8008058:	4643      	mov	r3, r8
 800805a:	eb1a 0303 	adds.w	r3, sl, r3
 800805e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008062:	464b      	mov	r3, r9
 8008064:	eb4b 0303 	adc.w	r3, fp, r3
 8008068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008078:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800807c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008080:	460b      	mov	r3, r1
 8008082:	18db      	adds	r3, r3, r3
 8008084:	643b      	str	r3, [r7, #64]	@ 0x40
 8008086:	4613      	mov	r3, r2
 8008088:	eb42 0303 	adc.w	r3, r2, r3
 800808c:	647b      	str	r3, [r7, #68]	@ 0x44
 800808e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008096:	f7f8 fdbb 	bl	8000c10 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	4b3b      	ldr	r3, [pc, #236]	@ (8008190 <UART_SetConfig+0x2d4>)
 80080a2:	fba3 2301 	umull	r2, r3, r3, r1
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	2264      	movs	r2, #100	@ 0x64
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	1acb      	subs	r3, r1, r3
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080b6:	4b36      	ldr	r3, [pc, #216]	@ (8008190 <UART_SetConfig+0x2d4>)
 80080b8:	fba3 2302 	umull	r2, r3, r3, r2
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080c4:	441c      	add	r4, r3
 80080c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080d8:	4642      	mov	r2, r8
 80080da:	464b      	mov	r3, r9
 80080dc:	1891      	adds	r1, r2, r2
 80080de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080e0:	415b      	adcs	r3, r3
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080e8:	4641      	mov	r1, r8
 80080ea:	1851      	adds	r1, r2, r1
 80080ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80080ee:	4649      	mov	r1, r9
 80080f0:	414b      	adcs	r3, r1
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008100:	4659      	mov	r1, fp
 8008102:	00cb      	lsls	r3, r1, #3
 8008104:	4651      	mov	r1, sl
 8008106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800810a:	4651      	mov	r1, sl
 800810c:	00ca      	lsls	r2, r1, #3
 800810e:	4610      	mov	r0, r2
 8008110:	4619      	mov	r1, r3
 8008112:	4603      	mov	r3, r0
 8008114:	4642      	mov	r2, r8
 8008116:	189b      	adds	r3, r3, r2
 8008118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800811c:	464b      	mov	r3, r9
 800811e:	460a      	mov	r2, r1
 8008120:	eb42 0303 	adc.w	r3, r2, r3
 8008124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008134:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800813c:	460b      	mov	r3, r1
 800813e:	18db      	adds	r3, r3, r3
 8008140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008142:	4613      	mov	r3, r2
 8008144:	eb42 0303 	adc.w	r3, r2, r3
 8008148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800814a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800814e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008152:	f7f8 fd5d 	bl	8000c10 <__aeabi_uldivmod>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <UART_SetConfig+0x2d4>)
 800815c:	fba3 1302 	umull	r1, r3, r3, r2
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	2164      	movs	r1, #100	@ 0x64
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	3332      	adds	r3, #50	@ 0x32
 800816e:	4a08      	ldr	r2, [pc, #32]	@ (8008190 <UART_SetConfig+0x2d4>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f003 0207 	and.w	r2, r3, #7
 800817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4422      	add	r2, r4
 8008182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008184:	e106      	b.n	8008394 <UART_SetConfig+0x4d8>
 8008186:	bf00      	nop
 8008188:	40011000 	.word	0x40011000
 800818c:	40011400 	.word	0x40011400
 8008190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008198:	2200      	movs	r2, #0
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800819e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	1891      	adds	r1, r2, r2
 80081ac:	6239      	str	r1, [r7, #32]
 80081ae:	415b      	adcs	r3, r3
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081b6:	4641      	mov	r1, r8
 80081b8:	1854      	adds	r4, r2, r1
 80081ba:	4649      	mov	r1, r9
 80081bc:	eb43 0501 	adc.w	r5, r3, r1
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	00eb      	lsls	r3, r5, #3
 80081ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ce:	00e2      	lsls	r2, r4, #3
 80081d0:	4614      	mov	r4, r2
 80081d2:	461d      	mov	r5, r3
 80081d4:	4643      	mov	r3, r8
 80081d6:	18e3      	adds	r3, r4, r3
 80081d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081dc:	464b      	mov	r3, r9
 80081de:	eb45 0303 	adc.w	r3, r5, r3
 80081e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081f6:	f04f 0200 	mov.w	r2, #0
 80081fa:	f04f 0300 	mov.w	r3, #0
 80081fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008202:	4629      	mov	r1, r5
 8008204:	008b      	lsls	r3, r1, #2
 8008206:	4621      	mov	r1, r4
 8008208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800820c:	4621      	mov	r1, r4
 800820e:	008a      	lsls	r2, r1, #2
 8008210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008214:	f7f8 fcfc 	bl	8000c10 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4b60      	ldr	r3, [pc, #384]	@ (80083a0 <UART_SetConfig+0x4e4>)
 800821e:	fba3 2302 	umull	r2, r3, r3, r2
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	011c      	lsls	r4, r3, #4
 8008226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822a:	2200      	movs	r2, #0
 800822c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008230:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008238:	4642      	mov	r2, r8
 800823a:	464b      	mov	r3, r9
 800823c:	1891      	adds	r1, r2, r2
 800823e:	61b9      	str	r1, [r7, #24]
 8008240:	415b      	adcs	r3, r3
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008248:	4641      	mov	r1, r8
 800824a:	1851      	adds	r1, r2, r1
 800824c:	6139      	str	r1, [r7, #16]
 800824e:	4649      	mov	r1, r9
 8008250:	414b      	adcs	r3, r1
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008260:	4659      	mov	r1, fp
 8008262:	00cb      	lsls	r3, r1, #3
 8008264:	4651      	mov	r1, sl
 8008266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800826a:	4651      	mov	r1, sl
 800826c:	00ca      	lsls	r2, r1, #3
 800826e:	4610      	mov	r0, r2
 8008270:	4619      	mov	r1, r3
 8008272:	4603      	mov	r3, r0
 8008274:	4642      	mov	r2, r8
 8008276:	189b      	adds	r3, r3, r2
 8008278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800827c:	464b      	mov	r3, r9
 800827e:	460a      	mov	r2, r1
 8008280:	eb42 0303 	adc.w	r3, r2, r3
 8008284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008292:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082a0:	4649      	mov	r1, r9
 80082a2:	008b      	lsls	r3, r1, #2
 80082a4:	4641      	mov	r1, r8
 80082a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082aa:	4641      	mov	r1, r8
 80082ac:	008a      	lsls	r2, r1, #2
 80082ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082b2:	f7f8 fcad 	bl	8000c10 <__aeabi_uldivmod>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	4b38      	ldr	r3, [pc, #224]	@ (80083a0 <UART_SetConfig+0x4e4>)
 80082be:	fba3 2301 	umull	r2, r3, r3, r1
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	2264      	movs	r2, #100	@ 0x64
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	1acb      	subs	r3, r1, r3
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	3332      	adds	r3, #50	@ 0x32
 80082d0:	4a33      	ldr	r2, [pc, #204]	@ (80083a0 <UART_SetConfig+0x4e4>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082dc:	441c      	add	r4, r3
 80082de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082e2:	2200      	movs	r2, #0
 80082e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80082e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80082e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082ec:	4642      	mov	r2, r8
 80082ee:	464b      	mov	r3, r9
 80082f0:	1891      	adds	r1, r2, r2
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	415b      	adcs	r3, r3
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082fc:	4641      	mov	r1, r8
 80082fe:	1851      	adds	r1, r2, r1
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	4649      	mov	r1, r9
 8008304:	414b      	adcs	r3, r1
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008314:	4659      	mov	r1, fp
 8008316:	00cb      	lsls	r3, r1, #3
 8008318:	4651      	mov	r1, sl
 800831a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800831e:	4651      	mov	r1, sl
 8008320:	00ca      	lsls	r2, r1, #3
 8008322:	4610      	mov	r0, r2
 8008324:	4619      	mov	r1, r3
 8008326:	4603      	mov	r3, r0
 8008328:	4642      	mov	r2, r8
 800832a:	189b      	adds	r3, r3, r2
 800832c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800832e:	464b      	mov	r3, r9
 8008330:	460a      	mov	r2, r1
 8008332:	eb42 0303 	adc.w	r3, r2, r3
 8008336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	663b      	str	r3, [r7, #96]	@ 0x60
 8008342:	667a      	str	r2, [r7, #100]	@ 0x64
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008350:	4649      	mov	r1, r9
 8008352:	008b      	lsls	r3, r1, #2
 8008354:	4641      	mov	r1, r8
 8008356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800835a:	4641      	mov	r1, r8
 800835c:	008a      	lsls	r2, r1, #2
 800835e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008362:	f7f8 fc55 	bl	8000c10 <__aeabi_uldivmod>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <UART_SetConfig+0x4e4>)
 800836c:	fba3 1302 	umull	r1, r3, r3, r2
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	2164      	movs	r1, #100	@ 0x64
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	3332      	adds	r3, #50	@ 0x32
 800837e:	4a08      	ldr	r2, [pc, #32]	@ (80083a0 <UART_SetConfig+0x4e4>)
 8008380:	fba2 2303 	umull	r2, r3, r2, r3
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	f003 020f 	and.w	r2, r3, #15
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4422      	add	r2, r4
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800839a:	46bd      	mov	sp, r7
 800839c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a0:	51eb851f 	.word	0x51eb851f

080083a4 <malloc>:
 80083a4:	4b02      	ldr	r3, [pc, #8]	@ (80083b0 <malloc+0xc>)
 80083a6:	4601      	mov	r1, r0
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	f000 b825 	b.w	80083f8 <_malloc_r>
 80083ae:	bf00      	nop
 80083b0:	20000018 	.word	0x20000018

080083b4 <sbrk_aligned>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	4e0f      	ldr	r6, [pc, #60]	@ (80083f4 <sbrk_aligned+0x40>)
 80083b8:	460c      	mov	r4, r1
 80083ba:	6831      	ldr	r1, [r6, #0]
 80083bc:	4605      	mov	r5, r0
 80083be:	b911      	cbnz	r1, 80083c6 <sbrk_aligned+0x12>
 80083c0:	f000 fada 	bl	8008978 <_sbrk_r>
 80083c4:	6030      	str	r0, [r6, #0]
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 fad5 	bl	8008978 <_sbrk_r>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d103      	bne.n	80083da <sbrk_aligned+0x26>
 80083d2:	f04f 34ff 	mov.w	r4, #4294967295
 80083d6:	4620      	mov	r0, r4
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	1cc4      	adds	r4, r0, #3
 80083dc:	f024 0403 	bic.w	r4, r4, #3
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d0f8      	beq.n	80083d6 <sbrk_aligned+0x22>
 80083e4:	1a21      	subs	r1, r4, r0
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 fac6 	bl	8008978 <_sbrk_r>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d1f2      	bne.n	80083d6 <sbrk_aligned+0x22>
 80083f0:	e7ef      	b.n	80083d2 <sbrk_aligned+0x1e>
 80083f2:	bf00      	nop
 80083f4:	200003b8 	.word	0x200003b8

080083f8 <_malloc_r>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	1ccd      	adds	r5, r1, #3
 80083fe:	f025 0503 	bic.w	r5, r5, #3
 8008402:	3508      	adds	r5, #8
 8008404:	2d0c      	cmp	r5, #12
 8008406:	bf38      	it	cc
 8008408:	250c      	movcc	r5, #12
 800840a:	2d00      	cmp	r5, #0
 800840c:	4606      	mov	r6, r0
 800840e:	db01      	blt.n	8008414 <_malloc_r+0x1c>
 8008410:	42a9      	cmp	r1, r5
 8008412:	d904      	bls.n	800841e <_malloc_r+0x26>
 8008414:	230c      	movs	r3, #12
 8008416:	6033      	str	r3, [r6, #0]
 8008418:	2000      	movs	r0, #0
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084f4 <_malloc_r+0xfc>
 8008422:	f000 f869 	bl	80084f8 <__malloc_lock>
 8008426:	f8d8 3000 	ldr.w	r3, [r8]
 800842a:	461c      	mov	r4, r3
 800842c:	bb44      	cbnz	r4, 8008480 <_malloc_r+0x88>
 800842e:	4629      	mov	r1, r5
 8008430:	4630      	mov	r0, r6
 8008432:	f7ff ffbf 	bl	80083b4 <sbrk_aligned>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	4604      	mov	r4, r0
 800843a:	d158      	bne.n	80084ee <_malloc_r+0xf6>
 800843c:	f8d8 4000 	ldr.w	r4, [r8]
 8008440:	4627      	mov	r7, r4
 8008442:	2f00      	cmp	r7, #0
 8008444:	d143      	bne.n	80084ce <_malloc_r+0xd6>
 8008446:	2c00      	cmp	r4, #0
 8008448:	d04b      	beq.n	80084e2 <_malloc_r+0xea>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	4639      	mov	r1, r7
 800844e:	4630      	mov	r0, r6
 8008450:	eb04 0903 	add.w	r9, r4, r3
 8008454:	f000 fa90 	bl	8008978 <_sbrk_r>
 8008458:	4581      	cmp	r9, r0
 800845a:	d142      	bne.n	80084e2 <_malloc_r+0xea>
 800845c:	6821      	ldr	r1, [r4, #0]
 800845e:	1a6d      	subs	r5, r5, r1
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ffa6 	bl	80083b4 <sbrk_aligned>
 8008468:	3001      	adds	r0, #1
 800846a:	d03a      	beq.n	80084e2 <_malloc_r+0xea>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	442b      	add	r3, r5
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	f8d8 3000 	ldr.w	r3, [r8]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	bb62      	cbnz	r2, 80084d4 <_malloc_r+0xdc>
 800847a:	f8c8 7000 	str.w	r7, [r8]
 800847e:	e00f      	b.n	80084a0 <_malloc_r+0xa8>
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	1b52      	subs	r2, r2, r5
 8008484:	d420      	bmi.n	80084c8 <_malloc_r+0xd0>
 8008486:	2a0b      	cmp	r2, #11
 8008488:	d917      	bls.n	80084ba <_malloc_r+0xc2>
 800848a:	1961      	adds	r1, r4, r5
 800848c:	42a3      	cmp	r3, r4
 800848e:	6025      	str	r5, [r4, #0]
 8008490:	bf18      	it	ne
 8008492:	6059      	strne	r1, [r3, #4]
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	bf08      	it	eq
 8008498:	f8c8 1000 	streq.w	r1, [r8]
 800849c:	5162      	str	r2, [r4, r5]
 800849e:	604b      	str	r3, [r1, #4]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f82f 	bl	8008504 <__malloc_unlock>
 80084a6:	f104 000b 	add.w	r0, r4, #11
 80084aa:	1d23      	adds	r3, r4, #4
 80084ac:	f020 0007 	bic.w	r0, r0, #7
 80084b0:	1ac2      	subs	r2, r0, r3
 80084b2:	bf1c      	itt	ne
 80084b4:	1a1b      	subne	r3, r3, r0
 80084b6:	50a3      	strne	r3, [r4, r2]
 80084b8:	e7af      	b.n	800841a <_malloc_r+0x22>
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	bf0c      	ite	eq
 80084c0:	f8c8 2000 	streq.w	r2, [r8]
 80084c4:	605a      	strne	r2, [r3, #4]
 80084c6:	e7eb      	b.n	80084a0 <_malloc_r+0xa8>
 80084c8:	4623      	mov	r3, r4
 80084ca:	6864      	ldr	r4, [r4, #4]
 80084cc:	e7ae      	b.n	800842c <_malloc_r+0x34>
 80084ce:	463c      	mov	r4, r7
 80084d0:	687f      	ldr	r7, [r7, #4]
 80084d2:	e7b6      	b.n	8008442 <_malloc_r+0x4a>
 80084d4:	461a      	mov	r2, r3
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d1fb      	bne.n	80084d4 <_malloc_r+0xdc>
 80084dc:	2300      	movs	r3, #0
 80084de:	6053      	str	r3, [r2, #4]
 80084e0:	e7de      	b.n	80084a0 <_malloc_r+0xa8>
 80084e2:	230c      	movs	r3, #12
 80084e4:	6033      	str	r3, [r6, #0]
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 f80c 	bl	8008504 <__malloc_unlock>
 80084ec:	e794      	b.n	8008418 <_malloc_r+0x20>
 80084ee:	6005      	str	r5, [r0, #0]
 80084f0:	e7d6      	b.n	80084a0 <_malloc_r+0xa8>
 80084f2:	bf00      	nop
 80084f4:	200003bc 	.word	0x200003bc

080084f8 <__malloc_lock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	@ (8008500 <__malloc_lock+0x8>)
 80084fa:	f000 ba8a 	b.w	8008a12 <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	20000500 	.word	0x20000500

08008504 <__malloc_unlock>:
 8008504:	4801      	ldr	r0, [pc, #4]	@ (800850c <__malloc_unlock+0x8>)
 8008506:	f000 ba85 	b.w	8008a14 <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	20000500 	.word	0x20000500

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	@ 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	@ 0x5c
 800852e:	f000 f9e7 	bl	8008900 <memset>
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <std+0x58>)
 8008534:	6263      	str	r3, [r4, #36]	@ 0x24
 8008536:	4b0d      	ldr	r3, [pc, #52]	@ (800856c <std+0x5c>)
 8008538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <std+0x60>)
 800853c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800853e:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <std+0x64>)
 8008540:	6323      	str	r3, [r4, #48]	@ 0x30
 8008542:	4b0d      	ldr	r3, [pc, #52]	@ (8008578 <std+0x68>)
 8008544:	6224      	str	r4, [r4, #32]
 8008546:	429c      	cmp	r4, r3
 8008548:	d006      	beq.n	8008558 <std+0x48>
 800854a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800854e:	4294      	cmp	r4, r2
 8008550:	d002      	beq.n	8008558 <std+0x48>
 8008552:	33d0      	adds	r3, #208	@ 0xd0
 8008554:	429c      	cmp	r4, r3
 8008556:	d105      	bne.n	8008564 <std+0x54>
 8008558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008560:	f000 ba56 	b.w	8008a10 <__retarget_lock_init_recursive>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	08008751 	.word	0x08008751
 800856c:	08008773 	.word	0x08008773
 8008570:	080087ab 	.word	0x080087ab
 8008574:	080087cf 	.word	0x080087cf
 8008578:	200003c0 	.word	0x200003c0

0800857c <stdio_exit_handler>:
 800857c:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <stdio_exit_handler+0xc>)
 800857e:	4903      	ldr	r1, [pc, #12]	@ (800858c <stdio_exit_handler+0x10>)
 8008580:	4803      	ldr	r0, [pc, #12]	@ (8008590 <stdio_exit_handler+0x14>)
 8008582:	f000 b869 	b.w	8008658 <_fwalk_sglue>
 8008586:	bf00      	nop
 8008588:	2000000c 	.word	0x2000000c
 800858c:	08008bb5 	.word	0x08008bb5
 8008590:	2000001c 	.word	0x2000001c

08008594 <cleanup_stdio>:
 8008594:	6841      	ldr	r1, [r0, #4]
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <cleanup_stdio+0x34>)
 8008598:	4299      	cmp	r1, r3
 800859a:	b510      	push	{r4, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	d001      	beq.n	80085a4 <cleanup_stdio+0x10>
 80085a0:	f000 fb08 	bl	8008bb4 <_fflush_r>
 80085a4:	68a1      	ldr	r1, [r4, #8]
 80085a6:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <cleanup_stdio+0x38>)
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d002      	beq.n	80085b2 <cleanup_stdio+0x1e>
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fb01 	bl	8008bb4 <_fflush_r>
 80085b2:	68e1      	ldr	r1, [r4, #12]
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <cleanup_stdio+0x3c>)
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d004      	beq.n	80085c4 <cleanup_stdio+0x30>
 80085ba:	4620      	mov	r0, r4
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	f000 baf8 	b.w	8008bb4 <_fflush_r>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	bf00      	nop
 80085c8:	200003c0 	.word	0x200003c0
 80085cc:	20000428 	.word	0x20000428
 80085d0:	20000490 	.word	0x20000490

080085d4 <global_stdio_init.part.0>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008604 <global_stdio_init.part.0+0x30>)
 80085d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008608 <global_stdio_init.part.0+0x34>)
 80085da:	4a0c      	ldr	r2, [pc, #48]	@ (800860c <global_stdio_init.part.0+0x38>)
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	4620      	mov	r0, r4
 80085e0:	2200      	movs	r2, #0
 80085e2:	2104      	movs	r1, #4
 80085e4:	f7ff ff94 	bl	8008510 <std>
 80085e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085ec:	2201      	movs	r2, #1
 80085ee:	2109      	movs	r1, #9
 80085f0:	f7ff ff8e 	bl	8008510 <std>
 80085f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085f8:	2202      	movs	r2, #2
 80085fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085fe:	2112      	movs	r1, #18
 8008600:	f7ff bf86 	b.w	8008510 <std>
 8008604:	200004f8 	.word	0x200004f8
 8008608:	200003c0 	.word	0x200003c0
 800860c:	0800857d 	.word	0x0800857d

08008610 <__sfp_lock_acquire>:
 8008610:	4801      	ldr	r0, [pc, #4]	@ (8008618 <__sfp_lock_acquire+0x8>)
 8008612:	f000 b9fe 	b.w	8008a12 <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	20000501 	.word	0x20000501

0800861c <__sfp_lock_release>:
 800861c:	4801      	ldr	r0, [pc, #4]	@ (8008624 <__sfp_lock_release+0x8>)
 800861e:	f000 b9f9 	b.w	8008a14 <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	20000501 	.word	0x20000501

08008628 <__sinit>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	f7ff fff0 	bl	8008610 <__sfp_lock_acquire>
 8008630:	6a23      	ldr	r3, [r4, #32]
 8008632:	b11b      	cbz	r3, 800863c <__sinit+0x14>
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f7ff bff0 	b.w	800861c <__sfp_lock_release>
 800863c:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <__sinit+0x28>)
 800863e:	6223      	str	r3, [r4, #32]
 8008640:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <__sinit+0x2c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f5      	bne.n	8008634 <__sinit+0xc>
 8008648:	f7ff ffc4 	bl	80085d4 <global_stdio_init.part.0>
 800864c:	e7f2      	b.n	8008634 <__sinit+0xc>
 800864e:	bf00      	nop
 8008650:	08008595 	.word	0x08008595
 8008654:	200004f8 	.word	0x200004f8

08008658 <_fwalk_sglue>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4607      	mov	r7, r0
 800865e:	4688      	mov	r8, r1
 8008660:	4614      	mov	r4, r2
 8008662:	2600      	movs	r6, #0
 8008664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008668:	f1b9 0901 	subs.w	r9, r9, #1
 800866c:	d505      	bpl.n	800867a <_fwalk_sglue+0x22>
 800866e:	6824      	ldr	r4, [r4, #0]
 8008670:	2c00      	cmp	r4, #0
 8008672:	d1f7      	bne.n	8008664 <_fwalk_sglue+0xc>
 8008674:	4630      	mov	r0, r6
 8008676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d907      	bls.n	8008690 <_fwalk_sglue+0x38>
 8008680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008684:	3301      	adds	r3, #1
 8008686:	d003      	beq.n	8008690 <_fwalk_sglue+0x38>
 8008688:	4629      	mov	r1, r5
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	4306      	orrs	r6, r0
 8008690:	3568      	adds	r5, #104	@ 0x68
 8008692:	e7e9      	b.n	8008668 <_fwalk_sglue+0x10>

08008694 <_puts_r>:
 8008694:	6a03      	ldr	r3, [r0, #32]
 8008696:	b570      	push	{r4, r5, r6, lr}
 8008698:	6884      	ldr	r4, [r0, #8]
 800869a:	4605      	mov	r5, r0
 800869c:	460e      	mov	r6, r1
 800869e:	b90b      	cbnz	r3, 80086a4 <_puts_r+0x10>
 80086a0:	f7ff ffc2 	bl	8008628 <__sinit>
 80086a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086a6:	07db      	lsls	r3, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_puts_r+0x22>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	0598      	lsls	r0, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_puts_r+0x22>
 80086b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b2:	f000 f9ae 	bl	8008a12 <__retarget_lock_acquire_recursive>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	0719      	lsls	r1, r3, #28
 80086ba:	d502      	bpl.n	80086c2 <_puts_r+0x2e>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d135      	bne.n	800872e <_puts_r+0x9a>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 f8c5 	bl	8008854 <__swsetup_r>
 80086ca:	b380      	cbz	r0, 800872e <_puts_r+0x9a>
 80086cc:	f04f 35ff 	mov.w	r5, #4294967295
 80086d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_puts_r+0x4e>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_puts_r+0x4e>
 80086dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086de:	f000 f999 	bl	8008a14 <__retarget_lock_release_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da04      	bge.n	80086f4 <_puts_r+0x60>
 80086ea:	69a2      	ldr	r2, [r4, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dc17      	bgt.n	8008720 <_puts_r+0x8c>
 80086f0:	290a      	cmp	r1, #10
 80086f2:	d015      	beq.n	8008720 <_puts_r+0x8c>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008702:	3b01      	subs	r3, #1
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	2900      	cmp	r1, #0
 8008708:	d1ed      	bne.n	80086e6 <_puts_r+0x52>
 800870a:	2b00      	cmp	r3, #0
 800870c:	da11      	bge.n	8008732 <_puts_r+0x9e>
 800870e:	4622      	mov	r2, r4
 8008710:	210a      	movs	r1, #10
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f85f 	bl	80087d6 <__swbuf_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d0d7      	beq.n	80086cc <_puts_r+0x38>
 800871c:	250a      	movs	r5, #10
 800871e:	e7d7      	b.n	80086d0 <_puts_r+0x3c>
 8008720:	4622      	mov	r2, r4
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f857 	bl	80087d6 <__swbuf_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d1e7      	bne.n	80086fc <_puts_r+0x68>
 800872c:	e7ce      	b.n	80086cc <_puts_r+0x38>
 800872e:	3e01      	subs	r6, #1
 8008730:	e7e4      	b.n	80086fc <_puts_r+0x68>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	220a      	movs	r2, #10
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e7ee      	b.n	800871c <_puts_r+0x88>
	...

08008740 <puts>:
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <puts+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7ff bfa5 	b.w	8008694 <_puts_r>
 800874a:	bf00      	nop
 800874c:	20000018 	.word	0x20000018

08008750 <__sread>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	f000 f8fc 	bl	8008954 <_read_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	bfab      	itete	ge
 8008760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008762:	89a3      	ldrhlt	r3, [r4, #12]
 8008764:	181b      	addge	r3, r3, r0
 8008766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800876a:	bfac      	ite	ge
 800876c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800876e:	81a3      	strhlt	r3, [r4, #12]
 8008770:	bd10      	pop	{r4, pc}

08008772 <__swrite>:
 8008772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	461f      	mov	r7, r3
 8008778:	898b      	ldrh	r3, [r1, #12]
 800877a:	05db      	lsls	r3, r3, #23
 800877c:	4605      	mov	r5, r0
 800877e:	460c      	mov	r4, r1
 8008780:	4616      	mov	r6, r2
 8008782:	d505      	bpl.n	8008790 <__swrite+0x1e>
 8008784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008788:	2302      	movs	r3, #2
 800878a:	2200      	movs	r2, #0
 800878c:	f000 f8d0 	bl	8008930 <_lseek_r>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	4628      	mov	r0, r5
 80087a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	f000 b8f7 	b.w	8008998 <_write_r>

080087aa <__sseek>:
 80087aa:	b510      	push	{r4, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b2:	f000 f8bd 	bl	8008930 <_lseek_r>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	bf15      	itete	ne
 80087bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087c6:	81a3      	strheq	r3, [r4, #12]
 80087c8:	bf18      	it	ne
 80087ca:	81a3      	strhne	r3, [r4, #12]
 80087cc:	bd10      	pop	{r4, pc}

080087ce <__sclose>:
 80087ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d2:	f000 b89d 	b.w	8008910 <_close_r>

080087d6 <__swbuf_r>:
 80087d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d8:	460e      	mov	r6, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	4605      	mov	r5, r0
 80087de:	b118      	cbz	r0, 80087e8 <__swbuf_r+0x12>
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b90b      	cbnz	r3, 80087e8 <__swbuf_r+0x12>
 80087e4:	f7ff ff20 	bl	8008628 <__sinit>
 80087e8:	69a3      	ldr	r3, [r4, #24]
 80087ea:	60a3      	str	r3, [r4, #8]
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	071a      	lsls	r2, r3, #28
 80087f0:	d501      	bpl.n	80087f6 <__swbuf_r+0x20>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b943      	cbnz	r3, 8008808 <__swbuf_r+0x32>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f82b 	bl	8008854 <__swsetup_r>
 80087fe:	b118      	cbz	r0, 8008808 <__swbuf_r+0x32>
 8008800:	f04f 37ff 	mov.w	r7, #4294967295
 8008804:	4638      	mov	r0, r7
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6922      	ldr	r2, [r4, #16]
 800880c:	1a98      	subs	r0, r3, r2
 800880e:	6963      	ldr	r3, [r4, #20]
 8008810:	b2f6      	uxtb	r6, r6
 8008812:	4283      	cmp	r3, r0
 8008814:	4637      	mov	r7, r6
 8008816:	dc05      	bgt.n	8008824 <__swbuf_r+0x4e>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f000 f9ca 	bl	8008bb4 <_fflush_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1ed      	bne.n	8008800 <__swbuf_r+0x2a>
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	701e      	strb	r6, [r3, #0]
 8008832:	6962      	ldr	r2, [r4, #20]
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	d004      	beq.n	8008844 <__swbuf_r+0x6e>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	07db      	lsls	r3, r3, #31
 800883e:	d5e1      	bpl.n	8008804 <__swbuf_r+0x2e>
 8008840:	2e0a      	cmp	r6, #10
 8008842:	d1df      	bne.n	8008804 <__swbuf_r+0x2e>
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	f000 f9b4 	bl	8008bb4 <_fflush_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0d9      	beq.n	8008804 <__swbuf_r+0x2e>
 8008850:	e7d6      	b.n	8008800 <__swbuf_r+0x2a>
	...

08008854 <__swsetup_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <__swsetup_r+0xa8>)
 8008858:	4605      	mov	r5, r0
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	460c      	mov	r4, r1
 800885e:	b118      	cbz	r0, 8008868 <__swsetup_r+0x14>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <__swsetup_r+0x14>
 8008864:	f7ff fee0 	bl	8008628 <__sinit>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	d422      	bmi.n	80088b6 <__swsetup_r+0x62>
 8008870:	06da      	lsls	r2, r3, #27
 8008872:	d407      	bmi.n	8008884 <__swsetup_r+0x30>
 8008874:	2209      	movs	r2, #9
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	e033      	b.n	80088ec <__swsetup_r+0x98>
 8008884:	0758      	lsls	r0, r3, #29
 8008886:	d512      	bpl.n	80088ae <__swsetup_r+0x5a>
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	b141      	cbz	r1, 800889e <__swsetup_r+0x4a>
 800888c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <__swsetup_r+0x46>
 8008894:	4628      	mov	r0, r5
 8008896:	f000 f8bf 	bl	8008a18 <_free_r>
 800889a:	2300      	movs	r3, #0
 800889c:	6363      	str	r3, [r4, #52]	@ 0x34
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f043 0308 	orr.w	r3, r3, #8
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b94b      	cbnz	r3, 80088ce <__swsetup_r+0x7a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c4:	d003      	beq.n	80088ce <__swsetup_r+0x7a>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 f9c1 	bl	8008c50 <__smakebuf_r>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f013 0201 	ands.w	r2, r3, #1
 80088d6:	d00a      	beq.n	80088ee <__swsetup_r+0x9a>
 80088d8:	2200      	movs	r2, #0
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	4252      	negs	r2, r2
 80088e0:	61a2      	str	r2, [r4, #24]
 80088e2:	6922      	ldr	r2, [r4, #16]
 80088e4:	b942      	cbnz	r2, 80088f8 <__swsetup_r+0xa4>
 80088e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088ea:	d1c5      	bne.n	8008878 <__swsetup_r+0x24>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	0799      	lsls	r1, r3, #30
 80088f0:	bf58      	it	pl
 80088f2:	6962      	ldrpl	r2, [r4, #20]
 80088f4:	60a2      	str	r2, [r4, #8]
 80088f6:	e7f4      	b.n	80088e2 <__swsetup_r+0x8e>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7f7      	b.n	80088ec <__swsetup_r+0x98>
 80088fc:	20000018 	.word	0x20000018

08008900 <memset>:
 8008900:	4402      	add	r2, r0
 8008902:	4603      	mov	r3, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	d100      	bne.n	800890a <memset+0xa>
 8008908:	4770      	bx	lr
 800890a:	f803 1b01 	strb.w	r1, [r3], #1
 800890e:	e7f9      	b.n	8008904 <memset+0x4>

08008910 <_close_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d06      	ldr	r5, [pc, #24]	@ (800892c <_close_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7fb fdb5 	bl	800448a <_close>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_close_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_close_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200004fc 	.word	0x200004fc

08008930 <_lseek_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	@ (8008950 <_lseek_r+0x20>)
 8008934:	4604      	mov	r4, r0
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	2200      	movs	r2, #0
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7fb fdca 	bl	80044d8 <_lseek>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_lseek_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_lseek_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	200004fc 	.word	0x200004fc

08008954 <_read_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	@ (8008974 <_read_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7fb fd58 	bl	8004418 <_read>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_read_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_read_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	200004fc 	.word	0x200004fc

08008978 <_sbrk_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d06      	ldr	r5, [pc, #24]	@ (8008994 <_sbrk_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7fb fdb6 	bl	80044f4 <_sbrk>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_sbrk_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_sbrk_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200004fc 	.word	0x200004fc

08008998 <_write_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	@ (80089b8 <_write_r+0x20>)
 800899c:	4604      	mov	r4, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7fb fd53 	bl	8004452 <_write>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_write_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_write_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200004fc 	.word	0x200004fc

080089bc <__errno>:
 80089bc:	4b01      	ldr	r3, [pc, #4]	@ (80089c4 <__errno+0x8>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000018 	.word	0x20000018

080089c8 <__libc_init_array>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008a00 <__libc_init_array+0x38>)
 80089cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008a04 <__libc_init_array+0x3c>)
 80089ce:	1b64      	subs	r4, r4, r5
 80089d0:	10a4      	asrs	r4, r4, #2
 80089d2:	2600      	movs	r6, #0
 80089d4:	42a6      	cmp	r6, r4
 80089d6:	d109      	bne.n	80089ec <__libc_init_array+0x24>
 80089d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008a08 <__libc_init_array+0x40>)
 80089da:	4c0c      	ldr	r4, [pc, #48]	@ (8008a0c <__libc_init_array+0x44>)
 80089dc:	f002 fe18 	bl	800b610 <_init>
 80089e0:	1b64      	subs	r4, r4, r5
 80089e2:	10a4      	asrs	r4, r4, #2
 80089e4:	2600      	movs	r6, #0
 80089e6:	42a6      	cmp	r6, r4
 80089e8:	d105      	bne.n	80089f6 <__libc_init_array+0x2e>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f0:	4798      	blx	r3
 80089f2:	3601      	adds	r6, #1
 80089f4:	e7ee      	b.n	80089d4 <__libc_init_array+0xc>
 80089f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fa:	4798      	blx	r3
 80089fc:	3601      	adds	r6, #1
 80089fe:	e7f2      	b.n	80089e6 <__libc_init_array+0x1e>
 8008a00:	0800b8f8 	.word	0x0800b8f8
 8008a04:	0800b8f8 	.word	0x0800b8f8
 8008a08:	0800b8f8 	.word	0x0800b8f8
 8008a0c:	0800b8fc 	.word	0x0800b8fc

08008a10 <__retarget_lock_init_recursive>:
 8008a10:	4770      	bx	lr

08008a12 <__retarget_lock_acquire_recursive>:
 8008a12:	4770      	bx	lr

08008a14 <__retarget_lock_release_recursive>:
 8008a14:	4770      	bx	lr
	...

08008a18 <_free_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d041      	beq.n	8008aa4 <_free_r+0x8c>
 8008a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a24:	1f0c      	subs	r4, r1, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfb8      	it	lt
 8008a2a:	18e4      	addlt	r4, r4, r3
 8008a2c:	f7ff fd64 	bl	80084f8 <__malloc_lock>
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <_free_r+0x90>)
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b933      	cbnz	r3, 8008a44 <_free_r+0x2c>
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a40:	f7ff bd60 	b.w	8008504 <__malloc_unlock>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d908      	bls.n	8008a5a <_free_r+0x42>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	1821      	adds	r1, r4, r0
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf01      	itttt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	1809      	addeq	r1, r1, r0
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	e7ed      	b.n	8008a36 <_free_r+0x1e>
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b10b      	cbz	r3, 8008a64 <_free_r+0x4c>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d9fa      	bls.n	8008a5a <_free_r+0x42>
 8008a64:	6811      	ldr	r1, [r2, #0]
 8008a66:	1850      	adds	r0, r2, r1
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d10b      	bne.n	8008a84 <_free_r+0x6c>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	4401      	add	r1, r0
 8008a70:	1850      	adds	r0, r2, r1
 8008a72:	4283      	cmp	r3, r0
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	d1e0      	bne.n	8008a3a <_free_r+0x22>
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	6053      	str	r3, [r2, #4]
 8008a7e:	4408      	add	r0, r1
 8008a80:	6010      	str	r0, [r2, #0]
 8008a82:	e7da      	b.n	8008a3a <_free_r+0x22>
 8008a84:	d902      	bls.n	8008a8c <_free_r+0x74>
 8008a86:	230c      	movs	r3, #12
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	e7d6      	b.n	8008a3a <_free_r+0x22>
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	1821      	adds	r1, r4, r0
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf04      	itt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	bf04      	itt	eq
 8008a9c:	1809      	addeq	r1, r1, r0
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	6054      	str	r4, [r2, #4]
 8008aa2:	e7ca      	b.n	8008a3a <_free_r+0x22>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200003bc 	.word	0x200003bc

08008aac <__sflush_r>:
 8008aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	0716      	lsls	r6, r2, #28
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	d454      	bmi.n	8008b66 <__sflush_r+0xba>
 8008abc:	684b      	ldr	r3, [r1, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dc02      	bgt.n	8008ac8 <__sflush_r+0x1c>
 8008ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dd48      	ble.n	8008b5a <__sflush_r+0xae>
 8008ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d045      	beq.n	8008b5a <__sflush_r+0xae>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ad4:	682f      	ldr	r7, [r5, #0]
 8008ad6:	6a21      	ldr	r1, [r4, #32]
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	d030      	beq.n	8008b3e <__sflush_r+0x92>
 8008adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	0759      	lsls	r1, r3, #29
 8008ae2:	d505      	bpl.n	8008af0 <__sflush_r+0x44>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aea:	b10b      	cbz	r3, 8008af0 <__sflush_r+0x44>
 8008aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	2300      	movs	r3, #0
 8008af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af4:	6a21      	ldr	r1, [r4, #32]
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b0      	blx	r6
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	d106      	bne.n	8008b0e <__sflush_r+0x62>
 8008b00:	6829      	ldr	r1, [r5, #0]
 8008b02:	291d      	cmp	r1, #29
 8008b04:	d82b      	bhi.n	8008b5e <__sflush_r+0xb2>
 8008b06:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <__sflush_r+0x104>)
 8008b08:	410a      	asrs	r2, r1
 8008b0a:	07d6      	lsls	r6, r2, #31
 8008b0c:	d427      	bmi.n	8008b5e <__sflush_r+0xb2>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	6062      	str	r2, [r4, #4]
 8008b12:	04d9      	lsls	r1, r3, #19
 8008b14:	6922      	ldr	r2, [r4, #16]
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	d504      	bpl.n	8008b24 <__sflush_r+0x78>
 8008b1a:	1c42      	adds	r2, r0, #1
 8008b1c:	d101      	bne.n	8008b22 <__sflush_r+0x76>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b903      	cbnz	r3, 8008b24 <__sflush_r+0x78>
 8008b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b26:	602f      	str	r7, [r5, #0]
 8008b28:	b1b9      	cbz	r1, 8008b5a <__sflush_r+0xae>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d002      	beq.n	8008b38 <__sflush_r+0x8c>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7ff ff70 	bl	8008a18 <_free_r>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b3c:	e00d      	b.n	8008b5a <__sflush_r+0xae>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b0      	blx	r6
 8008b44:	4602      	mov	r2, r0
 8008b46:	1c50      	adds	r0, r2, #1
 8008b48:	d1c9      	bne.n	8008ade <__sflush_r+0x32>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0c6      	beq.n	8008ade <__sflush_r+0x32>
 8008b50:	2b1d      	cmp	r3, #29
 8008b52:	d001      	beq.n	8008b58 <__sflush_r+0xac>
 8008b54:	2b16      	cmp	r3, #22
 8008b56:	d11e      	bne.n	8008b96 <__sflush_r+0xea>
 8008b58:	602f      	str	r7, [r5, #0]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e022      	b.n	8008ba4 <__sflush_r+0xf8>
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	e01b      	b.n	8008b9e <__sflush_r+0xf2>
 8008b66:	690f      	ldr	r7, [r1, #16]
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	d0f6      	beq.n	8008b5a <__sflush_r+0xae>
 8008b6c:	0793      	lsls	r3, r2, #30
 8008b6e:	680e      	ldr	r6, [r1, #0]
 8008b70:	bf08      	it	eq
 8008b72:	694b      	ldreq	r3, [r1, #20]
 8008b74:	600f      	str	r7, [r1, #0]
 8008b76:	bf18      	it	ne
 8008b78:	2300      	movne	r3, #0
 8008b7a:	eba6 0807 	sub.w	r8, r6, r7
 8008b7e:	608b      	str	r3, [r1, #8]
 8008b80:	f1b8 0f00 	cmp.w	r8, #0
 8008b84:	dde9      	ble.n	8008b5a <__sflush_r+0xae>
 8008b86:	6a21      	ldr	r1, [r4, #32]
 8008b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b8a:	4643      	mov	r3, r8
 8008b8c:	463a      	mov	r2, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b0      	blx	r6
 8008b92:	2800      	cmp	r0, #0
 8008b94:	dc08      	bgt.n	8008ba8 <__sflush_r+0xfc>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	4407      	add	r7, r0
 8008baa:	eba8 0800 	sub.w	r8, r8, r0
 8008bae:	e7e7      	b.n	8008b80 <__sflush_r+0xd4>
 8008bb0:	dfbffffe 	.word	0xdfbffffe

08008bb4 <_fflush_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	690b      	ldr	r3, [r1, #16]
 8008bb8:	4605      	mov	r5, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	b913      	cbnz	r3, 8008bc4 <_fflush_r+0x10>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	b118      	cbz	r0, 8008bce <_fflush_r+0x1a>
 8008bc6:	6a03      	ldr	r3, [r0, #32]
 8008bc8:	b90b      	cbnz	r3, 8008bce <_fflush_r+0x1a>
 8008bca:	f7ff fd2d 	bl	8008628 <__sinit>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f3      	beq.n	8008bbe <_fflush_r+0xa>
 8008bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bd8:	07d0      	lsls	r0, r2, #31
 8008bda:	d404      	bmi.n	8008be6 <_fflush_r+0x32>
 8008bdc:	0599      	lsls	r1, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_fflush_r+0x32>
 8008be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be2:	f7ff ff16 	bl	8008a12 <__retarget_lock_acquire_recursive>
 8008be6:	4628      	mov	r0, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7ff ff5f 	bl	8008aac <__sflush_r>
 8008bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf0:	07da      	lsls	r2, r3, #31
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	d4e4      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	059b      	lsls	r3, r3, #22
 8008bfa:	d4e1      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bfe:	f7ff ff09 	bl	8008a14 <__retarget_lock_release_recursive>
 8008c02:	e7dd      	b.n	8008bc0 <_fflush_r+0xc>

08008c04 <__swhatbuf_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	b096      	sub	sp, #88	@ 0x58
 8008c10:	4615      	mov	r5, r2
 8008c12:	461e      	mov	r6, r3
 8008c14:	da0d      	bge.n	8008c32 <__swhatbuf_r+0x2e>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c1c:	f04f 0100 	mov.w	r1, #0
 8008c20:	bf14      	ite	ne
 8008c22:	2340      	movne	r3, #64	@ 0x40
 8008c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c28:	2000      	movs	r0, #0
 8008c2a:	6031      	str	r1, [r6, #0]
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	b016      	add	sp, #88	@ 0x58
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	466a      	mov	r2, sp
 8008c34:	f000 f848 	bl	8008cc8 <_fstat_r>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dbec      	blt.n	8008c16 <__swhatbuf_r+0x12>
 8008c3c:	9901      	ldr	r1, [sp, #4]
 8008c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c46:	4259      	negs	r1, r3
 8008c48:	4159      	adcs	r1, r3
 8008c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c4e:	e7eb      	b.n	8008c28 <__swhatbuf_r+0x24>

08008c50 <__smakebuf_r>:
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c54:	079d      	lsls	r5, r3, #30
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d507      	bpl.n	8008c6c <__smakebuf_r+0x1c>
 8008c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2301      	movs	r3, #1
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	b003      	add	sp, #12
 8008c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	f7ff ffc8 	bl	8008c04 <__swhatbuf_r>
 8008c74:	9f00      	ldr	r7, [sp, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff fbbc 	bl	80083f8 <_malloc_r>
 8008c80:	b948      	cbnz	r0, 8008c96 <__smakebuf_r+0x46>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	059a      	lsls	r2, r3, #22
 8008c88:	d4ee      	bmi.n	8008c68 <__smakebuf_r+0x18>
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0302 	orr.w	r3, r3, #2
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	e7e2      	b.n	8008c5c <__smakebuf_r+0xc>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	6020      	str	r0, [r4, #0]
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ca6:	b15b      	cbz	r3, 8008cc0 <__smakebuf_r+0x70>
 8008ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 f81d 	bl	8008cec <_isatty_r>
 8008cb2:	b128      	cbz	r0, 8008cc0 <__smakebuf_r+0x70>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	f043 0301 	orr.w	r3, r3, #1
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	431d      	orrs	r5, r3
 8008cc4:	81a5      	strh	r5, [r4, #12]
 8008cc6:	e7cf      	b.n	8008c68 <__smakebuf_r+0x18>

08008cc8 <_fstat_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	@ (8008ce8 <_fstat_r+0x20>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f7fb fbe4 	bl	80044a2 <_fstat>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d102      	bne.n	8008ce4 <_fstat_r+0x1c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b103      	cbz	r3, 8008ce4 <_fstat_r+0x1c>
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200004fc 	.word	0x200004fc

08008cec <_isatty_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	@ (8008d08 <_isatty_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7fb fbe3 	bl	80044c2 <_isatty>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_isatty_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_isatty_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	200004fc 	.word	0x200004fc

08008d0c <acos>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	ed2d 8b02 	vpush	{d8}
 8008d12:	ec55 4b10 	vmov	r4, r5, d0
 8008d16:	f000 fbef 	bl	80094f8 <__ieee754_acos>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	eeb0 8a40 	vmov.f32	s16, s0
 8008d26:	eef0 8a60 	vmov.f32	s17, s1
 8008d2a:	f7f7 fec3 	bl	8000ab4 <__aeabi_dcmpun>
 8008d2e:	b9a8      	cbnz	r0, 8008d5c <acos+0x50>
 8008d30:	ec45 4b10 	vmov	d0, r4, r5
 8008d34:	f000 f910 	bl	8008f58 <fabs>
 8008d38:	4b0c      	ldr	r3, [pc, #48]	@ (8008d6c <acos+0x60>)
 8008d3a:	ec51 0b10 	vmov	r0, r1, d0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f7f7 feae 	bl	8000aa0 <__aeabi_dcmpgt>
 8008d44:	b150      	cbz	r0, 8008d5c <acos+0x50>
 8008d46:	f7ff fe39 	bl	80089bc <__errno>
 8008d4a:	ecbd 8b02 	vpop	{d8}
 8008d4e:	2321      	movs	r3, #33	@ 0x21
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d56:	4806      	ldr	r0, [pc, #24]	@ (8008d70 <acos+0x64>)
 8008d58:	f000 b966 	b.w	8009028 <nan>
 8008d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d60:	eef0 0a68 	vmov.f32	s1, s17
 8008d64:	ecbd 8b02 	vpop	{d8}
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
 8008d6a:	bf00      	nop
 8008d6c:	3ff00000 	.word	0x3ff00000
 8008d70:	0800b670 	.word	0x0800b670

08008d74 <atan2>:
 8008d74:	f000 be1c 	b.w	80099b0 <__ieee754_atan2>

08008d78 <pow>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	ed2d 8b02 	vpush	{d8}
 8008d7e:	eeb0 8a40 	vmov.f32	s16, s0
 8008d82:	eef0 8a60 	vmov.f32	s17, s1
 8008d86:	ec55 4b11 	vmov	r4, r5, d1
 8008d8a:	f000 fed9 	bl	8009b40 <__ieee754_pow>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	462b      	mov	r3, r5
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	ec57 6b10 	vmov	r6, r7, d0
 8008d9a:	f7f7 fe8b 	bl	8000ab4 <__aeabi_dcmpun>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d13b      	bne.n	8008e1a <pow+0xa2>
 8008da2:	ec51 0b18 	vmov	r0, r1, d8
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	f7f7 fe51 	bl	8000a50 <__aeabi_dcmpeq>
 8008dae:	b1b8      	cbz	r0, 8008de0 <pow+0x68>
 8008db0:	2200      	movs	r2, #0
 8008db2:	2300      	movs	r3, #0
 8008db4:	4620      	mov	r0, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fe4a 	bl	8000a50 <__aeabi_dcmpeq>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d146      	bne.n	8008e4e <pow+0xd6>
 8008dc0:	ec45 4b10 	vmov	d0, r4, r5
 8008dc4:	f000 f924 	bl	8009010 <finite>
 8008dc8:	b338      	cbz	r0, 8008e1a <pow+0xa2>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fe47 	bl	8000a64 <__aeabi_dcmplt>
 8008dd6:	b300      	cbz	r0, 8008e1a <pow+0xa2>
 8008dd8:	f7ff fdf0 	bl	80089bc <__errno>
 8008ddc:	2322      	movs	r3, #34	@ 0x22
 8008dde:	e01b      	b.n	8008e18 <pow+0xa0>
 8008de0:	ec47 6b10 	vmov	d0, r6, r7
 8008de4:	f000 f914 	bl	8009010 <finite>
 8008de8:	b9e0      	cbnz	r0, 8008e24 <pow+0xac>
 8008dea:	eeb0 0a48 	vmov.f32	s0, s16
 8008dee:	eef0 0a68 	vmov.f32	s1, s17
 8008df2:	f000 f90d 	bl	8009010 <finite>
 8008df6:	b1a8      	cbz	r0, 8008e24 <pow+0xac>
 8008df8:	ec45 4b10 	vmov	d0, r4, r5
 8008dfc:	f000 f908 	bl	8009010 <finite>
 8008e00:	b180      	cbz	r0, 8008e24 <pow+0xac>
 8008e02:	4632      	mov	r2, r6
 8008e04:	463b      	mov	r3, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fe53 	bl	8000ab4 <__aeabi_dcmpun>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0e2      	beq.n	8008dd8 <pow+0x60>
 8008e12:	f7ff fdd3 	bl	80089bc <__errno>
 8008e16:	2321      	movs	r3, #33	@ 0x21
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	ecbd 8b02 	vpop	{d8}
 8008e1e:	ec47 6b10 	vmov	d0, r6, r7
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	2200      	movs	r2, #0
 8008e26:	2300      	movs	r3, #0
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fe10 	bl	8000a50 <__aeabi_dcmpeq>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0f2      	beq.n	8008e1a <pow+0xa2>
 8008e34:	eeb0 0a48 	vmov.f32	s0, s16
 8008e38:	eef0 0a68 	vmov.f32	s1, s17
 8008e3c:	f000 f8e8 	bl	8009010 <finite>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0ea      	beq.n	8008e1a <pow+0xa2>
 8008e44:	ec45 4b10 	vmov	d0, r4, r5
 8008e48:	f000 f8e2 	bl	8009010 <finite>
 8008e4c:	e7c3      	b.n	8008dd6 <pow+0x5e>
 8008e4e:	4f01      	ldr	r7, [pc, #4]	@ (8008e54 <pow+0xdc>)
 8008e50:	2600      	movs	r6, #0
 8008e52:	e7e2      	b.n	8008e1a <pow+0xa2>
 8008e54:	3ff00000 	.word	0x3ff00000

08008e58 <sqrt>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	ed2d 8b02 	vpush	{d8}
 8008e5e:	ec55 4b10 	vmov	r4, r5, d0
 8008e62:	f000 f8e9 	bl	8009038 <__ieee754_sqrt>
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	eeb0 8a40 	vmov.f32	s16, s0
 8008e72:	eef0 8a60 	vmov.f32	s17, s1
 8008e76:	f7f7 fe1d 	bl	8000ab4 <__aeabi_dcmpun>
 8008e7a:	b990      	cbnz	r0, 8008ea2 <sqrt+0x4a>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fdee 	bl	8000a64 <__aeabi_dcmplt>
 8008e88:	b158      	cbz	r0, 8008ea2 <sqrt+0x4a>
 8008e8a:	f7ff fd97 	bl	80089bc <__errno>
 8008e8e:	2321      	movs	r3, #33	@ 0x21
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	2300      	movs	r3, #0
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f7f7 fc9b 	bl	80007d4 <__aeabi_ddiv>
 8008e9e:	ec41 0b18 	vmov	d8, r0, r1
 8008ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ea6:	eef0 0a68 	vmov.f32	s1, s17
 8008eaa:	ecbd 8b02 	vpop	{d8}
 8008eae:	bd38      	pop	{r3, r4, r5, pc}

08008eb0 <cos>:
 8008eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eb2:	ec53 2b10 	vmov	r2, r3, d0
 8008eb6:	4826      	ldr	r0, [pc, #152]	@ (8008f50 <cos+0xa0>)
 8008eb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ebc:	4281      	cmp	r1, r0
 8008ebe:	d806      	bhi.n	8008ece <cos+0x1e>
 8008ec0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008f48 <cos+0x98>
 8008ec4:	b005      	add	sp, #20
 8008ec6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eca:	f000 b991 	b.w	80091f0 <__kernel_cos>
 8008ece:	4821      	ldr	r0, [pc, #132]	@ (8008f54 <cos+0xa4>)
 8008ed0:	4281      	cmp	r1, r0
 8008ed2:	d908      	bls.n	8008ee6 <cos+0x36>
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	f7f7 f99a 	bl	8000210 <__aeabi_dsub>
 8008edc:	ec41 0b10 	vmov	d0, r0, r1
 8008ee0:	b005      	add	sp, #20
 8008ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ee6:	4668      	mov	r0, sp
 8008ee8:	f001 fb6e 	bl	800a5c8 <__ieee754_rem_pio2>
 8008eec:	f000 0003 	and.w	r0, r0, #3
 8008ef0:	2801      	cmp	r0, #1
 8008ef2:	d00b      	beq.n	8008f0c <cos+0x5c>
 8008ef4:	2802      	cmp	r0, #2
 8008ef6:	d015      	beq.n	8008f24 <cos+0x74>
 8008ef8:	b9d8      	cbnz	r0, 8008f32 <cos+0x82>
 8008efa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008efe:	ed9d 0b00 	vldr	d0, [sp]
 8008f02:	f000 f975 	bl	80091f0 <__kernel_cos>
 8008f06:	ec51 0b10 	vmov	r0, r1, d0
 8008f0a:	e7e7      	b.n	8008edc <cos+0x2c>
 8008f0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f10:	ed9d 0b00 	vldr	d0, [sp]
 8008f14:	f000 fa34 	bl	8009380 <__kernel_sin>
 8008f18:	ec53 2b10 	vmov	r2, r3, d0
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008f22:	e7db      	b.n	8008edc <cos+0x2c>
 8008f24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f28:	ed9d 0b00 	vldr	d0, [sp]
 8008f2c:	f000 f960 	bl	80091f0 <__kernel_cos>
 8008f30:	e7f2      	b.n	8008f18 <cos+0x68>
 8008f32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f36:	ed9d 0b00 	vldr	d0, [sp]
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	f000 fa20 	bl	8009380 <__kernel_sin>
 8008f40:	e7e1      	b.n	8008f06 <cos+0x56>
 8008f42:	bf00      	nop
 8008f44:	f3af 8000 	nop.w
	...
 8008f50:	3fe921fb 	.word	0x3fe921fb
 8008f54:	7fefffff 	.word	0x7fefffff

08008f58 <fabs>:
 8008f58:	ec51 0b10 	vmov	r0, r1, d0
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008f62:	ec43 2b10 	vmov	d0, r2, r3
 8008f66:	4770      	bx	lr

08008f68 <sin>:
 8008f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f6a:	ec53 2b10 	vmov	r2, r3, d0
 8008f6e:	4826      	ldr	r0, [pc, #152]	@ (8009008 <sin+0xa0>)
 8008f70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f74:	4281      	cmp	r1, r0
 8008f76:	d807      	bhi.n	8008f88 <sin+0x20>
 8008f78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009000 <sin+0x98>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	b005      	add	sp, #20
 8008f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f84:	f000 b9fc 	b.w	8009380 <__kernel_sin>
 8008f88:	4820      	ldr	r0, [pc, #128]	@ (800900c <sin+0xa4>)
 8008f8a:	4281      	cmp	r1, r0
 8008f8c:	d908      	bls.n	8008fa0 <sin+0x38>
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	f7f7 f93d 	bl	8000210 <__aeabi_dsub>
 8008f96:	ec41 0b10 	vmov	d0, r0, r1
 8008f9a:	b005      	add	sp, #20
 8008f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fa0:	4668      	mov	r0, sp
 8008fa2:	f001 fb11 	bl	800a5c8 <__ieee754_rem_pio2>
 8008fa6:	f000 0003 	and.w	r0, r0, #3
 8008faa:	2801      	cmp	r0, #1
 8008fac:	d00c      	beq.n	8008fc8 <sin+0x60>
 8008fae:	2802      	cmp	r0, #2
 8008fb0:	d011      	beq.n	8008fd6 <sin+0x6e>
 8008fb2:	b9e8      	cbnz	r0, 8008ff0 <sin+0x88>
 8008fb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fb8:	ed9d 0b00 	vldr	d0, [sp]
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f000 f9df 	bl	8009380 <__kernel_sin>
 8008fc2:	ec51 0b10 	vmov	r0, r1, d0
 8008fc6:	e7e6      	b.n	8008f96 <sin+0x2e>
 8008fc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fcc:	ed9d 0b00 	vldr	d0, [sp]
 8008fd0:	f000 f90e 	bl	80091f0 <__kernel_cos>
 8008fd4:	e7f5      	b.n	8008fc2 <sin+0x5a>
 8008fd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fda:	ed9d 0b00 	vldr	d0, [sp]
 8008fde:	2001      	movs	r0, #1
 8008fe0:	f000 f9ce 	bl	8009380 <__kernel_sin>
 8008fe4:	ec53 2b10 	vmov	r2, r3, d0
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008fee:	e7d2      	b.n	8008f96 <sin+0x2e>
 8008ff0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ff4:	ed9d 0b00 	vldr	d0, [sp]
 8008ff8:	f000 f8fa 	bl	80091f0 <__kernel_cos>
 8008ffc:	e7f2      	b.n	8008fe4 <sin+0x7c>
 8008ffe:	bf00      	nop
	...
 8009008:	3fe921fb 	.word	0x3fe921fb
 800900c:	7fefffff 	.word	0x7fefffff

08009010 <finite>:
 8009010:	b082      	sub	sp, #8
 8009012:	ed8d 0b00 	vstr	d0, [sp]
 8009016:	9801      	ldr	r0, [sp, #4]
 8009018:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800901c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009020:	0fc0      	lsrs	r0, r0, #31
 8009022:	b002      	add	sp, #8
 8009024:	4770      	bx	lr
	...

08009028 <nan>:
 8009028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009030 <nan+0x8>
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	00000000 	.word	0x00000000
 8009034:	7ff80000 	.word	0x7ff80000

08009038 <__ieee754_sqrt>:
 8009038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	4a68      	ldr	r2, [pc, #416]	@ (80091e0 <__ieee754_sqrt+0x1a8>)
 800903e:	ec55 4b10 	vmov	r4, r5, d0
 8009042:	43aa      	bics	r2, r5
 8009044:	462b      	mov	r3, r5
 8009046:	4621      	mov	r1, r4
 8009048:	d110      	bne.n	800906c <__ieee754_sqrt+0x34>
 800904a:	4622      	mov	r2, r4
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 fa96 	bl	8000580 <__aeabi_dmul>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 f8da 	bl	8000214 <__adddf3>
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	ec45 4b10 	vmov	d0, r4, r5
 8009068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	2d00      	cmp	r5, #0
 800906e:	dc0e      	bgt.n	800908e <__ieee754_sqrt+0x56>
 8009070:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009074:	4322      	orrs	r2, r4
 8009076:	d0f5      	beq.n	8009064 <__ieee754_sqrt+0x2c>
 8009078:	b19d      	cbz	r5, 80090a2 <__ieee754_sqrt+0x6a>
 800907a:	4622      	mov	r2, r4
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 f8c6 	bl	8000210 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	f7f7 fba4 	bl	80007d4 <__aeabi_ddiv>
 800908c:	e7e8      	b.n	8009060 <__ieee754_sqrt+0x28>
 800908e:	152a      	asrs	r2, r5, #20
 8009090:	d115      	bne.n	80090be <__ieee754_sqrt+0x86>
 8009092:	2000      	movs	r0, #0
 8009094:	e009      	b.n	80090aa <__ieee754_sqrt+0x72>
 8009096:	0acb      	lsrs	r3, r1, #11
 8009098:	3a15      	subs	r2, #21
 800909a:	0549      	lsls	r1, r1, #21
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0fa      	beq.n	8009096 <__ieee754_sqrt+0x5e>
 80090a0:	e7f7      	b.n	8009092 <__ieee754_sqrt+0x5a>
 80090a2:	462a      	mov	r2, r5
 80090a4:	e7fa      	b.n	800909c <__ieee754_sqrt+0x64>
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	3001      	adds	r0, #1
 80090aa:	02dc      	lsls	r4, r3, #11
 80090ac:	d5fb      	bpl.n	80090a6 <__ieee754_sqrt+0x6e>
 80090ae:	1e44      	subs	r4, r0, #1
 80090b0:	1b12      	subs	r2, r2, r4
 80090b2:	f1c0 0420 	rsb	r4, r0, #32
 80090b6:	fa21 f404 	lsr.w	r4, r1, r4
 80090ba:	4323      	orrs	r3, r4
 80090bc:	4081      	lsls	r1, r0
 80090be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80090c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ca:	07d2      	lsls	r2, r2, #31
 80090cc:	bf5c      	itt	pl
 80090ce:	005b      	lslpl	r3, r3, #1
 80090d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80090d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090d8:	bf58      	it	pl
 80090da:	0049      	lslpl	r1, r1, #1
 80090dc:	2600      	movs	r6, #0
 80090de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80090e2:	106d      	asrs	r5, r5, #1
 80090e4:	0049      	lsls	r1, r1, #1
 80090e6:	2016      	movs	r0, #22
 80090e8:	4632      	mov	r2, r6
 80090ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80090ee:	1917      	adds	r7, r2, r4
 80090f0:	429f      	cmp	r7, r3
 80090f2:	bfde      	ittt	le
 80090f4:	193a      	addle	r2, r7, r4
 80090f6:	1bdb      	suble	r3, r3, r7
 80090f8:	1936      	addle	r6, r6, r4
 80090fa:	0fcf      	lsrs	r7, r1, #31
 80090fc:	3801      	subs	r0, #1
 80090fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009102:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009106:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800910a:	d1f0      	bne.n	80090ee <__ieee754_sqrt+0xb6>
 800910c:	4604      	mov	r4, r0
 800910e:	2720      	movs	r7, #32
 8009110:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009114:	429a      	cmp	r2, r3
 8009116:	eb00 0e0c 	add.w	lr, r0, ip
 800911a:	db02      	blt.n	8009122 <__ieee754_sqrt+0xea>
 800911c:	d113      	bne.n	8009146 <__ieee754_sqrt+0x10e>
 800911e:	458e      	cmp	lr, r1
 8009120:	d811      	bhi.n	8009146 <__ieee754_sqrt+0x10e>
 8009122:	f1be 0f00 	cmp.w	lr, #0
 8009126:	eb0e 000c 	add.w	r0, lr, ip
 800912a:	da42      	bge.n	80091b2 <__ieee754_sqrt+0x17a>
 800912c:	2800      	cmp	r0, #0
 800912e:	db40      	blt.n	80091b2 <__ieee754_sqrt+0x17a>
 8009130:	f102 0801 	add.w	r8, r2, #1
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	458e      	cmp	lr, r1
 8009138:	bf88      	it	hi
 800913a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800913e:	eba1 010e 	sub.w	r1, r1, lr
 8009142:	4464      	add	r4, ip
 8009144:	4642      	mov	r2, r8
 8009146:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800914a:	3f01      	subs	r7, #1
 800914c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009150:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009154:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009158:	d1dc      	bne.n	8009114 <__ieee754_sqrt+0xdc>
 800915a:	4319      	orrs	r1, r3
 800915c:	d01b      	beq.n	8009196 <__ieee754_sqrt+0x15e>
 800915e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80091e4 <__ieee754_sqrt+0x1ac>
 8009162:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80091e8 <__ieee754_sqrt+0x1b0>
 8009166:	e9da 0100 	ldrd	r0, r1, [sl]
 800916a:	e9db 2300 	ldrd	r2, r3, [fp]
 800916e:	f7f7 f84f 	bl	8000210 <__aeabi_dsub>
 8009172:	e9da 8900 	ldrd	r8, r9, [sl]
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fc7b 	bl	8000a78 <__aeabi_dcmple>
 8009182:	b140      	cbz	r0, 8009196 <__ieee754_sqrt+0x15e>
 8009184:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009188:	e9da 0100 	ldrd	r0, r1, [sl]
 800918c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009190:	d111      	bne.n	80091b6 <__ieee754_sqrt+0x17e>
 8009192:	3601      	adds	r6, #1
 8009194:	463c      	mov	r4, r7
 8009196:	1072      	asrs	r2, r6, #1
 8009198:	0863      	lsrs	r3, r4, #1
 800919a:	07f1      	lsls	r1, r6, #31
 800919c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80091a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80091a4:	bf48      	it	mi
 80091a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80091aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80091ae:	4618      	mov	r0, r3
 80091b0:	e756      	b.n	8009060 <__ieee754_sqrt+0x28>
 80091b2:	4690      	mov	r8, r2
 80091b4:	e7be      	b.n	8009134 <__ieee754_sqrt+0xfc>
 80091b6:	f7f7 f82d 	bl	8000214 <__adddf3>
 80091ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fc4d 	bl	8000a64 <__aeabi_dcmplt>
 80091ca:	b120      	cbz	r0, 80091d6 <__ieee754_sqrt+0x19e>
 80091cc:	1ca0      	adds	r0, r4, #2
 80091ce:	bf08      	it	eq
 80091d0:	3601      	addeq	r6, #1
 80091d2:	3402      	adds	r4, #2
 80091d4:	e7df      	b.n	8009196 <__ieee754_sqrt+0x15e>
 80091d6:	1c63      	adds	r3, r4, #1
 80091d8:	f023 0401 	bic.w	r4, r3, #1
 80091dc:	e7db      	b.n	8009196 <__ieee754_sqrt+0x15e>
 80091de:	bf00      	nop
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	20000070 	.word	0x20000070
 80091e8:	20000068 	.word	0x20000068
 80091ec:	00000000 	.word	0x00000000

080091f0 <__kernel_cos>:
 80091f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ec57 6b10 	vmov	r6, r7, d0
 80091f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80091fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009200:	ed8d 1b00 	vstr	d1, [sp]
 8009204:	d206      	bcs.n	8009214 <__kernel_cos+0x24>
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	f7f7 fc69 	bl	8000ae0 <__aeabi_d2iz>
 800920e:	2800      	cmp	r0, #0
 8009210:	f000 8088 	beq.w	8009324 <__kernel_cos+0x134>
 8009214:	4632      	mov	r2, r6
 8009216:	463b      	mov	r3, r7
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 f9b0 	bl	8000580 <__aeabi_dmul>
 8009220:	4b51      	ldr	r3, [pc, #324]	@ (8009368 <__kernel_cos+0x178>)
 8009222:	2200      	movs	r2, #0
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 f9aa 	bl	8000580 <__aeabi_dmul>
 800922c:	a340      	add	r3, pc, #256	@ (adr r3, 8009330 <__kernel_cos+0x140>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	4682      	mov	sl, r0
 8009234:	468b      	mov	fp, r1
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 f9a1 	bl	8000580 <__aeabi_dmul>
 800923e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009338 <__kernel_cos+0x148>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffe6 	bl	8000214 <__adddf3>
 8009248:	4622      	mov	r2, r4
 800924a:	462b      	mov	r3, r5
 800924c:	f7f7 f998 	bl	8000580 <__aeabi_dmul>
 8009250:	a33b      	add	r3, pc, #236	@ (adr r3, 8009340 <__kernel_cos+0x150>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f6 ffdb 	bl	8000210 <__aeabi_dsub>
 800925a:	4622      	mov	r2, r4
 800925c:	462b      	mov	r3, r5
 800925e:	f7f7 f98f 	bl	8000580 <__aeabi_dmul>
 8009262:	a339      	add	r3, pc, #228	@ (adr r3, 8009348 <__kernel_cos+0x158>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f6 ffd4 	bl	8000214 <__adddf3>
 800926c:	4622      	mov	r2, r4
 800926e:	462b      	mov	r3, r5
 8009270:	f7f7 f986 	bl	8000580 <__aeabi_dmul>
 8009274:	a336      	add	r3, pc, #216	@ (adr r3, 8009350 <__kernel_cos+0x160>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f6 ffc9 	bl	8000210 <__aeabi_dsub>
 800927e:	4622      	mov	r2, r4
 8009280:	462b      	mov	r3, r5
 8009282:	f7f7 f97d 	bl	8000580 <__aeabi_dmul>
 8009286:	a334      	add	r3, pc, #208	@ (adr r3, 8009358 <__kernel_cos+0x168>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f6 ffc2 	bl	8000214 <__adddf3>
 8009290:	4622      	mov	r2, r4
 8009292:	462b      	mov	r3, r5
 8009294:	f7f7 f974 	bl	8000580 <__aeabi_dmul>
 8009298:	4622      	mov	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f7f7 f970 	bl	8000580 <__aeabi_dmul>
 80092a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092a4:	4604      	mov	r4, r0
 80092a6:	460d      	mov	r5, r1
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	f7f7 f968 	bl	8000580 <__aeabi_dmul>
 80092b0:	460b      	mov	r3, r1
 80092b2:	4602      	mov	r2, r0
 80092b4:	4629      	mov	r1, r5
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7f6 ffaa 	bl	8000210 <__aeabi_dsub>
 80092bc:	4b2b      	ldr	r3, [pc, #172]	@ (800936c <__kernel_cos+0x17c>)
 80092be:	4598      	cmp	r8, r3
 80092c0:	4606      	mov	r6, r0
 80092c2:	460f      	mov	r7, r1
 80092c4:	d810      	bhi.n	80092e8 <__kernel_cos+0xf8>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4650      	mov	r0, sl
 80092cc:	4659      	mov	r1, fp
 80092ce:	f7f6 ff9f 	bl	8000210 <__aeabi_dsub>
 80092d2:	460b      	mov	r3, r1
 80092d4:	4926      	ldr	r1, [pc, #152]	@ (8009370 <__kernel_cos+0x180>)
 80092d6:	4602      	mov	r2, r0
 80092d8:	2000      	movs	r0, #0
 80092da:	f7f6 ff99 	bl	8000210 <__aeabi_dsub>
 80092de:	ec41 0b10 	vmov	d0, r0, r1
 80092e2:	b003      	add	sp, #12
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e8:	4b22      	ldr	r3, [pc, #136]	@ (8009374 <__kernel_cos+0x184>)
 80092ea:	4921      	ldr	r1, [pc, #132]	@ (8009370 <__kernel_cos+0x180>)
 80092ec:	4598      	cmp	r8, r3
 80092ee:	bf8c      	ite	hi
 80092f0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009378 <__kernel_cos+0x188>)
 80092f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80092f6:	2400      	movs	r4, #0
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	2000      	movs	r0, #0
 80092fe:	f7f6 ff87 	bl	8000210 <__aeabi_dsub>
 8009302:	4622      	mov	r2, r4
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	462b      	mov	r3, r5
 800930a:	4650      	mov	r0, sl
 800930c:	4659      	mov	r1, fp
 800930e:	f7f6 ff7f 	bl	8000210 <__aeabi_dsub>
 8009312:	4632      	mov	r2, r6
 8009314:	463b      	mov	r3, r7
 8009316:	f7f6 ff7b 	bl	8000210 <__aeabi_dsub>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4640      	mov	r0, r8
 8009320:	4649      	mov	r1, r9
 8009322:	e7da      	b.n	80092da <__kernel_cos+0xea>
 8009324:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009360 <__kernel_cos+0x170>
 8009328:	e7db      	b.n	80092e2 <__kernel_cos+0xf2>
 800932a:	bf00      	nop
 800932c:	f3af 8000 	nop.w
 8009330:	be8838d4 	.word	0xbe8838d4
 8009334:	bda8fae9 	.word	0xbda8fae9
 8009338:	bdb4b1c4 	.word	0xbdb4b1c4
 800933c:	3e21ee9e 	.word	0x3e21ee9e
 8009340:	809c52ad 	.word	0x809c52ad
 8009344:	3e927e4f 	.word	0x3e927e4f
 8009348:	19cb1590 	.word	0x19cb1590
 800934c:	3efa01a0 	.word	0x3efa01a0
 8009350:	16c15177 	.word	0x16c15177
 8009354:	3f56c16c 	.word	0x3f56c16c
 8009358:	5555554c 	.word	0x5555554c
 800935c:	3fa55555 	.word	0x3fa55555
 8009360:	00000000 	.word	0x00000000
 8009364:	3ff00000 	.word	0x3ff00000
 8009368:	3fe00000 	.word	0x3fe00000
 800936c:	3fd33332 	.word	0x3fd33332
 8009370:	3ff00000 	.word	0x3ff00000
 8009374:	3fe90000 	.word	0x3fe90000
 8009378:	3fd20000 	.word	0x3fd20000
 800937c:	00000000 	.word	0x00000000

08009380 <__kernel_sin>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	ec55 4b10 	vmov	r4, r5, d0
 8009388:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800938c:	b085      	sub	sp, #20
 800938e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009392:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009396:	4680      	mov	r8, r0
 8009398:	d205      	bcs.n	80093a6 <__kernel_sin+0x26>
 800939a:	4620      	mov	r0, r4
 800939c:	4629      	mov	r1, r5
 800939e:	f7f7 fb9f 	bl	8000ae0 <__aeabi_d2iz>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d052      	beq.n	800944c <__kernel_sin+0xcc>
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f7 f8e7 	bl	8000580 <__aeabi_dmul>
 80093b2:	4682      	mov	sl, r0
 80093b4:	468b      	mov	fp, r1
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f7 f8df 	bl	8000580 <__aeabi_dmul>
 80093c2:	a342      	add	r3, pc, #264	@ (adr r3, 80094cc <__kernel_sin+0x14c>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	e9cd 0100 	strd	r0, r1, [sp]
 80093cc:	4650      	mov	r0, sl
 80093ce:	4659      	mov	r1, fp
 80093d0:	f7f7 f8d6 	bl	8000580 <__aeabi_dmul>
 80093d4:	a33f      	add	r3, pc, #252	@ (adr r3, 80094d4 <__kernel_sin+0x154>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f7f6 ff19 	bl	8000210 <__aeabi_dsub>
 80093de:	4652      	mov	r2, sl
 80093e0:	465b      	mov	r3, fp
 80093e2:	f7f7 f8cd 	bl	8000580 <__aeabi_dmul>
 80093e6:	a33d      	add	r3, pc, #244	@ (adr r3, 80094dc <__kernel_sin+0x15c>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f6 ff12 	bl	8000214 <__adddf3>
 80093f0:	4652      	mov	r2, sl
 80093f2:	465b      	mov	r3, fp
 80093f4:	f7f7 f8c4 	bl	8000580 <__aeabi_dmul>
 80093f8:	a33a      	add	r3, pc, #232	@ (adr r3, 80094e4 <__kernel_sin+0x164>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 ff07 	bl	8000210 <__aeabi_dsub>
 8009402:	4652      	mov	r2, sl
 8009404:	465b      	mov	r3, fp
 8009406:	f7f7 f8bb 	bl	8000580 <__aeabi_dmul>
 800940a:	a338      	add	r3, pc, #224	@ (adr r3, 80094ec <__kernel_sin+0x16c>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 ff00 	bl	8000214 <__adddf3>
 8009414:	4606      	mov	r6, r0
 8009416:	460f      	mov	r7, r1
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d11b      	bne.n	8009456 <__kernel_sin+0xd6>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4650      	mov	r0, sl
 8009424:	4659      	mov	r1, fp
 8009426:	f7f7 f8ab 	bl	8000580 <__aeabi_dmul>
 800942a:	a325      	add	r3, pc, #148	@ (adr r3, 80094c0 <__kernel_sin+0x140>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7f6 feee 	bl	8000210 <__aeabi_dsub>
 8009434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009438:	f7f7 f8a2 	bl	8000580 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4620      	mov	r0, r4
 8009442:	4629      	mov	r1, r5
 8009444:	f7f6 fee6 	bl	8000214 <__adddf3>
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	ec45 4b10 	vmov	d0, r4, r5
 8009450:	b005      	add	sp, #20
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800945a:	4b1b      	ldr	r3, [pc, #108]	@ (80094c8 <__kernel_sin+0x148>)
 800945c:	2200      	movs	r2, #0
 800945e:	f7f7 f88f 	bl	8000580 <__aeabi_dmul>
 8009462:	4632      	mov	r2, r6
 8009464:	4680      	mov	r8, r0
 8009466:	4689      	mov	r9, r1
 8009468:	463b      	mov	r3, r7
 800946a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946e:	f7f7 f887 	bl	8000580 <__aeabi_dmul>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f6 fec9 	bl	8000210 <__aeabi_dsub>
 800947e:	4652      	mov	r2, sl
 8009480:	465b      	mov	r3, fp
 8009482:	f7f7 f87d 	bl	8000580 <__aeabi_dmul>
 8009486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948a:	f7f6 fec1 	bl	8000210 <__aeabi_dsub>
 800948e:	a30c      	add	r3, pc, #48	@ (adr r3, 80094c0 <__kernel_sin+0x140>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	4606      	mov	r6, r0
 8009496:	460f      	mov	r7, r1
 8009498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800949c:	f7f7 f870 	bl	8000580 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f6 feb4 	bl	8000214 <__adddf3>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4620      	mov	r0, r4
 80094b2:	4629      	mov	r1, r5
 80094b4:	f7f6 feac 	bl	8000210 <__aeabi_dsub>
 80094b8:	e7c6      	b.n	8009448 <__kernel_sin+0xc8>
 80094ba:	bf00      	nop
 80094bc:	f3af 8000 	nop.w
 80094c0:	55555549 	.word	0x55555549
 80094c4:	3fc55555 	.word	0x3fc55555
 80094c8:	3fe00000 	.word	0x3fe00000
 80094cc:	5acfd57c 	.word	0x5acfd57c
 80094d0:	3de5d93a 	.word	0x3de5d93a
 80094d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80094d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80094dc:	57b1fe7d 	.word	0x57b1fe7d
 80094e0:	3ec71de3 	.word	0x3ec71de3
 80094e4:	19c161d5 	.word	0x19c161d5
 80094e8:	3f2a01a0 	.word	0x3f2a01a0
 80094ec:	1110f8a6 	.word	0x1110f8a6
 80094f0:	3f811111 	.word	0x3f811111
 80094f4:	00000000 	.word	0x00000000

080094f8 <__ieee754_acos>:
 80094f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	ec55 4b10 	vmov	r4, r5, d0
 8009500:	49b7      	ldr	r1, [pc, #732]	@ (80097e0 <__ieee754_acos+0x2e8>)
 8009502:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009506:	428b      	cmp	r3, r1
 8009508:	d919      	bls.n	800953e <__ieee754_acos+0x46>
 800950a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800950e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009512:	4323      	orrs	r3, r4
 8009514:	d106      	bne.n	8009524 <__ieee754_acos+0x2c>
 8009516:	2d00      	cmp	r5, #0
 8009518:	f340 8210 	ble.w	800993c <__ieee754_acos+0x444>
 800951c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8009770 <__ieee754_acos+0x278>
 8009520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	4622      	mov	r2, r4
 8009526:	462b      	mov	r3, r5
 8009528:	4620      	mov	r0, r4
 800952a:	4629      	mov	r1, r5
 800952c:	f7f6 fe70 	bl	8000210 <__aeabi_dsub>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	f7f7 f94e 	bl	80007d4 <__aeabi_ddiv>
 8009538:	ec41 0b10 	vmov	d0, r0, r1
 800953c:	e7f0      	b.n	8009520 <__ieee754_acos+0x28>
 800953e:	49a9      	ldr	r1, [pc, #676]	@ (80097e4 <__ieee754_acos+0x2ec>)
 8009540:	428b      	cmp	r3, r1
 8009542:	f200 8085 	bhi.w	8009650 <__ieee754_acos+0x158>
 8009546:	4aa8      	ldr	r2, [pc, #672]	@ (80097e8 <__ieee754_acos+0x2f0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	f240 81fa 	bls.w	8009942 <__ieee754_acos+0x44a>
 800954e:	4622      	mov	r2, r4
 8009550:	462b      	mov	r3, r5
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f7 f813 	bl	8000580 <__aeabi_dmul>
 800955a:	a387      	add	r3, pc, #540	@ (adr r3, 8009778 <__ieee754_acos+0x280>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	f7f7 f80c 	bl	8000580 <__aeabi_dmul>
 8009568:	a385      	add	r3, pc, #532	@ (adr r3, 8009780 <__ieee754_acos+0x288>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fe51 	bl	8000214 <__adddf3>
 8009572:	4632      	mov	r2, r6
 8009574:	463b      	mov	r3, r7
 8009576:	f7f7 f803 	bl	8000580 <__aeabi_dmul>
 800957a:	a383      	add	r3, pc, #524	@ (adr r3, 8009788 <__ieee754_acos+0x290>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f7f6 fe46 	bl	8000210 <__aeabi_dsub>
 8009584:	4632      	mov	r2, r6
 8009586:	463b      	mov	r3, r7
 8009588:	f7f6 fffa 	bl	8000580 <__aeabi_dmul>
 800958c:	a380      	add	r3, pc, #512	@ (adr r3, 8009790 <__ieee754_acos+0x298>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f6 fe3f 	bl	8000214 <__adddf3>
 8009596:	4632      	mov	r2, r6
 8009598:	463b      	mov	r3, r7
 800959a:	f7f6 fff1 	bl	8000580 <__aeabi_dmul>
 800959e:	a37e      	add	r3, pc, #504	@ (adr r3, 8009798 <__ieee754_acos+0x2a0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f7f6 fe34 	bl	8000210 <__aeabi_dsub>
 80095a8:	4632      	mov	r2, r6
 80095aa:	463b      	mov	r3, r7
 80095ac:	f7f6 ffe8 	bl	8000580 <__aeabi_dmul>
 80095b0:	a37b      	add	r3, pc, #492	@ (adr r3, 80097a0 <__ieee754_acos+0x2a8>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f7f6 fe2d 	bl	8000214 <__adddf3>
 80095ba:	4632      	mov	r2, r6
 80095bc:	463b      	mov	r3, r7
 80095be:	f7f6 ffdf 	bl	8000580 <__aeabi_dmul>
 80095c2:	a379      	add	r3, pc, #484	@ (adr r3, 80097a8 <__ieee754_acos+0x2b0>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	4680      	mov	r8, r0
 80095ca:	4689      	mov	r9, r1
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f6 ffd6 	bl	8000580 <__aeabi_dmul>
 80095d4:	a376      	add	r3, pc, #472	@ (adr r3, 80097b0 <__ieee754_acos+0x2b8>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 fe19 	bl	8000210 <__aeabi_dsub>
 80095de:	4632      	mov	r2, r6
 80095e0:	463b      	mov	r3, r7
 80095e2:	f7f6 ffcd 	bl	8000580 <__aeabi_dmul>
 80095e6:	a374      	add	r3, pc, #464	@ (adr r3, 80097b8 <__ieee754_acos+0x2c0>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f6 fe12 	bl	8000214 <__adddf3>
 80095f0:	4632      	mov	r2, r6
 80095f2:	463b      	mov	r3, r7
 80095f4:	f7f6 ffc4 	bl	8000580 <__aeabi_dmul>
 80095f8:	a371      	add	r3, pc, #452	@ (adr r3, 80097c0 <__ieee754_acos+0x2c8>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f7f6 fe07 	bl	8000210 <__aeabi_dsub>
 8009602:	4632      	mov	r2, r6
 8009604:	463b      	mov	r3, r7
 8009606:	f7f6 ffbb 	bl	8000580 <__aeabi_dmul>
 800960a:	4b78      	ldr	r3, [pc, #480]	@ (80097ec <__ieee754_acos+0x2f4>)
 800960c:	2200      	movs	r2, #0
 800960e:	f7f6 fe01 	bl	8000214 <__adddf3>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4640      	mov	r0, r8
 8009618:	4649      	mov	r1, r9
 800961a:	f7f7 f8db 	bl	80007d4 <__aeabi_ddiv>
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	f7f6 ffad 	bl	8000580 <__aeabi_dmul>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	a167      	add	r1, pc, #412	@ (adr r1, 80097c8 <__ieee754_acos+0x2d0>)
 800962c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009630:	f7f6 fdee 	bl	8000210 <__aeabi_dsub>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 fde8 	bl	8000210 <__aeabi_dsub>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	a162      	add	r1, pc, #392	@ (adr r1, 80097d0 <__ieee754_acos+0x2d8>)
 8009646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800964a:	f7f6 fde1 	bl	8000210 <__aeabi_dsub>
 800964e:	e773      	b.n	8009538 <__ieee754_acos+0x40>
 8009650:	2d00      	cmp	r5, #0
 8009652:	f280 80cf 	bge.w	80097f4 <__ieee754_acos+0x2fc>
 8009656:	4b65      	ldr	r3, [pc, #404]	@ (80097ec <__ieee754_acos+0x2f4>)
 8009658:	2200      	movs	r2, #0
 800965a:	4620      	mov	r0, r4
 800965c:	4629      	mov	r1, r5
 800965e:	f7f6 fdd9 	bl	8000214 <__adddf3>
 8009662:	4b63      	ldr	r3, [pc, #396]	@ (80097f0 <__ieee754_acos+0x2f8>)
 8009664:	2200      	movs	r2, #0
 8009666:	f7f6 ff8b 	bl	8000580 <__aeabi_dmul>
 800966a:	a343      	add	r3, pc, #268	@ (adr r3, 8009778 <__ieee754_acos+0x280>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	f7f6 ff84 	bl	8000580 <__aeabi_dmul>
 8009678:	a341      	add	r3, pc, #260	@ (adr r3, 8009780 <__ieee754_acos+0x288>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 fdc9 	bl	8000214 <__adddf3>
 8009682:	4622      	mov	r2, r4
 8009684:	462b      	mov	r3, r5
 8009686:	f7f6 ff7b 	bl	8000580 <__aeabi_dmul>
 800968a:	a33f      	add	r3, pc, #252	@ (adr r3, 8009788 <__ieee754_acos+0x290>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 fdbe 	bl	8000210 <__aeabi_dsub>
 8009694:	4622      	mov	r2, r4
 8009696:	462b      	mov	r3, r5
 8009698:	f7f6 ff72 	bl	8000580 <__aeabi_dmul>
 800969c:	a33c      	add	r3, pc, #240	@ (adr r3, 8009790 <__ieee754_acos+0x298>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 fdb7 	bl	8000214 <__adddf3>
 80096a6:	4622      	mov	r2, r4
 80096a8:	462b      	mov	r3, r5
 80096aa:	f7f6 ff69 	bl	8000580 <__aeabi_dmul>
 80096ae:	a33a      	add	r3, pc, #232	@ (adr r3, 8009798 <__ieee754_acos+0x2a0>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 fdac 	bl	8000210 <__aeabi_dsub>
 80096b8:	4622      	mov	r2, r4
 80096ba:	462b      	mov	r3, r5
 80096bc:	f7f6 ff60 	bl	8000580 <__aeabi_dmul>
 80096c0:	a337      	add	r3, pc, #220	@ (adr r3, 80097a0 <__ieee754_acos+0x2a8>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 fda5 	bl	8000214 <__adddf3>
 80096ca:	4622      	mov	r2, r4
 80096cc:	462b      	mov	r3, r5
 80096ce:	f7f6 ff57 	bl	8000580 <__aeabi_dmul>
 80096d2:	a335      	add	r3, pc, #212	@ (adr r3, 80097a8 <__ieee754_acos+0x2b0>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	4606      	mov	r6, r0
 80096da:	460f      	mov	r7, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ff4e 	bl	8000580 <__aeabi_dmul>
 80096e4:	a332      	add	r3, pc, #200	@ (adr r3, 80097b0 <__ieee754_acos+0x2b8>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fd91 	bl	8000210 <__aeabi_dsub>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	f7f6 ff45 	bl	8000580 <__aeabi_dmul>
 80096f6:	a330      	add	r3, pc, #192	@ (adr r3, 80097b8 <__ieee754_acos+0x2c0>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f6 fd8a 	bl	8000214 <__adddf3>
 8009700:	4622      	mov	r2, r4
 8009702:	462b      	mov	r3, r5
 8009704:	f7f6 ff3c 	bl	8000580 <__aeabi_dmul>
 8009708:	a32d      	add	r3, pc, #180	@ (adr r3, 80097c0 <__ieee754_acos+0x2c8>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 fd7f 	bl	8000210 <__aeabi_dsub>
 8009712:	4622      	mov	r2, r4
 8009714:	462b      	mov	r3, r5
 8009716:	f7f6 ff33 	bl	8000580 <__aeabi_dmul>
 800971a:	4b34      	ldr	r3, [pc, #208]	@ (80097ec <__ieee754_acos+0x2f4>)
 800971c:	2200      	movs	r2, #0
 800971e:	f7f6 fd79 	bl	8000214 <__adddf3>
 8009722:	ec45 4b10 	vmov	d0, r4, r5
 8009726:	4680      	mov	r8, r0
 8009728:	4689      	mov	r9, r1
 800972a:	f7ff fc85 	bl	8009038 <__ieee754_sqrt>
 800972e:	ec55 4b10 	vmov	r4, r5, d0
 8009732:	4642      	mov	r2, r8
 8009734:	464b      	mov	r3, r9
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	f7f7 f84b 	bl	80007d4 <__aeabi_ddiv>
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	f7f6 ff1d 	bl	8000580 <__aeabi_dmul>
 8009746:	a320      	add	r3, pc, #128	@ (adr r3, 80097c8 <__ieee754_acos+0x2d0>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 fd60 	bl	8000210 <__aeabi_dsub>
 8009750:	4622      	mov	r2, r4
 8009752:	462b      	mov	r3, r5
 8009754:	f7f6 fd5e 	bl	8000214 <__adddf3>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	f7f6 fd5a 	bl	8000214 <__adddf3>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	a11c      	add	r1, pc, #112	@ (adr r1, 80097d8 <__ieee754_acos+0x2e0>)
 8009766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800976a:	e76e      	b.n	800964a <__ieee754_acos+0x152>
 800976c:	f3af 8000 	nop.w
	...
 8009778:	0dfdf709 	.word	0x0dfdf709
 800977c:	3f023de1 	.word	0x3f023de1
 8009780:	7501b288 	.word	0x7501b288
 8009784:	3f49efe0 	.word	0x3f49efe0
 8009788:	b5688f3b 	.word	0xb5688f3b
 800978c:	3fa48228 	.word	0x3fa48228
 8009790:	0e884455 	.word	0x0e884455
 8009794:	3fc9c155 	.word	0x3fc9c155
 8009798:	03eb6f7d 	.word	0x03eb6f7d
 800979c:	3fd4d612 	.word	0x3fd4d612
 80097a0:	55555555 	.word	0x55555555
 80097a4:	3fc55555 	.word	0x3fc55555
 80097a8:	b12e9282 	.word	0xb12e9282
 80097ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80097b0:	1b8d0159 	.word	0x1b8d0159
 80097b4:	3fe6066c 	.word	0x3fe6066c
 80097b8:	9c598ac8 	.word	0x9c598ac8
 80097bc:	40002ae5 	.word	0x40002ae5
 80097c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80097c4:	40033a27 	.word	0x40033a27
 80097c8:	33145c07 	.word	0x33145c07
 80097cc:	3c91a626 	.word	0x3c91a626
 80097d0:	54442d18 	.word	0x54442d18
 80097d4:	3ff921fb 	.word	0x3ff921fb
 80097d8:	54442d18 	.word	0x54442d18
 80097dc:	400921fb 	.word	0x400921fb
 80097e0:	3fefffff 	.word	0x3fefffff
 80097e4:	3fdfffff 	.word	0x3fdfffff
 80097e8:	3c600000 	.word	0x3c600000
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	3fe00000 	.word	0x3fe00000
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	496b      	ldr	r1, [pc, #428]	@ (80099a8 <__ieee754_acos+0x4b0>)
 80097fa:	2000      	movs	r0, #0
 80097fc:	f7f6 fd08 	bl	8000210 <__aeabi_dsub>
 8009800:	4b6a      	ldr	r3, [pc, #424]	@ (80099ac <__ieee754_acos+0x4b4>)
 8009802:	2200      	movs	r2, #0
 8009804:	f7f6 febc 	bl	8000580 <__aeabi_dmul>
 8009808:	4604      	mov	r4, r0
 800980a:	460d      	mov	r5, r1
 800980c:	ec45 4b10 	vmov	d0, r4, r5
 8009810:	f7ff fc12 	bl	8009038 <__ieee754_sqrt>
 8009814:	a34c      	add	r3, pc, #304	@ (adr r3, 8009948 <__ieee754_acos+0x450>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	ec59 8b10 	vmov	r8, r9, d0
 8009822:	f7f6 fead 	bl	8000580 <__aeabi_dmul>
 8009826:	a34a      	add	r3, pc, #296	@ (adr r3, 8009950 <__ieee754_acos+0x458>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fcf2 	bl	8000214 <__adddf3>
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fea4 	bl	8000580 <__aeabi_dmul>
 8009838:	a347      	add	r3, pc, #284	@ (adr r3, 8009958 <__ieee754_acos+0x460>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fce7 	bl	8000210 <__aeabi_dsub>
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	f7f6 fe9b 	bl	8000580 <__aeabi_dmul>
 800984a:	a345      	add	r3, pc, #276	@ (adr r3, 8009960 <__ieee754_acos+0x468>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fce0 	bl	8000214 <__adddf3>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f6 fe92 	bl	8000580 <__aeabi_dmul>
 800985c:	a342      	add	r3, pc, #264	@ (adr r3, 8009968 <__ieee754_acos+0x470>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fcd5 	bl	8000210 <__aeabi_dsub>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f6 fe89 	bl	8000580 <__aeabi_dmul>
 800986e:	a340      	add	r3, pc, #256	@ (adr r3, 8009970 <__ieee754_acos+0x478>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7f6 fcce 	bl	8000214 <__adddf3>
 8009878:	4622      	mov	r2, r4
 800987a:	462b      	mov	r3, r5
 800987c:	f7f6 fe80 	bl	8000580 <__aeabi_dmul>
 8009880:	a33d      	add	r3, pc, #244	@ (adr r3, 8009978 <__ieee754_acos+0x480>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	4682      	mov	sl, r0
 8009888:	468b      	mov	fp, r1
 800988a:	4620      	mov	r0, r4
 800988c:	4629      	mov	r1, r5
 800988e:	f7f6 fe77 	bl	8000580 <__aeabi_dmul>
 8009892:	a33b      	add	r3, pc, #236	@ (adr r3, 8009980 <__ieee754_acos+0x488>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fcba 	bl	8000210 <__aeabi_dsub>
 800989c:	4622      	mov	r2, r4
 800989e:	462b      	mov	r3, r5
 80098a0:	f7f6 fe6e 	bl	8000580 <__aeabi_dmul>
 80098a4:	a338      	add	r3, pc, #224	@ (adr r3, 8009988 <__ieee754_acos+0x490>)
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f7f6 fcb3 	bl	8000214 <__adddf3>
 80098ae:	4622      	mov	r2, r4
 80098b0:	462b      	mov	r3, r5
 80098b2:	f7f6 fe65 	bl	8000580 <__aeabi_dmul>
 80098b6:	a336      	add	r3, pc, #216	@ (adr r3, 8009990 <__ieee754_acos+0x498>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f6 fca8 	bl	8000210 <__aeabi_dsub>
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	f7f6 fe5c 	bl	8000580 <__aeabi_dmul>
 80098c8:	4b37      	ldr	r3, [pc, #220]	@ (80099a8 <__ieee754_acos+0x4b0>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f7f6 fca2 	bl	8000214 <__adddf3>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4650      	mov	r0, sl
 80098d6:	4659      	mov	r1, fp
 80098d8:	f7f6 ff7c 	bl	80007d4 <__aeabi_ddiv>
 80098dc:	4642      	mov	r2, r8
 80098de:	464b      	mov	r3, r9
 80098e0:	f7f6 fe4e 	bl	8000580 <__aeabi_dmul>
 80098e4:	2600      	movs	r6, #0
 80098e6:	4682      	mov	sl, r0
 80098e8:	468b      	mov	fp, r1
 80098ea:	4632      	mov	r2, r6
 80098ec:	464b      	mov	r3, r9
 80098ee:	4630      	mov	r0, r6
 80098f0:	4649      	mov	r1, r9
 80098f2:	f7f6 fe45 	bl	8000580 <__aeabi_dmul>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f6 fc87 	bl	8000210 <__aeabi_dsub>
 8009902:	4632      	mov	r2, r6
 8009904:	4604      	mov	r4, r0
 8009906:	460d      	mov	r5, r1
 8009908:	464b      	mov	r3, r9
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f6 fc81 	bl	8000214 <__adddf3>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 ff5b 	bl	80007d4 <__aeabi_ddiv>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	f7f6 fc75 	bl	8000214 <__adddf3>
 800992a:	4632      	mov	r2, r6
 800992c:	464b      	mov	r3, r9
 800992e:	f7f6 fc71 	bl	8000214 <__adddf3>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	f7f6 fc6d 	bl	8000214 <__adddf3>
 800993a:	e5fd      	b.n	8009538 <__ieee754_acos+0x40>
 800993c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009998 <__ieee754_acos+0x4a0>
 8009940:	e5ee      	b.n	8009520 <__ieee754_acos+0x28>
 8009942:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80099a0 <__ieee754_acos+0x4a8>
 8009946:	e5eb      	b.n	8009520 <__ieee754_acos+0x28>
 8009948:	0dfdf709 	.word	0x0dfdf709
 800994c:	3f023de1 	.word	0x3f023de1
 8009950:	7501b288 	.word	0x7501b288
 8009954:	3f49efe0 	.word	0x3f49efe0
 8009958:	b5688f3b 	.word	0xb5688f3b
 800995c:	3fa48228 	.word	0x3fa48228
 8009960:	0e884455 	.word	0x0e884455
 8009964:	3fc9c155 	.word	0x3fc9c155
 8009968:	03eb6f7d 	.word	0x03eb6f7d
 800996c:	3fd4d612 	.word	0x3fd4d612
 8009970:	55555555 	.word	0x55555555
 8009974:	3fc55555 	.word	0x3fc55555
 8009978:	b12e9282 	.word	0xb12e9282
 800997c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009980:	1b8d0159 	.word	0x1b8d0159
 8009984:	3fe6066c 	.word	0x3fe6066c
 8009988:	9c598ac8 	.word	0x9c598ac8
 800998c:	40002ae5 	.word	0x40002ae5
 8009990:	1c8a2d4b 	.word	0x1c8a2d4b
 8009994:	40033a27 	.word	0x40033a27
 8009998:	54442d18 	.word	0x54442d18
 800999c:	400921fb 	.word	0x400921fb
 80099a0:	54442d18 	.word	0x54442d18
 80099a4:	3ff921fb 	.word	0x3ff921fb
 80099a8:	3ff00000 	.word	0x3ff00000
 80099ac:	3fe00000 	.word	0x3fe00000

080099b0 <__ieee754_atan2>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	ec57 6b11 	vmov	r6, r7, d1
 80099b8:	4273      	negs	r3, r6
 80099ba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009b38 <__ieee754_atan2+0x188>
 80099be:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80099c2:	4333      	orrs	r3, r6
 80099c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80099c8:	4543      	cmp	r3, r8
 80099ca:	ec51 0b10 	vmov	r0, r1, d0
 80099ce:	4635      	mov	r5, r6
 80099d0:	d809      	bhi.n	80099e6 <__ieee754_atan2+0x36>
 80099d2:	4244      	negs	r4, r0
 80099d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80099d8:	4304      	orrs	r4, r0
 80099da:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80099de:	4544      	cmp	r4, r8
 80099e0:	468e      	mov	lr, r1
 80099e2:	4681      	mov	r9, r0
 80099e4:	d907      	bls.n	80099f6 <__ieee754_atan2+0x46>
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	f7f6 fc13 	bl	8000214 <__adddf3>
 80099ee:	ec41 0b10 	vmov	d0, r0, r1
 80099f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80099fa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80099fe:	4334      	orrs	r4, r6
 8009a00:	d103      	bne.n	8009a0a <__ieee754_atan2+0x5a>
 8009a02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a06:	f000 bfdb 	b.w	800a9c0 <atan>
 8009a0a:	17bc      	asrs	r4, r7, #30
 8009a0c:	f004 0402 	and.w	r4, r4, #2
 8009a10:	ea53 0909 	orrs.w	r9, r3, r9
 8009a14:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009a18:	d107      	bne.n	8009a2a <__ieee754_atan2+0x7a>
 8009a1a:	2c02      	cmp	r4, #2
 8009a1c:	d05f      	beq.n	8009ade <__ieee754_atan2+0x12e>
 8009a1e:	2c03      	cmp	r4, #3
 8009a20:	d1e5      	bne.n	80099ee <__ieee754_atan2+0x3e>
 8009a22:	a141      	add	r1, pc, #260	@ (adr r1, 8009b28 <__ieee754_atan2+0x178>)
 8009a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a28:	e7e1      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009a2a:	4315      	orrs	r5, r2
 8009a2c:	d106      	bne.n	8009a3c <__ieee754_atan2+0x8c>
 8009a2e:	f1be 0f00 	cmp.w	lr, #0
 8009a32:	da5f      	bge.n	8009af4 <__ieee754_atan2+0x144>
 8009a34:	a13e      	add	r1, pc, #248	@ (adr r1, 8009b30 <__ieee754_atan2+0x180>)
 8009a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3a:	e7d8      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009a3c:	4542      	cmp	r2, r8
 8009a3e:	d10f      	bne.n	8009a60 <__ieee754_atan2+0xb0>
 8009a40:	4293      	cmp	r3, r2
 8009a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a46:	d107      	bne.n	8009a58 <__ieee754_atan2+0xa8>
 8009a48:	2c02      	cmp	r4, #2
 8009a4a:	d84c      	bhi.n	8009ae6 <__ieee754_atan2+0x136>
 8009a4c:	4b34      	ldr	r3, [pc, #208]	@ (8009b20 <__ieee754_atan2+0x170>)
 8009a4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a56:	e7ca      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009a58:	2c02      	cmp	r4, #2
 8009a5a:	d848      	bhi.n	8009aee <__ieee754_atan2+0x13e>
 8009a5c:	4b31      	ldr	r3, [pc, #196]	@ (8009b24 <__ieee754_atan2+0x174>)
 8009a5e:	e7f6      	b.n	8009a4e <__ieee754_atan2+0x9e>
 8009a60:	4543      	cmp	r3, r8
 8009a62:	d0e4      	beq.n	8009a2e <__ieee754_atan2+0x7e>
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009a6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a6e:	da1e      	bge.n	8009aae <__ieee754_atan2+0xfe>
 8009a70:	2f00      	cmp	r7, #0
 8009a72:	da01      	bge.n	8009a78 <__ieee754_atan2+0xc8>
 8009a74:	323c      	adds	r2, #60	@ 0x3c
 8009a76:	db1e      	blt.n	8009ab6 <__ieee754_atan2+0x106>
 8009a78:	4632      	mov	r2, r6
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	f7f6 feaa 	bl	80007d4 <__aeabi_ddiv>
 8009a80:	ec41 0b10 	vmov	d0, r0, r1
 8009a84:	f7ff fa68 	bl	8008f58 <fabs>
 8009a88:	f000 ff9a 	bl	800a9c0 <atan>
 8009a8c:	ec51 0b10 	vmov	r0, r1, d0
 8009a90:	2c01      	cmp	r4, #1
 8009a92:	d013      	beq.n	8009abc <__ieee754_atan2+0x10c>
 8009a94:	2c02      	cmp	r4, #2
 8009a96:	d015      	beq.n	8009ac4 <__ieee754_atan2+0x114>
 8009a98:	2c00      	cmp	r4, #0
 8009a9a:	d0a8      	beq.n	80099ee <__ieee754_atan2+0x3e>
 8009a9c:	a318      	add	r3, pc, #96	@ (adr r3, 8009b00 <__ieee754_atan2+0x150>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fbb5 	bl	8000210 <__aeabi_dsub>
 8009aa6:	a318      	add	r3, pc, #96	@ (adr r3, 8009b08 <__ieee754_atan2+0x158>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	e014      	b.n	8009ad8 <__ieee754_atan2+0x128>
 8009aae:	a118      	add	r1, pc, #96	@ (adr r1, 8009b10 <__ieee754_atan2+0x160>)
 8009ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab4:	e7ec      	b.n	8009a90 <__ieee754_atan2+0xe0>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	e7e9      	b.n	8009a90 <__ieee754_atan2+0xe0>
 8009abc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	e794      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009ac4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b00 <__ieee754_atan2+0x150>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fba1 	bl	8000210 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	a10d      	add	r1, pc, #52	@ (adr r1, 8009b08 <__ieee754_atan2+0x158>)
 8009ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad8:	f7f6 fb9a 	bl	8000210 <__aeabi_dsub>
 8009adc:	e787      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009ade:	a10a      	add	r1, pc, #40	@ (adr r1, 8009b08 <__ieee754_atan2+0x158>)
 8009ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae4:	e783      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009ae6:	a10c      	add	r1, pc, #48	@ (adr r1, 8009b18 <__ieee754_atan2+0x168>)
 8009ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aec:	e77f      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009aee:	2000      	movs	r0, #0
 8009af0:	2100      	movs	r1, #0
 8009af2:	e77c      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009af4:	a106      	add	r1, pc, #24	@ (adr r1, 8009b10 <__ieee754_atan2+0x160>)
 8009af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009afa:	e778      	b.n	80099ee <__ieee754_atan2+0x3e>
 8009afc:	f3af 8000 	nop.w
 8009b00:	33145c07 	.word	0x33145c07
 8009b04:	3ca1a626 	.word	0x3ca1a626
 8009b08:	54442d18 	.word	0x54442d18
 8009b0c:	400921fb 	.word	0x400921fb
 8009b10:	54442d18 	.word	0x54442d18
 8009b14:	3ff921fb 	.word	0x3ff921fb
 8009b18:	54442d18 	.word	0x54442d18
 8009b1c:	3fe921fb 	.word	0x3fe921fb
 8009b20:	0800b690 	.word	0x0800b690
 8009b24:	0800b678 	.word	0x0800b678
 8009b28:	54442d18 	.word	0x54442d18
 8009b2c:	c00921fb 	.word	0xc00921fb
 8009b30:	54442d18 	.word	0x54442d18
 8009b34:	bff921fb 	.word	0xbff921fb
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	00000000 	.word	0x00000000

08009b40 <__ieee754_pow>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	b091      	sub	sp, #68	@ 0x44
 8009b46:	ed8d 1b00 	vstr	d1, [sp]
 8009b4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009b4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009b52:	ea5a 0001 	orrs.w	r0, sl, r1
 8009b56:	ec57 6b10 	vmov	r6, r7, d0
 8009b5a:	d113      	bne.n	8009b84 <__ieee754_pow+0x44>
 8009b5c:	19b3      	adds	r3, r6, r6
 8009b5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009b62:	4152      	adcs	r2, r2
 8009b64:	4298      	cmp	r0, r3
 8009b66:	4b98      	ldr	r3, [pc, #608]	@ (8009dc8 <__ieee754_pow+0x288>)
 8009b68:	4193      	sbcs	r3, r2
 8009b6a:	f080 84ea 	bcs.w	800a542 <__ieee754_pow+0xa02>
 8009b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fb4d 	bl	8000214 <__adddf3>
 8009b7a:	ec41 0b10 	vmov	d0, r0, r1
 8009b7e:	b011      	add	sp, #68	@ 0x44
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	4a91      	ldr	r2, [pc, #580]	@ (8009dcc <__ieee754_pow+0x28c>)
 8009b86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009b8a:	4590      	cmp	r8, r2
 8009b8c:	463d      	mov	r5, r7
 8009b8e:	4633      	mov	r3, r6
 8009b90:	d806      	bhi.n	8009ba0 <__ieee754_pow+0x60>
 8009b92:	d101      	bne.n	8009b98 <__ieee754_pow+0x58>
 8009b94:	2e00      	cmp	r6, #0
 8009b96:	d1ea      	bne.n	8009b6e <__ieee754_pow+0x2e>
 8009b98:	4592      	cmp	sl, r2
 8009b9a:	d801      	bhi.n	8009ba0 <__ieee754_pow+0x60>
 8009b9c:	d10e      	bne.n	8009bbc <__ieee754_pow+0x7c>
 8009b9e:	b169      	cbz	r1, 8009bbc <__ieee754_pow+0x7c>
 8009ba0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009ba4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009ba8:	431d      	orrs	r5, r3
 8009baa:	d1e0      	bne.n	8009b6e <__ieee754_pow+0x2e>
 8009bac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009bb0:	18db      	adds	r3, r3, r3
 8009bb2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009bb6:	4152      	adcs	r2, r2
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	e7d4      	b.n	8009b66 <__ieee754_pow+0x26>
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	46c3      	mov	fp, r8
 8009bc0:	da3a      	bge.n	8009c38 <__ieee754_pow+0xf8>
 8009bc2:	4a83      	ldr	r2, [pc, #524]	@ (8009dd0 <__ieee754_pow+0x290>)
 8009bc4:	4592      	cmp	sl, r2
 8009bc6:	d84d      	bhi.n	8009c64 <__ieee754_pow+0x124>
 8009bc8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009bcc:	4592      	cmp	sl, r2
 8009bce:	f240 84c7 	bls.w	800a560 <__ieee754_pow+0xa20>
 8009bd2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009bd6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009bda:	2a14      	cmp	r2, #20
 8009bdc:	dd0f      	ble.n	8009bfe <__ieee754_pow+0xbe>
 8009bde:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009be2:	fa21 f402 	lsr.w	r4, r1, r2
 8009be6:	fa04 f202 	lsl.w	r2, r4, r2
 8009bea:	428a      	cmp	r2, r1
 8009bec:	f040 84b8 	bne.w	800a560 <__ieee754_pow+0xa20>
 8009bf0:	f004 0401 	and.w	r4, r4, #1
 8009bf4:	f1c4 0402 	rsb	r4, r4, #2
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	d158      	bne.n	8009cae <__ieee754_pow+0x16e>
 8009bfc:	e00e      	b.n	8009c1c <__ieee754_pow+0xdc>
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	d154      	bne.n	8009cac <__ieee754_pow+0x16c>
 8009c02:	f1c2 0214 	rsb	r2, r2, #20
 8009c06:	fa4a f402 	asr.w	r4, sl, r2
 8009c0a:	fa04 f202 	lsl.w	r2, r4, r2
 8009c0e:	4552      	cmp	r2, sl
 8009c10:	f040 84a3 	bne.w	800a55a <__ieee754_pow+0xa1a>
 8009c14:	f004 0401 	and.w	r4, r4, #1
 8009c18:	f1c4 0402 	rsb	r4, r4, #2
 8009c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8009dd4 <__ieee754_pow+0x294>)
 8009c1e:	4592      	cmp	sl, r2
 8009c20:	d12e      	bne.n	8009c80 <__ieee754_pow+0x140>
 8009c22:	f1b9 0f00 	cmp.w	r9, #0
 8009c26:	f280 8494 	bge.w	800a552 <__ieee754_pow+0xa12>
 8009c2a:	496a      	ldr	r1, [pc, #424]	@ (8009dd4 <__ieee754_pow+0x294>)
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	463b      	mov	r3, r7
 8009c30:	2000      	movs	r0, #0
 8009c32:	f7f6 fdcf 	bl	80007d4 <__aeabi_ddiv>
 8009c36:	e7a0      	b.n	8009b7a <__ieee754_pow+0x3a>
 8009c38:	2400      	movs	r4, #0
 8009c3a:	bbc1      	cbnz	r1, 8009cae <__ieee754_pow+0x16e>
 8009c3c:	4a63      	ldr	r2, [pc, #396]	@ (8009dcc <__ieee754_pow+0x28c>)
 8009c3e:	4592      	cmp	sl, r2
 8009c40:	d1ec      	bne.n	8009c1c <__ieee754_pow+0xdc>
 8009c42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009c46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	f000 8479 	beq.w	800a542 <__ieee754_pow+0xa02>
 8009c50:	4b61      	ldr	r3, [pc, #388]	@ (8009dd8 <__ieee754_pow+0x298>)
 8009c52:	4598      	cmp	r8, r3
 8009c54:	d908      	bls.n	8009c68 <__ieee754_pow+0x128>
 8009c56:	f1b9 0f00 	cmp.w	r9, #0
 8009c5a:	f2c0 8476 	blt.w	800a54a <__ieee754_pow+0xa0a>
 8009c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c62:	e78a      	b.n	8009b7a <__ieee754_pow+0x3a>
 8009c64:	2402      	movs	r4, #2
 8009c66:	e7e8      	b.n	8009c3a <__ieee754_pow+0xfa>
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	f04f 0000 	mov.w	r0, #0
 8009c70:	f04f 0100 	mov.w	r1, #0
 8009c74:	da81      	bge.n	8009b7a <__ieee754_pow+0x3a>
 8009c76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009c7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c7e:	e77c      	b.n	8009b7a <__ieee754_pow+0x3a>
 8009c80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009c84:	d106      	bne.n	8009c94 <__ieee754_pow+0x154>
 8009c86:	4632      	mov	r2, r6
 8009c88:	463b      	mov	r3, r7
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f7f6 fc77 	bl	8000580 <__aeabi_dmul>
 8009c92:	e772      	b.n	8009b7a <__ieee754_pow+0x3a>
 8009c94:	4a51      	ldr	r2, [pc, #324]	@ (8009ddc <__ieee754_pow+0x29c>)
 8009c96:	4591      	cmp	r9, r2
 8009c98:	d109      	bne.n	8009cae <__ieee754_pow+0x16e>
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	db07      	blt.n	8009cae <__ieee754_pow+0x16e>
 8009c9e:	ec47 6b10 	vmov	d0, r6, r7
 8009ca2:	b011      	add	sp, #68	@ 0x44
 8009ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	f7ff b9c6 	b.w	8009038 <__ieee754_sqrt>
 8009cac:	2400      	movs	r4, #0
 8009cae:	ec47 6b10 	vmov	d0, r6, r7
 8009cb2:	9302      	str	r3, [sp, #8]
 8009cb4:	f7ff f950 	bl	8008f58 <fabs>
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	ec51 0b10 	vmov	r0, r1, d0
 8009cbe:	bb53      	cbnz	r3, 8009d16 <__ieee754_pow+0x1d6>
 8009cc0:	4b44      	ldr	r3, [pc, #272]	@ (8009dd4 <__ieee754_pow+0x294>)
 8009cc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d002      	beq.n	8009cd0 <__ieee754_pow+0x190>
 8009cca:	f1b8 0f00 	cmp.w	r8, #0
 8009cce:	d122      	bne.n	8009d16 <__ieee754_pow+0x1d6>
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	da05      	bge.n	8009ce2 <__ieee754_pow+0x1a2>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	2000      	movs	r0, #0
 8009cdc:	493d      	ldr	r1, [pc, #244]	@ (8009dd4 <__ieee754_pow+0x294>)
 8009cde:	f7f6 fd79 	bl	80007d4 <__aeabi_ddiv>
 8009ce2:	2d00      	cmp	r5, #0
 8009ce4:	f6bf af49 	bge.w	8009b7a <__ieee754_pow+0x3a>
 8009ce8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009cec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009cf0:	ea58 0804 	orrs.w	r8, r8, r4
 8009cf4:	d108      	bne.n	8009d08 <__ieee754_pow+0x1c8>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f7f6 fa87 	bl	8000210 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	e794      	b.n	8009c32 <__ieee754_pow+0xf2>
 8009d08:	2c01      	cmp	r4, #1
 8009d0a:	f47f af36 	bne.w	8009b7a <__ieee754_pow+0x3a>
 8009d0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d12:	4619      	mov	r1, r3
 8009d14:	e731      	b.n	8009b7a <__ieee754_pow+0x3a>
 8009d16:	0feb      	lsrs	r3, r5, #31
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	ea53 0204 	orrs.w	r2, r3, r4
 8009d1e:	d102      	bne.n	8009d26 <__ieee754_pow+0x1e6>
 8009d20:	4632      	mov	r2, r6
 8009d22:	463b      	mov	r3, r7
 8009d24:	e7e9      	b.n	8009cfa <__ieee754_pow+0x1ba>
 8009d26:	3c01      	subs	r4, #1
 8009d28:	431c      	orrs	r4, r3
 8009d2a:	d016      	beq.n	8009d5a <__ieee754_pow+0x21a>
 8009d2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009db8 <__ieee754_pow+0x278>
 8009d30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009d34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d38:	f240 8112 	bls.w	8009f60 <__ieee754_pow+0x420>
 8009d3c:	4b28      	ldr	r3, [pc, #160]	@ (8009de0 <__ieee754_pow+0x2a0>)
 8009d3e:	459a      	cmp	sl, r3
 8009d40:	4b25      	ldr	r3, [pc, #148]	@ (8009dd8 <__ieee754_pow+0x298>)
 8009d42:	d916      	bls.n	8009d72 <__ieee754_pow+0x232>
 8009d44:	4598      	cmp	r8, r3
 8009d46:	d80b      	bhi.n	8009d60 <__ieee754_pow+0x220>
 8009d48:	f1b9 0f00 	cmp.w	r9, #0
 8009d4c:	da0b      	bge.n	8009d66 <__ieee754_pow+0x226>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	b011      	add	sp, #68	@ 0x44
 8009d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d56:	f001 b87f 	b.w	800ae58 <__math_oflow>
 8009d5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009dc0 <__ieee754_pow+0x280>
 8009d5e:	e7e7      	b.n	8009d30 <__ieee754_pow+0x1f0>
 8009d60:	f1b9 0f00 	cmp.w	r9, #0
 8009d64:	dcf3      	bgt.n	8009d4e <__ieee754_pow+0x20e>
 8009d66:	2000      	movs	r0, #0
 8009d68:	b011      	add	sp, #68	@ 0x44
 8009d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6e:	f001 b86b 	b.w	800ae48 <__math_uflow>
 8009d72:	4598      	cmp	r8, r3
 8009d74:	d20c      	bcs.n	8009d90 <__ieee754_pow+0x250>
 8009d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f7f6 fe71 	bl	8000a64 <__aeabi_dcmplt>
 8009d82:	3800      	subs	r0, #0
 8009d84:	bf18      	it	ne
 8009d86:	2001      	movne	r0, #1
 8009d88:	f1b9 0f00 	cmp.w	r9, #0
 8009d8c:	daec      	bge.n	8009d68 <__ieee754_pow+0x228>
 8009d8e:	e7df      	b.n	8009d50 <__ieee754_pow+0x210>
 8009d90:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <__ieee754_pow+0x294>)
 8009d92:	4598      	cmp	r8, r3
 8009d94:	f04f 0200 	mov.w	r2, #0
 8009d98:	d924      	bls.n	8009de4 <__ieee754_pow+0x2a4>
 8009d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f7f6 fe60 	bl	8000a64 <__aeabi_dcmplt>
 8009da4:	3800      	subs	r0, #0
 8009da6:	bf18      	it	ne
 8009da8:	2001      	movne	r0, #1
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	dccf      	bgt.n	8009d50 <__ieee754_pow+0x210>
 8009db0:	e7da      	b.n	8009d68 <__ieee754_pow+0x228>
 8009db2:	bf00      	nop
 8009db4:	f3af 8000 	nop.w
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	3ff00000 	.word	0x3ff00000
 8009dc0:	00000000 	.word	0x00000000
 8009dc4:	bff00000 	.word	0xbff00000
 8009dc8:	fff00000 	.word	0xfff00000
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	433fffff 	.word	0x433fffff
 8009dd4:	3ff00000 	.word	0x3ff00000
 8009dd8:	3fefffff 	.word	0x3fefffff
 8009ddc:	3fe00000 	.word	0x3fe00000
 8009de0:	43f00000 	.word	0x43f00000
 8009de4:	4b5a      	ldr	r3, [pc, #360]	@ (8009f50 <__ieee754_pow+0x410>)
 8009de6:	f7f6 fa13 	bl	8000210 <__aeabi_dsub>
 8009dea:	a351      	add	r3, pc, #324	@ (adr r3, 8009f30 <__ieee754_pow+0x3f0>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	4604      	mov	r4, r0
 8009df2:	460d      	mov	r5, r1
 8009df4:	f7f6 fbc4 	bl	8000580 <__aeabi_dmul>
 8009df8:	a34f      	add	r3, pc, #316	@ (adr r3, 8009f38 <__ieee754_pow+0x3f8>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460f      	mov	r7, r1
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7f6 fbbb 	bl	8000580 <__aeabi_dmul>
 8009e0a:	4b52      	ldr	r3, [pc, #328]	@ (8009f54 <__ieee754_pow+0x414>)
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	2200      	movs	r2, #0
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	f7f6 fbb3 	bl	8000580 <__aeabi_dmul>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	a148      	add	r1, pc, #288	@ (adr r1, 8009f40 <__ieee754_pow+0x400>)
 8009e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e24:	f7f6 f9f4 	bl	8000210 <__aeabi_dsub>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 fba8 	bl	8000580 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	2000      	movs	r0, #0
 8009e36:	4948      	ldr	r1, [pc, #288]	@ (8009f58 <__ieee754_pow+0x418>)
 8009e38:	f7f6 f9ea 	bl	8000210 <__aeabi_dsub>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4689      	mov	r9, r1
 8009e42:	462b      	mov	r3, r5
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 fb9a 	bl	8000580 <__aeabi_dmul>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fb94 	bl	8000580 <__aeabi_dmul>
 8009e58:	a33b      	add	r3, pc, #236	@ (adr r3, 8009f48 <__ieee754_pow+0x408>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 fb8f 	bl	8000580 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4650      	mov	r0, sl
 8009e68:	4659      	mov	r1, fp
 8009e6a:	f7f6 f9d1 	bl	8000210 <__aeabi_dsub>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	4630      	mov	r0, r6
 8009e78:	4639      	mov	r1, r7
 8009e7a:	f7f6 f9cb 	bl	8000214 <__adddf3>
 8009e7e:	2400      	movs	r4, #0
 8009e80:	4632      	mov	r2, r6
 8009e82:	463b      	mov	r3, r7
 8009e84:	4620      	mov	r0, r4
 8009e86:	460d      	mov	r5, r1
 8009e88:	f7f6 f9c2 	bl	8000210 <__aeabi_dsub>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4640      	mov	r0, r8
 8009e92:	4649      	mov	r1, r9
 8009e94:	f7f6 f9bc 	bl	8000210 <__aeabi_dsub>
 8009e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	460f      	mov	r7, r1
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb4:	f7f6 f9ac 	bl	8000210 <__aeabi_dsub>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	462b      	mov	r3, r5
 8009ebc:	f7f6 fb60 	bl	8000580 <__aeabi_dmul>
 8009ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fb58 	bl	8000580 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 f99c 	bl	8000214 <__adddf3>
 8009edc:	4652      	mov	r2, sl
 8009ede:	465b      	mov	r3, fp
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	460f      	mov	r7, r1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fb4a 	bl	8000580 <__aeabi_dmul>
 8009eec:	460b      	mov	r3, r1
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4680      	mov	r8, r0
 8009ef2:	4689      	mov	r9, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 f98c 	bl	8000214 <__adddf3>
 8009efc:	4b17      	ldr	r3, [pc, #92]	@ (8009f5c <__ieee754_pow+0x41c>)
 8009efe:	4299      	cmp	r1, r3
 8009f00:	4604      	mov	r4, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	468a      	mov	sl, r1
 8009f06:	468b      	mov	fp, r1
 8009f08:	f340 82ef 	ble.w	800a4ea <__ieee754_pow+0x9aa>
 8009f0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009f10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009f14:	4303      	orrs	r3, r0
 8009f16:	f000 81e8 	beq.w	800a2ea <__ieee754_pow+0x7aa>
 8009f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	f7f6 fd9f 	bl	8000a64 <__aeabi_dcmplt>
 8009f26:	3800      	subs	r0, #0
 8009f28:	bf18      	it	ne
 8009f2a:	2001      	movne	r0, #1
 8009f2c:	e710      	b.n	8009d50 <__ieee754_pow+0x210>
 8009f2e:	bf00      	nop
 8009f30:	60000000 	.word	0x60000000
 8009f34:	3ff71547 	.word	0x3ff71547
 8009f38:	f85ddf44 	.word	0xf85ddf44
 8009f3c:	3e54ae0b 	.word	0x3e54ae0b
 8009f40:	55555555 	.word	0x55555555
 8009f44:	3fd55555 	.word	0x3fd55555
 8009f48:	652b82fe 	.word	0x652b82fe
 8009f4c:	3ff71547 	.word	0x3ff71547
 8009f50:	3ff00000 	.word	0x3ff00000
 8009f54:	3fd00000 	.word	0x3fd00000
 8009f58:	3fe00000 	.word	0x3fe00000
 8009f5c:	408fffff 	.word	0x408fffff
 8009f60:	4bd5      	ldr	r3, [pc, #852]	@ (800a2b8 <__ieee754_pow+0x778>)
 8009f62:	402b      	ands	r3, r5
 8009f64:	2200      	movs	r2, #0
 8009f66:	b92b      	cbnz	r3, 8009f74 <__ieee754_pow+0x434>
 8009f68:	4bd4      	ldr	r3, [pc, #848]	@ (800a2bc <__ieee754_pow+0x77c>)
 8009f6a:	f7f6 fb09 	bl	8000580 <__aeabi_dmul>
 8009f6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009f72:	468b      	mov	fp, r1
 8009f74:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009f78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009f7c:	4413      	add	r3, r2
 8009f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f80:	4bcf      	ldr	r3, [pc, #828]	@ (800a2c0 <__ieee754_pow+0x780>)
 8009f82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009f86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009f8a:	459b      	cmp	fp, r3
 8009f8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f90:	dd08      	ble.n	8009fa4 <__ieee754_pow+0x464>
 8009f92:	4bcc      	ldr	r3, [pc, #816]	@ (800a2c4 <__ieee754_pow+0x784>)
 8009f94:	459b      	cmp	fp, r3
 8009f96:	f340 81a5 	ble.w	800a2e4 <__ieee754_pow+0x7a4>
 8009f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009fa4:	f04f 0a00 	mov.w	sl, #0
 8009fa8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009fac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fae:	4bc6      	ldr	r3, [pc, #792]	@ (800a2c8 <__ieee754_pow+0x788>)
 8009fb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009fb4:	ed93 7b00 	vldr	d7, [r3]
 8009fb8:	4629      	mov	r1, r5
 8009fba:	ec53 2b17 	vmov	r2, r3, d7
 8009fbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fc6:	f7f6 f923 	bl	8000210 <__aeabi_dsub>
 8009fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fd6:	f7f6 f91d 	bl	8000214 <__adddf3>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	2000      	movs	r0, #0
 8009fe0:	49ba      	ldr	r1, [pc, #744]	@ (800a2cc <__ieee754_pow+0x78c>)
 8009fe2:	f7f6 fbf7 	bl	80007d4 <__aeabi_ddiv>
 8009fe6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 fac5 	bl	8000580 <__aeabi_dmul>
 8009ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ffa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009ffe:	106d      	asrs	r5, r5, #1
 800a000:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a004:	f04f 0b00 	mov.w	fp, #0
 800a008:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a00c:	4661      	mov	r1, ip
 800a00e:	2200      	movs	r2, #0
 800a010:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a014:	4658      	mov	r0, fp
 800a016:	46e1      	mov	r9, ip
 800a018:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a01c:	4614      	mov	r4, r2
 800a01e:	461d      	mov	r5, r3
 800a020:	f7f6 faae 	bl	8000580 <__aeabi_dmul>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	f7f6 f8f0 	bl	8000210 <__aeabi_dsub>
 800a030:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a034:	4606      	mov	r6, r0
 800a036:	460f      	mov	r7, r1
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 f8e8 	bl	8000210 <__aeabi_dsub>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a048:	f7f6 f8e2 	bl	8000210 <__aeabi_dsub>
 800a04c:	465a      	mov	r2, fp
 800a04e:	464b      	mov	r3, r9
 800a050:	f7f6 fa96 	bl	8000580 <__aeabi_dmul>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 f8d8 	bl	8000210 <__aeabi_dsub>
 800a060:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a064:	f7f6 fa8c 	bl	8000580 <__aeabi_dmul>
 800a068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a06c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a070:	4610      	mov	r0, r2
 800a072:	4619      	mov	r1, r3
 800a074:	f7f6 fa84 	bl	8000580 <__aeabi_dmul>
 800a078:	a37d      	add	r3, pc, #500	@ (adr r3, 800a270 <__ieee754_pow+0x730>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	4604      	mov	r4, r0
 800a080:	460d      	mov	r5, r1
 800a082:	f7f6 fa7d 	bl	8000580 <__aeabi_dmul>
 800a086:	a37c      	add	r3, pc, #496	@ (adr r3, 800a278 <__ieee754_pow+0x738>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 f8c2 	bl	8000214 <__adddf3>
 800a090:	4622      	mov	r2, r4
 800a092:	462b      	mov	r3, r5
 800a094:	f7f6 fa74 	bl	8000580 <__aeabi_dmul>
 800a098:	a379      	add	r3, pc, #484	@ (adr r3, 800a280 <__ieee754_pow+0x740>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f8b9 	bl	8000214 <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	f7f6 fa6b 	bl	8000580 <__aeabi_dmul>
 800a0aa:	a377      	add	r3, pc, #476	@ (adr r3, 800a288 <__ieee754_pow+0x748>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 f8b0 	bl	8000214 <__adddf3>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	f7f6 fa62 	bl	8000580 <__aeabi_dmul>
 800a0bc:	a374      	add	r3, pc, #464	@ (adr r3, 800a290 <__ieee754_pow+0x750>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 f8a7 	bl	8000214 <__adddf3>
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	462b      	mov	r3, r5
 800a0ca:	f7f6 fa59 	bl	8000580 <__aeabi_dmul>
 800a0ce:	a372      	add	r3, pc, #456	@ (adr r3, 800a298 <__ieee754_pow+0x758>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f89e 	bl	8000214 <__adddf3>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	4606      	mov	r6, r0
 800a0dc:	460f      	mov	r7, r1
 800a0de:	462b      	mov	r3, r5
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 fa4c 	bl	8000580 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f7f6 fa46 	bl	8000580 <__aeabi_dmul>
 800a0f4:	465a      	mov	r2, fp
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a100:	f7f6 f888 	bl	8000214 <__adddf3>
 800a104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a108:	f7f6 fa3a 	bl	8000580 <__aeabi_dmul>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 f880 	bl	8000214 <__adddf3>
 800a114:	465a      	mov	r2, fp
 800a116:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a11a:	464b      	mov	r3, r9
 800a11c:	4658      	mov	r0, fp
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fa2e 	bl	8000580 <__aeabi_dmul>
 800a124:	4b6a      	ldr	r3, [pc, #424]	@ (800a2d0 <__ieee754_pow+0x790>)
 800a126:	2200      	movs	r2, #0
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	f7f6 f872 	bl	8000214 <__adddf3>
 800a130:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a134:	f7f6 f86e 	bl	8000214 <__adddf3>
 800a138:	46d8      	mov	r8, fp
 800a13a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a13e:	460d      	mov	r5, r1
 800a140:	465a      	mov	r2, fp
 800a142:	460b      	mov	r3, r1
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a14c:	f7f6 fa18 	bl	8000580 <__aeabi_dmul>
 800a150:	465c      	mov	r4, fp
 800a152:	4680      	mov	r8, r0
 800a154:	4689      	mov	r9, r1
 800a156:	4b5e      	ldr	r3, [pc, #376]	@ (800a2d0 <__ieee754_pow+0x790>)
 800a158:	2200      	movs	r2, #0
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 f857 	bl	8000210 <__aeabi_dsub>
 800a162:	4632      	mov	r2, r6
 800a164:	463b      	mov	r3, r7
 800a166:	f7f6 f853 	bl	8000210 <__aeabi_dsub>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a172:	f7f6 f84d 	bl	8000210 <__aeabi_dsub>
 800a176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17a:	f7f6 fa01 	bl	8000580 <__aeabi_dmul>
 800a17e:	4622      	mov	r2, r4
 800a180:	4606      	mov	r6, r0
 800a182:	460f      	mov	r7, r1
 800a184:	462b      	mov	r3, r5
 800a186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a18a:	f7f6 f9f9 	bl	8000580 <__aeabi_dmul>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 f83d 	bl	8000214 <__adddf3>
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f835 	bl	8000214 <__adddf3>
 800a1aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a1ae:	a33c      	add	r3, pc, #240	@ (adr r3, 800a2a0 <__ieee754_pow+0x760>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	4658      	mov	r0, fp
 800a1b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	f7f6 f9e0 	bl	8000580 <__aeabi_dmul>
 800a1c0:	465c      	mov	r4, fp
 800a1c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 f81f 	bl	8000210 <__aeabi_dsub>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	f7f6 f819 	bl	8000210 <__aeabi_dsub>
 800a1de:	a332      	add	r3, pc, #200	@ (adr r3, 800a2a8 <__ieee754_pow+0x768>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 f9cc 	bl	8000580 <__aeabi_dmul>
 800a1e8:	a331      	add	r3, pc, #196	@ (adr r3, 800a2b0 <__ieee754_pow+0x770>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 f9c3 	bl	8000580 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 f807 	bl	8000214 <__adddf3>
 800a206:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a208:	4b32      	ldr	r3, [pc, #200]	@ (800a2d4 <__ieee754_pow+0x794>)
 800a20a:	4413      	add	r3, r2
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f6 f800 	bl	8000214 <__adddf3>
 800a214:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a218:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a21a:	f7f6 f947 	bl	80004ac <__aeabi_i2d>
 800a21e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a220:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d8 <__ieee754_pow+0x798>)
 800a222:	4413      	add	r3, r2
 800a224:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a228:	4606      	mov	r6, r0
 800a22a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a22e:	460f      	mov	r7, r1
 800a230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a234:	f7f5 ffee 	bl	8000214 <__adddf3>
 800a238:	4642      	mov	r2, r8
 800a23a:	464b      	mov	r3, r9
 800a23c:	f7f5 ffea 	bl	8000214 <__adddf3>
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	f7f5 ffe6 	bl	8000214 <__adddf3>
 800a248:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	4658      	mov	r0, fp
 800a252:	460d      	mov	r5, r1
 800a254:	f7f5 ffdc 	bl	8000210 <__aeabi_dsub>
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	f7f5 ffd8 	bl	8000210 <__aeabi_dsub>
 800a260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a264:	f7f5 ffd4 	bl	8000210 <__aeabi_dsub>
 800a268:	465c      	mov	r4, fp
 800a26a:	4602      	mov	r2, r0
 800a26c:	e036      	b.n	800a2dc <__ieee754_pow+0x79c>
 800a26e:	bf00      	nop
 800a270:	4a454eef 	.word	0x4a454eef
 800a274:	3fca7e28 	.word	0x3fca7e28
 800a278:	93c9db65 	.word	0x93c9db65
 800a27c:	3fcd864a 	.word	0x3fcd864a
 800a280:	a91d4101 	.word	0xa91d4101
 800a284:	3fd17460 	.word	0x3fd17460
 800a288:	518f264d 	.word	0x518f264d
 800a28c:	3fd55555 	.word	0x3fd55555
 800a290:	db6fabff 	.word	0xdb6fabff
 800a294:	3fdb6db6 	.word	0x3fdb6db6
 800a298:	33333303 	.word	0x33333303
 800a29c:	3fe33333 	.word	0x3fe33333
 800a2a0:	e0000000 	.word	0xe0000000
 800a2a4:	3feec709 	.word	0x3feec709
 800a2a8:	dc3a03fd 	.word	0xdc3a03fd
 800a2ac:	3feec709 	.word	0x3feec709
 800a2b0:	145b01f5 	.word	0x145b01f5
 800a2b4:	be3e2fe0 	.word	0xbe3e2fe0
 800a2b8:	7ff00000 	.word	0x7ff00000
 800a2bc:	43400000 	.word	0x43400000
 800a2c0:	0003988e 	.word	0x0003988e
 800a2c4:	000bb679 	.word	0x000bb679
 800a2c8:	0800b6c8 	.word	0x0800b6c8
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	40080000 	.word	0x40080000
 800a2d4:	0800b6a8 	.word	0x0800b6a8
 800a2d8:	0800b6b8 	.word	0x0800b6b8
 800a2dc:	460b      	mov	r3, r1
 800a2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e2:	e5d7      	b.n	8009e94 <__ieee754_pow+0x354>
 800a2e4:	f04f 0a01 	mov.w	sl, #1
 800a2e8:	e65e      	b.n	8009fa8 <__ieee754_pow+0x468>
 800a2ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a5bc <__ieee754_pow+0xa7c>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	f7f5 ff8e 	bl	8000214 <__adddf3>
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	e9cd 0100 	strd	r0, r1, [sp]
 800a2fe:	464b      	mov	r3, r9
 800a300:	4620      	mov	r0, r4
 800a302:	4629      	mov	r1, r5
 800a304:	f7f5 ff84 	bl	8000210 <__aeabi_dsub>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a310:	f7f6 fbc6 	bl	8000aa0 <__aeabi_dcmpgt>
 800a314:	2800      	cmp	r0, #0
 800a316:	f47f ae00 	bne.w	8009f1a <__ieee754_pow+0x3da>
 800a31a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a31e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a322:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a326:	fa43 fa0a 	asr.w	sl, r3, sl
 800a32a:	44da      	add	sl, fp
 800a32c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a330:	489d      	ldr	r0, [pc, #628]	@ (800a5a8 <__ieee754_pow+0xa68>)
 800a332:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a336:	4108      	asrs	r0, r1
 800a338:	ea00 030a 	and.w	r3, r0, sl
 800a33c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a340:	f1c1 0114 	rsb	r1, r1, #20
 800a344:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a348:	fa4a fa01 	asr.w	sl, sl, r1
 800a34c:	f1bb 0f00 	cmp.w	fp, #0
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	bfb8      	it	lt
 800a35a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a35e:	f7f5 ff57 	bl	8000210 <__aeabi_dsub>
 800a362:	4680      	mov	r8, r0
 800a364:	4689      	mov	r9, r1
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f5 ff51 	bl	8000214 <__adddf3>
 800a372:	2400      	movs	r4, #0
 800a374:	a37c      	add	r3, pc, #496	@ (adr r3, 800a568 <__ieee754_pow+0xa28>)
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	4620      	mov	r0, r4
 800a37c:	460d      	mov	r5, r1
 800a37e:	f7f6 f8ff 	bl	8000580 <__aeabi_dmul>
 800a382:	4642      	mov	r2, r8
 800a384:	e9cd 0100 	strd	r0, r1, [sp]
 800a388:	464b      	mov	r3, r9
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f5 ff3f 	bl	8000210 <__aeabi_dsub>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f5 ff39 	bl	8000210 <__aeabi_dsub>
 800a39e:	a374      	add	r3, pc, #464	@ (adr r3, 800a570 <__ieee754_pow+0xa30>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f6 f8ec 	bl	8000580 <__aeabi_dmul>
 800a3a8:	a373      	add	r3, pc, #460	@ (adr r3, 800a578 <__ieee754_pow+0xa38>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	4689      	mov	r9, r1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f7f6 f8e3 	bl	8000580 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	f7f5 ff27 	bl	8000214 <__adddf3>
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3d2:	f7f5 ff1f 	bl	8000214 <__adddf3>
 800a3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4689      	mov	r9, r1
 800a3de:	f7f5 ff17 	bl	8000210 <__aeabi_dsub>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7f5 ff11 	bl	8000210 <__aeabi_dsub>
 800a3ee:	4642      	mov	r2, r8
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f6 f8c1 	bl	8000580 <__aeabi_dmul>
 800a3fe:	a360      	add	r3, pc, #384	@ (adr r3, 800a580 <__ieee754_pow+0xa40>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	4604      	mov	r4, r0
 800a406:	460d      	mov	r5, r1
 800a408:	f7f6 f8ba 	bl	8000580 <__aeabi_dmul>
 800a40c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a588 <__ieee754_pow+0xa48>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 fefd 	bl	8000210 <__aeabi_dsub>
 800a416:	4622      	mov	r2, r4
 800a418:	462b      	mov	r3, r5
 800a41a:	f7f6 f8b1 	bl	8000580 <__aeabi_dmul>
 800a41e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a590 <__ieee754_pow+0xa50>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 fef6 	bl	8000214 <__adddf3>
 800a428:	4622      	mov	r2, r4
 800a42a:	462b      	mov	r3, r5
 800a42c:	f7f6 f8a8 	bl	8000580 <__aeabi_dmul>
 800a430:	a359      	add	r3, pc, #356	@ (adr r3, 800a598 <__ieee754_pow+0xa58>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 feeb 	bl	8000210 <__aeabi_dsub>
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	f7f6 f89f 	bl	8000580 <__aeabi_dmul>
 800a442:	a357      	add	r3, pc, #348	@ (adr r3, 800a5a0 <__ieee754_pow+0xa60>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 fee4 	bl	8000214 <__adddf3>
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	f7f6 f896 	bl	8000580 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4640      	mov	r0, r8
 800a45a:	4649      	mov	r1, r9
 800a45c:	f7f5 fed8 	bl	8000210 <__aeabi_dsub>
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4640      	mov	r0, r8
 800a46a:	4649      	mov	r1, r9
 800a46c:	f7f6 f888 	bl	8000580 <__aeabi_dmul>
 800a470:	2200      	movs	r2, #0
 800a472:	e9cd 0100 	strd	r0, r1, [sp]
 800a476:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7f5 fec7 	bl	8000210 <__aeabi_dsub>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a48a:	f7f6 f9a3 	bl	80007d4 <__aeabi_ddiv>
 800a48e:	4632      	mov	r2, r6
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	463b      	mov	r3, r7
 800a496:	4640      	mov	r0, r8
 800a498:	4649      	mov	r1, r9
 800a49a:	f7f6 f871 	bl	8000580 <__aeabi_dmul>
 800a49e:	4632      	mov	r2, r6
 800a4a0:	463b      	mov	r3, r7
 800a4a2:	f7f5 feb7 	bl	8000214 <__adddf3>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	f7f5 feaf 	bl	8000210 <__aeabi_dsub>
 800a4b2:	4642      	mov	r2, r8
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	f7f5 feab 	bl	8000210 <__aeabi_dsub>
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4602      	mov	r2, r0
 800a4be:	493b      	ldr	r1, [pc, #236]	@ (800a5ac <__ieee754_pow+0xa6c>)
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f7f5 fea5 	bl	8000210 <__aeabi_dsub>
 800a4c6:	ec41 0b10 	vmov	d0, r0, r1
 800a4ca:	ee10 3a90 	vmov	r3, s1
 800a4ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a4d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4d6:	da30      	bge.n	800a53a <__ieee754_pow+0x9fa>
 800a4d8:	4650      	mov	r0, sl
 800a4da:	f000 fc09 	bl	800acf0 <scalbn>
 800a4de:	ec51 0b10 	vmov	r0, r1, d0
 800a4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e6:	f7ff bbd2 	b.w	8009c8e <__ieee754_pow+0x14e>
 800a4ea:	4c31      	ldr	r4, [pc, #196]	@ (800a5b0 <__ieee754_pow+0xa70>)
 800a4ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d91a      	bls.n	800a52a <__ieee754_pow+0x9ea>
 800a4f4:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b4 <__ieee754_pow+0xa74>)
 800a4f6:	440b      	add	r3, r1
 800a4f8:	4303      	orrs	r3, r0
 800a4fa:	d009      	beq.n	800a510 <__ieee754_pow+0x9d0>
 800a4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a500:	2200      	movs	r2, #0
 800a502:	2300      	movs	r3, #0
 800a504:	f7f6 faae 	bl	8000a64 <__aeabi_dcmplt>
 800a508:	3800      	subs	r0, #0
 800a50a:	bf18      	it	ne
 800a50c:	2001      	movne	r0, #1
 800a50e:	e42b      	b.n	8009d68 <__ieee754_pow+0x228>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	f7f5 fe7c 	bl	8000210 <__aeabi_dsub>
 800a518:	4632      	mov	r2, r6
 800a51a:	463b      	mov	r3, r7
 800a51c:	f7f6 fab6 	bl	8000a8c <__aeabi_dcmpge>
 800a520:	2800      	cmp	r0, #0
 800a522:	d1eb      	bne.n	800a4fc <__ieee754_pow+0x9bc>
 800a524:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a5c4 <__ieee754_pow+0xa84>
 800a528:	e6f7      	b.n	800a31a <__ieee754_pow+0x7da>
 800a52a:	469a      	mov	sl, r3
 800a52c:	4b22      	ldr	r3, [pc, #136]	@ (800a5b8 <__ieee754_pow+0xa78>)
 800a52e:	459a      	cmp	sl, r3
 800a530:	f63f aef3 	bhi.w	800a31a <__ieee754_pow+0x7da>
 800a534:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a538:	e715      	b.n	800a366 <__ieee754_pow+0x826>
 800a53a:	ec51 0b10 	vmov	r0, r1, d0
 800a53e:	4619      	mov	r1, r3
 800a540:	e7cf      	b.n	800a4e2 <__ieee754_pow+0x9a2>
 800a542:	491a      	ldr	r1, [pc, #104]	@ (800a5ac <__ieee754_pow+0xa6c>)
 800a544:	2000      	movs	r0, #0
 800a546:	f7ff bb18 	b.w	8009b7a <__ieee754_pow+0x3a>
 800a54a:	2000      	movs	r0, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	f7ff bb14 	b.w	8009b7a <__ieee754_pow+0x3a>
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	f7ff bb10 	b.w	8009b7a <__ieee754_pow+0x3a>
 800a55a:	460c      	mov	r4, r1
 800a55c:	f7ff bb5e 	b.w	8009c1c <__ieee754_pow+0xdc>
 800a560:	2400      	movs	r4, #0
 800a562:	f7ff bb49 	b.w	8009bf8 <__ieee754_pow+0xb8>
 800a566:	bf00      	nop
 800a568:	00000000 	.word	0x00000000
 800a56c:	3fe62e43 	.word	0x3fe62e43
 800a570:	fefa39ef 	.word	0xfefa39ef
 800a574:	3fe62e42 	.word	0x3fe62e42
 800a578:	0ca86c39 	.word	0x0ca86c39
 800a57c:	be205c61 	.word	0xbe205c61
 800a580:	72bea4d0 	.word	0x72bea4d0
 800a584:	3e663769 	.word	0x3e663769
 800a588:	c5d26bf1 	.word	0xc5d26bf1
 800a58c:	3ebbbd41 	.word	0x3ebbbd41
 800a590:	af25de2c 	.word	0xaf25de2c
 800a594:	3f11566a 	.word	0x3f11566a
 800a598:	16bebd93 	.word	0x16bebd93
 800a59c:	3f66c16c 	.word	0x3f66c16c
 800a5a0:	5555553e 	.word	0x5555553e
 800a5a4:	3fc55555 	.word	0x3fc55555
 800a5a8:	fff00000 	.word	0xfff00000
 800a5ac:	3ff00000 	.word	0x3ff00000
 800a5b0:	4090cbff 	.word	0x4090cbff
 800a5b4:	3f6f3400 	.word	0x3f6f3400
 800a5b8:	3fe00000 	.word	0x3fe00000
 800a5bc:	652b82fe 	.word	0x652b82fe
 800a5c0:	3c971547 	.word	0x3c971547
 800a5c4:	4090cc00 	.word	0x4090cc00

0800a5c8 <__ieee754_rem_pio2>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ec57 6b10 	vmov	r6, r7, d0
 800a5d0:	4bc5      	ldr	r3, [pc, #788]	@ (800a8e8 <__ieee754_rem_pio2+0x320>)
 800a5d2:	b08d      	sub	sp, #52	@ 0x34
 800a5d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a5d8:	4598      	cmp	r8, r3
 800a5da:	4604      	mov	r4, r0
 800a5dc:	9704      	str	r7, [sp, #16]
 800a5de:	d807      	bhi.n	800a5f0 <__ieee754_rem_pio2+0x28>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	ed80 0b00 	vstr	d0, [r0]
 800a5e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	e028      	b.n	800a642 <__ieee754_rem_pio2+0x7a>
 800a5f0:	4bbe      	ldr	r3, [pc, #760]	@ (800a8ec <__ieee754_rem_pio2+0x324>)
 800a5f2:	4598      	cmp	r8, r3
 800a5f4:	d878      	bhi.n	800a6e8 <__ieee754_rem_pio2+0x120>
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	4dbd      	ldr	r5, [pc, #756]	@ (800a8f0 <__ieee754_rem_pio2+0x328>)
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a8b0 <__ieee754_rem_pio2+0x2e8>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	4639      	mov	r1, r7
 800a606:	dd38      	ble.n	800a67a <__ieee754_rem_pio2+0xb2>
 800a608:	f7f5 fe02 	bl	8000210 <__aeabi_dsub>
 800a60c:	45a8      	cmp	r8, r5
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	d01a      	beq.n	800a64a <__ieee754_rem_pio2+0x82>
 800a614:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a8b8 <__ieee754_rem_pio2+0x2f0>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	f7f5 fdf9 	bl	8000210 <__aeabi_dsub>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4680      	mov	r8, r0
 800a624:	4689      	mov	r9, r1
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f5 fdf1 	bl	8000210 <__aeabi_dsub>
 800a62e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a8b8 <__ieee754_rem_pio2+0x2f0>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f5 fdec 	bl	8000210 <__aeabi_dsub>
 800a638:	e9c4 8900 	strd	r8, r9, [r4]
 800a63c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a640:	2501      	movs	r5, #1
 800a642:	4628      	mov	r0, r5
 800a644:	b00d      	add	sp, #52	@ 0x34
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a8c0 <__ieee754_rem_pio2+0x2f8>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f7f5 fdde 	bl	8000210 <__aeabi_dsub>
 800a654:	a39c      	add	r3, pc, #624	@ (adr r3, 800a8c8 <__ieee754_rem_pio2+0x300>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	f7f5 fdd7 	bl	8000210 <__aeabi_dsub>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	4680      	mov	r8, r0
 800a668:	4689      	mov	r9, r1
 800a66a:	4630      	mov	r0, r6
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f5 fdcf 	bl	8000210 <__aeabi_dsub>
 800a672:	a395      	add	r3, pc, #596	@ (adr r3, 800a8c8 <__ieee754_rem_pio2+0x300>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	e7dc      	b.n	800a634 <__ieee754_rem_pio2+0x6c>
 800a67a:	f7f5 fdcb 	bl	8000214 <__adddf3>
 800a67e:	45a8      	cmp	r8, r5
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	d018      	beq.n	800a6b8 <__ieee754_rem_pio2+0xf0>
 800a686:	a38c      	add	r3, pc, #560	@ (adr r3, 800a8b8 <__ieee754_rem_pio2+0x2f0>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f5 fdc2 	bl	8000214 <__adddf3>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4680      	mov	r8, r0
 800a696:	4689      	mov	r9, r1
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f5 fdb8 	bl	8000210 <__aeabi_dsub>
 800a6a0:	a385      	add	r3, pc, #532	@ (adr r3, 800a8b8 <__ieee754_rem_pio2+0x2f0>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fdb5 	bl	8000214 <__adddf3>
 800a6aa:	f04f 35ff 	mov.w	r5, #4294967295
 800a6ae:	e9c4 8900 	strd	r8, r9, [r4]
 800a6b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a6b6:	e7c4      	b.n	800a642 <__ieee754_rem_pio2+0x7a>
 800a6b8:	a381      	add	r3, pc, #516	@ (adr r3, 800a8c0 <__ieee754_rem_pio2+0x2f8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fda9 	bl	8000214 <__adddf3>
 800a6c2:	a381      	add	r3, pc, #516	@ (adr r3, 800a8c8 <__ieee754_rem_pio2+0x300>)
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460f      	mov	r7, r1
 800a6cc:	f7f5 fda2 	bl	8000214 <__adddf3>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	4689      	mov	r9, r1
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f5 fd98 	bl	8000210 <__aeabi_dsub>
 800a6e0:	a379      	add	r3, pc, #484	@ (adr r3, 800a8c8 <__ieee754_rem_pio2+0x300>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	e7de      	b.n	800a6a6 <__ieee754_rem_pio2+0xde>
 800a6e8:	4b82      	ldr	r3, [pc, #520]	@ (800a8f4 <__ieee754_rem_pio2+0x32c>)
 800a6ea:	4598      	cmp	r8, r3
 800a6ec:	f200 80d1 	bhi.w	800a892 <__ieee754_rem_pio2+0x2ca>
 800a6f0:	f7fe fc32 	bl	8008f58 <fabs>
 800a6f4:	ec57 6b10 	vmov	r6, r7, d0
 800a6f8:	a375      	add	r3, pc, #468	@ (adr r3, 800a8d0 <__ieee754_rem_pio2+0x308>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	4630      	mov	r0, r6
 800a700:	4639      	mov	r1, r7
 800a702:	f7f5 ff3d 	bl	8000580 <__aeabi_dmul>
 800a706:	4b7c      	ldr	r3, [pc, #496]	@ (800a8f8 <__ieee754_rem_pio2+0x330>)
 800a708:	2200      	movs	r2, #0
 800a70a:	f7f5 fd83 	bl	8000214 <__adddf3>
 800a70e:	f7f6 f9e7 	bl	8000ae0 <__aeabi_d2iz>
 800a712:	4605      	mov	r5, r0
 800a714:	f7f5 feca 	bl	80004ac <__aeabi_i2d>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a720:	a363      	add	r3, pc, #396	@ (adr r3, 800a8b0 <__ieee754_rem_pio2+0x2e8>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 ff2b 	bl	8000580 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f5 fd6d 	bl	8000210 <__aeabi_dsub>
 800a736:	a360      	add	r3, pc, #384	@ (adr r3, 800a8b8 <__ieee754_rem_pio2+0x2f0>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a744:	f7f5 ff1c 	bl	8000580 <__aeabi_dmul>
 800a748:	2d1f      	cmp	r5, #31
 800a74a:	4606      	mov	r6, r0
 800a74c:	460f      	mov	r7, r1
 800a74e:	dc0c      	bgt.n	800a76a <__ieee754_rem_pio2+0x1a2>
 800a750:	4b6a      	ldr	r3, [pc, #424]	@ (800a8fc <__ieee754_rem_pio2+0x334>)
 800a752:	1e6a      	subs	r2, r5, #1
 800a754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a758:	4543      	cmp	r3, r8
 800a75a:	d006      	beq.n	800a76a <__ieee754_rem_pio2+0x1a2>
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	4650      	mov	r0, sl
 800a762:	4659      	mov	r1, fp
 800a764:	f7f5 fd54 	bl	8000210 <__aeabi_dsub>
 800a768:	e00e      	b.n	800a788 <__ieee754_rem_pio2+0x1c0>
 800a76a:	463b      	mov	r3, r7
 800a76c:	4632      	mov	r2, r6
 800a76e:	4650      	mov	r0, sl
 800a770:	4659      	mov	r1, fp
 800a772:	f7f5 fd4d 	bl	8000210 <__aeabi_dsub>
 800a776:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a77a:	9305      	str	r3, [sp, #20]
 800a77c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a780:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a784:	2b10      	cmp	r3, #16
 800a786:	dc02      	bgt.n	800a78e <__ieee754_rem_pio2+0x1c6>
 800a788:	e9c4 0100 	strd	r0, r1, [r4]
 800a78c:	e039      	b.n	800a802 <__ieee754_rem_pio2+0x23a>
 800a78e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a8c0 <__ieee754_rem_pio2+0x2f8>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a798:	f7f5 fef2 	bl	8000580 <__aeabi_dmul>
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	4659      	mov	r1, fp
 800a7a8:	f7f5 fd32 	bl	8000210 <__aeabi_dsub>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4680      	mov	r8, r0
 800a7b2:	4689      	mov	r9, r1
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	4659      	mov	r1, fp
 800a7b8:	f7f5 fd2a 	bl	8000210 <__aeabi_dsub>
 800a7bc:	4632      	mov	r2, r6
 800a7be:	463b      	mov	r3, r7
 800a7c0:	f7f5 fd26 	bl	8000210 <__aeabi_dsub>
 800a7c4:	a340      	add	r3, pc, #256	@ (adr r3, 800a8c8 <__ieee754_rem_pio2+0x300>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d2:	f7f5 fed5 	bl	8000580 <__aeabi_dmul>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f7f5 fd19 	bl	8000210 <__aeabi_dsub>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f5 fd11 	bl	8000210 <__aeabi_dsub>
 800a7ee:	9a05      	ldr	r2, [sp, #20]
 800a7f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b31      	cmp	r3, #49	@ 0x31
 800a7f8:	dc20      	bgt.n	800a83c <__ieee754_rem_pio2+0x274>
 800a7fa:	e9c4 0100 	strd	r0, r1, [r4]
 800a7fe:	46c2      	mov	sl, r8
 800a800:	46cb      	mov	fp, r9
 800a802:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a806:	4650      	mov	r0, sl
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4659      	mov	r1, fp
 800a80e:	f7f5 fcff 	bl	8000210 <__aeabi_dsub>
 800a812:	463b      	mov	r3, r7
 800a814:	4632      	mov	r2, r6
 800a816:	f7f5 fcfb 	bl	8000210 <__aeabi_dsub>
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a822:	f6bf af0e 	bge.w	800a642 <__ieee754_rem_pio2+0x7a>
 800a826:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a830:	f8c4 8000 	str.w	r8, [r4]
 800a834:	60a0      	str	r0, [r4, #8]
 800a836:	60e3      	str	r3, [r4, #12]
 800a838:	426d      	negs	r5, r5
 800a83a:	e702      	b.n	800a642 <__ieee754_rem_pio2+0x7a>
 800a83c:	a326      	add	r3, pc, #152	@ (adr r3, 800a8d8 <__ieee754_rem_pio2+0x310>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a846:	f7f5 fe9b 	bl	8000580 <__aeabi_dmul>
 800a84a:	4606      	mov	r6, r0
 800a84c:	460f      	mov	r7, r1
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4640      	mov	r0, r8
 800a854:	4649      	mov	r1, r9
 800a856:	f7f5 fcdb 	bl	8000210 <__aeabi_dsub>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4682      	mov	sl, r0
 800a860:	468b      	mov	fp, r1
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 fcd3 	bl	8000210 <__aeabi_dsub>
 800a86a:	4632      	mov	r2, r6
 800a86c:	463b      	mov	r3, r7
 800a86e:	f7f5 fccf 	bl	8000210 <__aeabi_dsub>
 800a872:	a31b      	add	r3, pc, #108	@ (adr r3, 800a8e0 <__ieee754_rem_pio2+0x318>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a880:	f7f5 fe7e 	bl	8000580 <__aeabi_dmul>
 800a884:	4632      	mov	r2, r6
 800a886:	463b      	mov	r3, r7
 800a888:	f7f5 fcc2 	bl	8000210 <__aeabi_dsub>
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	e764      	b.n	800a75c <__ieee754_rem_pio2+0x194>
 800a892:	4b1b      	ldr	r3, [pc, #108]	@ (800a900 <__ieee754_rem_pio2+0x338>)
 800a894:	4598      	cmp	r8, r3
 800a896:	d935      	bls.n	800a904 <__ieee754_rem_pio2+0x33c>
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fcb6 	bl	8000210 <__aeabi_dsub>
 800a8a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8a8:	e9c4 0100 	strd	r0, r1, [r4]
 800a8ac:	e69e      	b.n	800a5ec <__ieee754_rem_pio2+0x24>
 800a8ae:	bf00      	nop
 800a8b0:	54400000 	.word	0x54400000
 800a8b4:	3ff921fb 	.word	0x3ff921fb
 800a8b8:	1a626331 	.word	0x1a626331
 800a8bc:	3dd0b461 	.word	0x3dd0b461
 800a8c0:	1a600000 	.word	0x1a600000
 800a8c4:	3dd0b461 	.word	0x3dd0b461
 800a8c8:	2e037073 	.word	0x2e037073
 800a8cc:	3ba3198a 	.word	0x3ba3198a
 800a8d0:	6dc9c883 	.word	0x6dc9c883
 800a8d4:	3fe45f30 	.word	0x3fe45f30
 800a8d8:	2e000000 	.word	0x2e000000
 800a8dc:	3ba3198a 	.word	0x3ba3198a
 800a8e0:	252049c1 	.word	0x252049c1
 800a8e4:	397b839a 	.word	0x397b839a
 800a8e8:	3fe921fb 	.word	0x3fe921fb
 800a8ec:	4002d97b 	.word	0x4002d97b
 800a8f0:	3ff921fb 	.word	0x3ff921fb
 800a8f4:	413921fb 	.word	0x413921fb
 800a8f8:	3fe00000 	.word	0x3fe00000
 800a8fc:	0800b6d8 	.word	0x0800b6d8
 800a900:	7fefffff 	.word	0x7fefffff
 800a904:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a908:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a90c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a910:	4630      	mov	r0, r6
 800a912:	460f      	mov	r7, r1
 800a914:	f7f6 f8e4 	bl	8000ae0 <__aeabi_d2iz>
 800a918:	f7f5 fdc8 	bl	80004ac <__aeabi_i2d>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4630      	mov	r0, r6
 800a922:	4639      	mov	r1, r7
 800a924:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a928:	f7f5 fc72 	bl	8000210 <__aeabi_dsub>
 800a92c:	4b22      	ldr	r3, [pc, #136]	@ (800a9b8 <__ieee754_rem_pio2+0x3f0>)
 800a92e:	2200      	movs	r2, #0
 800a930:	f7f5 fe26 	bl	8000580 <__aeabi_dmul>
 800a934:	460f      	mov	r7, r1
 800a936:	4606      	mov	r6, r0
 800a938:	f7f6 f8d2 	bl	8000ae0 <__aeabi_d2iz>
 800a93c:	f7f5 fdb6 	bl	80004ac <__aeabi_i2d>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4630      	mov	r0, r6
 800a946:	4639      	mov	r1, r7
 800a948:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a94c:	f7f5 fc60 	bl	8000210 <__aeabi_dsub>
 800a950:	4b19      	ldr	r3, [pc, #100]	@ (800a9b8 <__ieee754_rem_pio2+0x3f0>)
 800a952:	2200      	movs	r2, #0
 800a954:	f7f5 fe14 	bl	8000580 <__aeabi_dmul>
 800a958:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a95c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a960:	f04f 0803 	mov.w	r8, #3
 800a964:	2600      	movs	r6, #0
 800a966:	2700      	movs	r7, #0
 800a968:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a96c:	4632      	mov	r2, r6
 800a96e:	463b      	mov	r3, r7
 800a970:	46c2      	mov	sl, r8
 800a972:	f108 38ff 	add.w	r8, r8, #4294967295
 800a976:	f7f6 f86b 	bl	8000a50 <__aeabi_dcmpeq>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d1f4      	bne.n	800a968 <__ieee754_rem_pio2+0x3a0>
 800a97e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9bc <__ieee754_rem_pio2+0x3f4>)
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	2302      	movs	r3, #2
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	462a      	mov	r2, r5
 800a988:	4653      	mov	r3, sl
 800a98a:	4621      	mov	r1, r4
 800a98c:	a806      	add	r0, sp, #24
 800a98e:	f000 fa6b 	bl	800ae68 <__kernel_rem_pio2>
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	4605      	mov	r5, r0
 800a998:	f6bf ae53 	bge.w	800a642 <__ieee754_rem_pio2+0x7a>
 800a99c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a9a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9a4:	e9c4 2300 	strd	r2, r3, [r4]
 800a9a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a9ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a9b4:	e740      	b.n	800a838 <__ieee754_rem_pio2+0x270>
 800a9b6:	bf00      	nop
 800a9b8:	41700000 	.word	0x41700000
 800a9bc:	0800b758 	.word	0x0800b758

0800a9c0 <atan>:
 800a9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	ec55 4b10 	vmov	r4, r5, d0
 800a9c8:	4bbf      	ldr	r3, [pc, #764]	@ (800acc8 <atan+0x308>)
 800a9ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a9ce:	429e      	cmp	r6, r3
 800a9d0:	46ab      	mov	fp, r5
 800a9d2:	d918      	bls.n	800aa06 <atan+0x46>
 800a9d4:	4bbd      	ldr	r3, [pc, #756]	@ (800accc <atan+0x30c>)
 800a9d6:	429e      	cmp	r6, r3
 800a9d8:	d801      	bhi.n	800a9de <atan+0x1e>
 800a9da:	d109      	bne.n	800a9f0 <atan+0x30>
 800a9dc:	b144      	cbz	r4, 800a9f0 <atan+0x30>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f5 fc15 	bl	8000214 <__adddf3>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	e006      	b.n	800a9fe <atan+0x3e>
 800a9f0:	f1bb 0f00 	cmp.w	fp, #0
 800a9f4:	f340 812b 	ble.w	800ac4e <atan+0x28e>
 800a9f8:	a597      	add	r5, pc, #604	@ (adr r5, 800ac58 <atan+0x298>)
 800a9fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9fe:	ec45 4b10 	vmov	d0, r4, r5
 800aa02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	4bb2      	ldr	r3, [pc, #712]	@ (800acd0 <atan+0x310>)
 800aa08:	429e      	cmp	r6, r3
 800aa0a:	d813      	bhi.n	800aa34 <atan+0x74>
 800aa0c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800aa10:	429e      	cmp	r6, r3
 800aa12:	d80c      	bhi.n	800aa2e <atan+0x6e>
 800aa14:	a392      	add	r3, pc, #584	@ (adr r3, 800ac60 <atan+0x2a0>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f5 fbf9 	bl	8000214 <__adddf3>
 800aa22:	4bac      	ldr	r3, [pc, #688]	@ (800acd4 <atan+0x314>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	f7f6 f83b 	bl	8000aa0 <__aeabi_dcmpgt>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d1e7      	bne.n	800a9fe <atan+0x3e>
 800aa2e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa32:	e029      	b.n	800aa88 <atan+0xc8>
 800aa34:	f7fe fa90 	bl	8008f58 <fabs>
 800aa38:	4ba7      	ldr	r3, [pc, #668]	@ (800acd8 <atan+0x318>)
 800aa3a:	429e      	cmp	r6, r3
 800aa3c:	ec55 4b10 	vmov	r4, r5, d0
 800aa40:	f200 80bc 	bhi.w	800abbc <atan+0x1fc>
 800aa44:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800aa48:	429e      	cmp	r6, r3
 800aa4a:	f200 809e 	bhi.w	800ab8a <atan+0x1ca>
 800aa4e:	4622      	mov	r2, r4
 800aa50:	462b      	mov	r3, r5
 800aa52:	4620      	mov	r0, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	f7f5 fbdd 	bl	8000214 <__adddf3>
 800aa5a:	4b9e      	ldr	r3, [pc, #632]	@ (800acd4 <atan+0x314>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f7f5 fbd7 	bl	8000210 <__aeabi_dsub>
 800aa62:	2200      	movs	r2, #0
 800aa64:	4606      	mov	r6, r0
 800aa66:	460f      	mov	r7, r1
 800aa68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f5 fbd0 	bl	8000214 <__adddf3>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f5 feaa 	bl	80007d4 <__aeabi_ddiv>
 800aa80:	f04f 0a00 	mov.w	sl, #0
 800aa84:	4604      	mov	r4, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	4622      	mov	r2, r4
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fd76 	bl	8000580 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4680      	mov	r8, r0
 800aa9a:	4689      	mov	r9, r1
 800aa9c:	f7f5 fd70 	bl	8000580 <__aeabi_dmul>
 800aaa0:	a371      	add	r3, pc, #452	@ (adr r3, 800ac68 <atan+0x2a8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	f7f5 fd69 	bl	8000580 <__aeabi_dmul>
 800aaae:	a370      	add	r3, pc, #448	@ (adr r3, 800ac70 <atan+0x2b0>)
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f5 fbae 	bl	8000214 <__adddf3>
 800aab8:	4632      	mov	r2, r6
 800aaba:	463b      	mov	r3, r7
 800aabc:	f7f5 fd60 	bl	8000580 <__aeabi_dmul>
 800aac0:	a36d      	add	r3, pc, #436	@ (adr r3, 800ac78 <atan+0x2b8>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fba5 	bl	8000214 <__adddf3>
 800aaca:	4632      	mov	r2, r6
 800aacc:	463b      	mov	r3, r7
 800aace:	f7f5 fd57 	bl	8000580 <__aeabi_dmul>
 800aad2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ac80 <atan+0x2c0>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fb9c 	bl	8000214 <__adddf3>
 800aadc:	4632      	mov	r2, r6
 800aade:	463b      	mov	r3, r7
 800aae0:	f7f5 fd4e 	bl	8000580 <__aeabi_dmul>
 800aae4:	a368      	add	r3, pc, #416	@ (adr r3, 800ac88 <atan+0x2c8>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fb93 	bl	8000214 <__adddf3>
 800aaee:	4632      	mov	r2, r6
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	f7f5 fd45 	bl	8000580 <__aeabi_dmul>
 800aaf6:	a366      	add	r3, pc, #408	@ (adr r3, 800ac90 <atan+0x2d0>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fb8a 	bl	8000214 <__adddf3>
 800ab00:	4642      	mov	r2, r8
 800ab02:	464b      	mov	r3, r9
 800ab04:	f7f5 fd3c 	bl	8000580 <__aeabi_dmul>
 800ab08:	a363      	add	r3, pc, #396	@ (adr r3, 800ac98 <atan+0x2d8>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	4680      	mov	r8, r0
 800ab10:	4689      	mov	r9, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fd33 	bl	8000580 <__aeabi_dmul>
 800ab1a:	a361      	add	r3, pc, #388	@ (adr r3, 800aca0 <atan+0x2e0>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fb76 	bl	8000210 <__aeabi_dsub>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f5 fd2a 	bl	8000580 <__aeabi_dmul>
 800ab2c:	a35e      	add	r3, pc, #376	@ (adr r3, 800aca8 <atan+0x2e8>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f7f5 fb6d 	bl	8000210 <__aeabi_dsub>
 800ab36:	4632      	mov	r2, r6
 800ab38:	463b      	mov	r3, r7
 800ab3a:	f7f5 fd21 	bl	8000580 <__aeabi_dmul>
 800ab3e:	a35c      	add	r3, pc, #368	@ (adr r3, 800acb0 <atan+0x2f0>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fb64 	bl	8000210 <__aeabi_dsub>
 800ab48:	4632      	mov	r2, r6
 800ab4a:	463b      	mov	r3, r7
 800ab4c:	f7f5 fd18 	bl	8000580 <__aeabi_dmul>
 800ab50:	a359      	add	r3, pc, #356	@ (adr r3, 800acb8 <atan+0x2f8>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fb5b 	bl	8000210 <__aeabi_dsub>
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	f7f5 fd0f 	bl	8000580 <__aeabi_dmul>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f5 fb53 	bl	8000214 <__adddf3>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	462b      	mov	r3, r5
 800ab72:	f7f5 fd05 	bl	8000580 <__aeabi_dmul>
 800ab76:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	d148      	bne.n	800ac12 <atan+0x252>
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fb44 	bl	8000210 <__aeabi_dsub>
 800ab88:	e72f      	b.n	800a9ea <atan+0x2a>
 800ab8a:	4b52      	ldr	r3, [pc, #328]	@ (800acd4 <atan+0x314>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 fb3d 	bl	8000210 <__aeabi_dsub>
 800ab96:	4b4f      	ldr	r3, [pc, #316]	@ (800acd4 <atan+0x314>)
 800ab98:	4606      	mov	r6, r0
 800ab9a:	460f      	mov	r7, r1
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 fb37 	bl	8000214 <__adddf3>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4630      	mov	r0, r6
 800abac:	4639      	mov	r1, r7
 800abae:	f7f5 fe11 	bl	80007d4 <__aeabi_ddiv>
 800abb2:	f04f 0a01 	mov.w	sl, #1
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	e765      	b.n	800aa88 <atan+0xc8>
 800abbc:	4b47      	ldr	r3, [pc, #284]	@ (800acdc <atan+0x31c>)
 800abbe:	429e      	cmp	r6, r3
 800abc0:	d21c      	bcs.n	800abfc <atan+0x23c>
 800abc2:	4b47      	ldr	r3, [pc, #284]	@ (800ace0 <atan+0x320>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	4620      	mov	r0, r4
 800abc8:	4629      	mov	r1, r5
 800abca:	f7f5 fb21 	bl	8000210 <__aeabi_dsub>
 800abce:	4b44      	ldr	r3, [pc, #272]	@ (800ace0 <atan+0x320>)
 800abd0:	4606      	mov	r6, r0
 800abd2:	460f      	mov	r7, r1
 800abd4:	2200      	movs	r2, #0
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 fcd1 	bl	8000580 <__aeabi_dmul>
 800abde:	4b3d      	ldr	r3, [pc, #244]	@ (800acd4 <atan+0x314>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7f5 fb17 	bl	8000214 <__adddf3>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4630      	mov	r0, r6
 800abec:	4639      	mov	r1, r7
 800abee:	f7f5 fdf1 	bl	80007d4 <__aeabi_ddiv>
 800abf2:	f04f 0a02 	mov.w	sl, #2
 800abf6:	4604      	mov	r4, r0
 800abf8:	460d      	mov	r5, r1
 800abfa:	e745      	b.n	800aa88 <atan+0xc8>
 800abfc:	4622      	mov	r2, r4
 800abfe:	462b      	mov	r3, r5
 800ac00:	4938      	ldr	r1, [pc, #224]	@ (800ace4 <atan+0x324>)
 800ac02:	2000      	movs	r0, #0
 800ac04:	f7f5 fde6 	bl	80007d4 <__aeabi_ddiv>
 800ac08:	f04f 0a03 	mov.w	sl, #3
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	460d      	mov	r5, r1
 800ac10:	e73a      	b.n	800aa88 <atan+0xc8>
 800ac12:	4b35      	ldr	r3, [pc, #212]	@ (800ace8 <atan+0x328>)
 800ac14:	4e35      	ldr	r6, [pc, #212]	@ (800acec <atan+0x32c>)
 800ac16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 faf7 	bl	8000210 <__aeabi_dsub>
 800ac22:	4622      	mov	r2, r4
 800ac24:	462b      	mov	r3, r5
 800ac26:	f7f5 faf3 	bl	8000210 <__aeabi_dsub>
 800ac2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ac36:	f7f5 faeb 	bl	8000210 <__aeabi_dsub>
 800ac3a:	f1bb 0f00 	cmp.w	fp, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460d      	mov	r5, r1
 800ac42:	f6bf aedc 	bge.w	800a9fe <atan+0x3e>
 800ac46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac4a:	461d      	mov	r5, r3
 800ac4c:	e6d7      	b.n	800a9fe <atan+0x3e>
 800ac4e:	a51c      	add	r5, pc, #112	@ (adr r5, 800acc0 <atan+0x300>)
 800ac50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac54:	e6d3      	b.n	800a9fe <atan+0x3e>
 800ac56:	bf00      	nop
 800ac58:	54442d18 	.word	0x54442d18
 800ac5c:	3ff921fb 	.word	0x3ff921fb
 800ac60:	8800759c 	.word	0x8800759c
 800ac64:	7e37e43c 	.word	0x7e37e43c
 800ac68:	e322da11 	.word	0xe322da11
 800ac6c:	3f90ad3a 	.word	0x3f90ad3a
 800ac70:	24760deb 	.word	0x24760deb
 800ac74:	3fa97b4b 	.word	0x3fa97b4b
 800ac78:	a0d03d51 	.word	0xa0d03d51
 800ac7c:	3fb10d66 	.word	0x3fb10d66
 800ac80:	c54c206e 	.word	0xc54c206e
 800ac84:	3fb745cd 	.word	0x3fb745cd
 800ac88:	920083ff 	.word	0x920083ff
 800ac8c:	3fc24924 	.word	0x3fc24924
 800ac90:	5555550d 	.word	0x5555550d
 800ac94:	3fd55555 	.word	0x3fd55555
 800ac98:	2c6a6c2f 	.word	0x2c6a6c2f
 800ac9c:	bfa2b444 	.word	0xbfa2b444
 800aca0:	52defd9a 	.word	0x52defd9a
 800aca4:	3fadde2d 	.word	0x3fadde2d
 800aca8:	af749a6d 	.word	0xaf749a6d
 800acac:	3fb3b0f2 	.word	0x3fb3b0f2
 800acb0:	fe231671 	.word	0xfe231671
 800acb4:	3fbc71c6 	.word	0x3fbc71c6
 800acb8:	9998ebc4 	.word	0x9998ebc4
 800acbc:	3fc99999 	.word	0x3fc99999
 800acc0:	54442d18 	.word	0x54442d18
 800acc4:	bff921fb 	.word	0xbff921fb
 800acc8:	440fffff 	.word	0x440fffff
 800accc:	7ff00000 	.word	0x7ff00000
 800acd0:	3fdbffff 	.word	0x3fdbffff
 800acd4:	3ff00000 	.word	0x3ff00000
 800acd8:	3ff2ffff 	.word	0x3ff2ffff
 800acdc:	40038000 	.word	0x40038000
 800ace0:	3ff80000 	.word	0x3ff80000
 800ace4:	bff00000 	.word	0xbff00000
 800ace8:	0800b860 	.word	0x0800b860
 800acec:	0800b880 	.word	0x0800b880

0800acf0 <scalbn>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	ec55 4b10 	vmov	r4, r5, d0
 800acf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800acfa:	4606      	mov	r6, r0
 800acfc:	462b      	mov	r3, r5
 800acfe:	b991      	cbnz	r1, 800ad26 <scalbn+0x36>
 800ad00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ad04:	4323      	orrs	r3, r4
 800ad06:	d03d      	beq.n	800ad84 <scalbn+0x94>
 800ad08:	4b35      	ldr	r3, [pc, #212]	@ (800ade0 <scalbn+0xf0>)
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f7f5 fc36 	bl	8000580 <__aeabi_dmul>
 800ad14:	4b33      	ldr	r3, [pc, #204]	@ (800ade4 <scalbn+0xf4>)
 800ad16:	429e      	cmp	r6, r3
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	da0f      	bge.n	800ad3e <scalbn+0x4e>
 800ad1e:	a328      	add	r3, pc, #160	@ (adr r3, 800adc0 <scalbn+0xd0>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	e01e      	b.n	800ad64 <scalbn+0x74>
 800ad26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ad2a:	4291      	cmp	r1, r2
 800ad2c:	d10b      	bne.n	800ad46 <scalbn+0x56>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4620      	mov	r0, r4
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7f5 fa6e 	bl	8000214 <__adddf3>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	e022      	b.n	800ad84 <scalbn+0x94>
 800ad3e:	460b      	mov	r3, r1
 800ad40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ad44:	3936      	subs	r1, #54	@ 0x36
 800ad46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ad4a:	4296      	cmp	r6, r2
 800ad4c:	dd0d      	ble.n	800ad6a <scalbn+0x7a>
 800ad4e:	2d00      	cmp	r5, #0
 800ad50:	a11d      	add	r1, pc, #116	@ (adr r1, 800adc8 <scalbn+0xd8>)
 800ad52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad56:	da02      	bge.n	800ad5e <scalbn+0x6e>
 800ad58:	a11d      	add	r1, pc, #116	@ (adr r1, 800add0 <scalbn+0xe0>)
 800ad5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad5e:	a31a      	add	r3, pc, #104	@ (adr r3, 800adc8 <scalbn+0xd8>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f7f5 fc0c 	bl	8000580 <__aeabi_dmul>
 800ad68:	e7e6      	b.n	800ad38 <scalbn+0x48>
 800ad6a:	1872      	adds	r2, r6, r1
 800ad6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ad70:	428a      	cmp	r2, r1
 800ad72:	dcec      	bgt.n	800ad4e <scalbn+0x5e>
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	dd08      	ble.n	800ad8a <scalbn+0x9a>
 800ad78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ad7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ad80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad84:	ec45 4b10 	vmov	d0, r4, r5
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ad8e:	da08      	bge.n	800ada2 <scalbn+0xb2>
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	a10b      	add	r1, pc, #44	@ (adr r1, 800adc0 <scalbn+0xd0>)
 800ad94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad98:	dac1      	bge.n	800ad1e <scalbn+0x2e>
 800ad9a:	a10f      	add	r1, pc, #60	@ (adr r1, 800add8 <scalbn+0xe8>)
 800ad9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada0:	e7bd      	b.n	800ad1e <scalbn+0x2e>
 800ada2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ada6:	3236      	adds	r2, #54	@ 0x36
 800ada8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800adac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adb0:	4620      	mov	r0, r4
 800adb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <scalbn+0xf8>)
 800adb4:	4629      	mov	r1, r5
 800adb6:	2200      	movs	r2, #0
 800adb8:	e7d4      	b.n	800ad64 <scalbn+0x74>
 800adba:	bf00      	nop
 800adbc:	f3af 8000 	nop.w
 800adc0:	c2f8f359 	.word	0xc2f8f359
 800adc4:	01a56e1f 	.word	0x01a56e1f
 800adc8:	8800759c 	.word	0x8800759c
 800adcc:	7e37e43c 	.word	0x7e37e43c
 800add0:	8800759c 	.word	0x8800759c
 800add4:	fe37e43c 	.word	0xfe37e43c
 800add8:	c2f8f359 	.word	0xc2f8f359
 800addc:	81a56e1f 	.word	0x81a56e1f
 800ade0:	43500000 	.word	0x43500000
 800ade4:	ffff3cb0 	.word	0xffff3cb0
 800ade8:	3c900000 	.word	0x3c900000

0800adec <with_errno>:
 800adec:	b510      	push	{r4, lr}
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	eeb0 8a40 	vmov.f32	s16, s0
 800adf6:	eef0 8a60 	vmov.f32	s17, s1
 800adfa:	4604      	mov	r4, r0
 800adfc:	f7fd fdde 	bl	80089bc <__errno>
 800ae00:	eeb0 0a48 	vmov.f32	s0, s16
 800ae04:	eef0 0a68 	vmov.f32	s1, s17
 800ae08:	ecbd 8b02 	vpop	{d8}
 800ae0c:	6004      	str	r4, [r0, #0]
 800ae0e:	bd10      	pop	{r4, pc}

0800ae10 <xflow>:
 800ae10:	4603      	mov	r3, r0
 800ae12:	b507      	push	{r0, r1, r2, lr}
 800ae14:	ec51 0b10 	vmov	r0, r1, d0
 800ae18:	b183      	cbz	r3, 800ae3c <xflow+0x2c>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae20:	e9cd 2300 	strd	r2, r3, [sp]
 800ae24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae28:	f7f5 fbaa 	bl	8000580 <__aeabi_dmul>
 800ae2c:	ec41 0b10 	vmov	d0, r0, r1
 800ae30:	2022      	movs	r0, #34	@ 0x22
 800ae32:	b003      	add	sp, #12
 800ae34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae38:	f7ff bfd8 	b.w	800adec <with_errno>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	e7ee      	b.n	800ae20 <xflow+0x10>
 800ae42:	0000      	movs	r0, r0
 800ae44:	0000      	movs	r0, r0
	...

0800ae48 <__math_uflow>:
 800ae48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae50 <__math_uflow+0x8>
 800ae4c:	f7ff bfe0 	b.w	800ae10 <xflow>
 800ae50:	00000000 	.word	0x00000000
 800ae54:	10000000 	.word	0x10000000

0800ae58 <__math_oflow>:
 800ae58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae60 <__math_oflow+0x8>
 800ae5c:	f7ff bfd8 	b.w	800ae10 <xflow>
 800ae60:	00000000 	.word	0x00000000
 800ae64:	70000000 	.word	0x70000000

0800ae68 <__kernel_rem_pio2>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ed2d 8b02 	vpush	{d8}
 800ae70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ae74:	f112 0f14 	cmn.w	r2, #20
 800ae78:	9306      	str	r3, [sp, #24]
 800ae7a:	9104      	str	r1, [sp, #16]
 800ae7c:	4bbe      	ldr	r3, [pc, #760]	@ (800b178 <__kernel_rem_pio2+0x310>)
 800ae7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ae80:	9008      	str	r0, [sp, #32]
 800ae82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	9b06      	ldr	r3, [sp, #24]
 800ae8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae8e:	bfa8      	it	ge
 800ae90:	1ed4      	subge	r4, r2, #3
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	bfb2      	itee	lt
 800ae96:	2400      	movlt	r4, #0
 800ae98:	2318      	movge	r3, #24
 800ae9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae9e:	f06f 0317 	mvn.w	r3, #23
 800aea2:	fb04 3303 	mla	r3, r4, r3, r3
 800aea6:	eb03 0b02 	add.w	fp, r3, r2
 800aeaa:	9b00      	ldr	r3, [sp, #0]
 800aeac:	9a05      	ldr	r2, [sp, #20]
 800aeae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b168 <__kernel_rem_pio2+0x300>
 800aeb2:	eb03 0802 	add.w	r8, r3, r2
 800aeb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aeb8:	1aa7      	subs	r7, r4, r2
 800aeba:	ae20      	add	r6, sp, #128	@ 0x80
 800aebc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aec0:	2500      	movs	r5, #0
 800aec2:	4545      	cmp	r5, r8
 800aec4:	dd13      	ble.n	800aeee <__kernel_rem_pio2+0x86>
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	aa20      	add	r2, sp, #128	@ 0x80
 800aeca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aece:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800aed2:	f04f 0800 	mov.w	r8, #0
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	4598      	cmp	r8, r3
 800aeda:	dc31      	bgt.n	800af40 <__kernel_rem_pio2+0xd8>
 800aedc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b168 <__kernel_rem_pio2+0x300>
 800aee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aee8:	462f      	mov	r7, r5
 800aeea:	2600      	movs	r6, #0
 800aeec:	e01b      	b.n	800af26 <__kernel_rem_pio2+0xbe>
 800aeee:	42ef      	cmn	r7, r5
 800aef0:	d407      	bmi.n	800af02 <__kernel_rem_pio2+0x9a>
 800aef2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aef6:	f7f5 fad9 	bl	80004ac <__aeabi_i2d>
 800aefa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aefe:	3501      	adds	r5, #1
 800af00:	e7df      	b.n	800aec2 <__kernel_rem_pio2+0x5a>
 800af02:	ec51 0b18 	vmov	r0, r1, d8
 800af06:	e7f8      	b.n	800aefa <__kernel_rem_pio2+0x92>
 800af08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af10:	f7f5 fb36 	bl	8000580 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	f7f5 f97a 	bl	8000214 <__adddf3>
 800af20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af24:	3601      	adds	r6, #1
 800af26:	9b05      	ldr	r3, [sp, #20]
 800af28:	429e      	cmp	r6, r3
 800af2a:	f1a7 0708 	sub.w	r7, r7, #8
 800af2e:	ddeb      	ble.n	800af08 <__kernel_rem_pio2+0xa0>
 800af30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af34:	f108 0801 	add.w	r8, r8, #1
 800af38:	ecaa 7b02 	vstmia	sl!, {d7}
 800af3c:	3508      	adds	r5, #8
 800af3e:	e7ca      	b.n	800aed6 <__kernel_rem_pio2+0x6e>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	f8dd 8000 	ldr.w	r8, [sp]
 800af46:	aa0c      	add	r2, sp, #48	@ 0x30
 800af48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af54:	9309      	str	r3, [sp, #36]	@ 0x24
 800af56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af5c:	ab98      	add	r3, sp, #608	@ 0x260
 800af5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800af66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af6a:	ac0c      	add	r4, sp, #48	@ 0x30
 800af6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800af72:	46a1      	mov	r9, r4
 800af74:	46c2      	mov	sl, r8
 800af76:	f1ba 0f00 	cmp.w	sl, #0
 800af7a:	f1a5 0508 	sub.w	r5, r5, #8
 800af7e:	dc77      	bgt.n	800b070 <__kernel_rem_pio2+0x208>
 800af80:	4658      	mov	r0, fp
 800af82:	ed9d 0b02 	vldr	d0, [sp, #8]
 800af86:	f7ff feb3 	bl	800acf0 <scalbn>
 800af8a:	ec57 6b10 	vmov	r6, r7, d0
 800af8e:	2200      	movs	r2, #0
 800af90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 faf2 	bl	8000580 <__aeabi_dmul>
 800af9c:	ec41 0b10 	vmov	d0, r0, r1
 800afa0:	f000 faba 	bl	800b518 <floor>
 800afa4:	4b75      	ldr	r3, [pc, #468]	@ (800b17c <__kernel_rem_pio2+0x314>)
 800afa6:	ec51 0b10 	vmov	r0, r1, d0
 800afaa:	2200      	movs	r2, #0
 800afac:	f7f5 fae8 	bl	8000580 <__aeabi_dmul>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 f92a 	bl	8000210 <__aeabi_dsub>
 800afbc:	460f      	mov	r7, r1
 800afbe:	4606      	mov	r6, r0
 800afc0:	f7f5 fd8e 	bl	8000ae0 <__aeabi_d2iz>
 800afc4:	9002      	str	r0, [sp, #8]
 800afc6:	f7f5 fa71 	bl	80004ac <__aeabi_i2d>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	f7f5 f91d 	bl	8000210 <__aeabi_dsub>
 800afd6:	f1bb 0f00 	cmp.w	fp, #0
 800afda:	4606      	mov	r6, r0
 800afdc:	460f      	mov	r7, r1
 800afde:	dd6c      	ble.n	800b0ba <__kernel_rem_pio2+0x252>
 800afe0:	f108 31ff 	add.w	r1, r8, #4294967295
 800afe4:	ab0c      	add	r3, sp, #48	@ 0x30
 800afe6:	9d02      	ldr	r5, [sp, #8]
 800afe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afec:	f1cb 0018 	rsb	r0, fp, #24
 800aff0:	fa43 f200 	asr.w	r2, r3, r0
 800aff4:	4415      	add	r5, r2
 800aff6:	4082      	lsls	r2, r0
 800aff8:	1a9b      	subs	r3, r3, r2
 800affa:	aa0c      	add	r2, sp, #48	@ 0x30
 800affc:	9502      	str	r5, [sp, #8]
 800affe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b002:	f1cb 0217 	rsb	r2, fp, #23
 800b006:	fa43 f902 	asr.w	r9, r3, r2
 800b00a:	f1b9 0f00 	cmp.w	r9, #0
 800b00e:	dd64      	ble.n	800b0da <__kernel_rem_pio2+0x272>
 800b010:	9b02      	ldr	r3, [sp, #8]
 800b012:	2200      	movs	r2, #0
 800b014:	3301      	adds	r3, #1
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	4615      	mov	r5, r2
 800b01a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b01e:	4590      	cmp	r8, r2
 800b020:	f300 80b8 	bgt.w	800b194 <__kernel_rem_pio2+0x32c>
 800b024:	f1bb 0f00 	cmp.w	fp, #0
 800b028:	dd07      	ble.n	800b03a <__kernel_rem_pio2+0x1d2>
 800b02a:	f1bb 0f01 	cmp.w	fp, #1
 800b02e:	f000 80bf 	beq.w	800b1b0 <__kernel_rem_pio2+0x348>
 800b032:	f1bb 0f02 	cmp.w	fp, #2
 800b036:	f000 80c6 	beq.w	800b1c6 <__kernel_rem_pio2+0x35e>
 800b03a:	f1b9 0f02 	cmp.w	r9, #2
 800b03e:	d14c      	bne.n	800b0da <__kernel_rem_pio2+0x272>
 800b040:	4632      	mov	r2, r6
 800b042:	463b      	mov	r3, r7
 800b044:	494e      	ldr	r1, [pc, #312]	@ (800b180 <__kernel_rem_pio2+0x318>)
 800b046:	2000      	movs	r0, #0
 800b048:	f7f5 f8e2 	bl	8000210 <__aeabi_dsub>
 800b04c:	4606      	mov	r6, r0
 800b04e:	460f      	mov	r7, r1
 800b050:	2d00      	cmp	r5, #0
 800b052:	d042      	beq.n	800b0da <__kernel_rem_pio2+0x272>
 800b054:	4658      	mov	r0, fp
 800b056:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b170 <__kernel_rem_pio2+0x308>
 800b05a:	f7ff fe49 	bl	800acf0 <scalbn>
 800b05e:	4630      	mov	r0, r6
 800b060:	4639      	mov	r1, r7
 800b062:	ec53 2b10 	vmov	r2, r3, d0
 800b066:	f7f5 f8d3 	bl	8000210 <__aeabi_dsub>
 800b06a:	4606      	mov	r6, r0
 800b06c:	460f      	mov	r7, r1
 800b06e:	e034      	b.n	800b0da <__kernel_rem_pio2+0x272>
 800b070:	4b44      	ldr	r3, [pc, #272]	@ (800b184 <__kernel_rem_pio2+0x31c>)
 800b072:	2200      	movs	r2, #0
 800b074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b078:	f7f5 fa82 	bl	8000580 <__aeabi_dmul>
 800b07c:	f7f5 fd30 	bl	8000ae0 <__aeabi_d2iz>
 800b080:	f7f5 fa14 	bl	80004ac <__aeabi_i2d>
 800b084:	4b40      	ldr	r3, [pc, #256]	@ (800b188 <__kernel_rem_pio2+0x320>)
 800b086:	2200      	movs	r2, #0
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	f7f5 fa78 	bl	8000580 <__aeabi_dmul>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b098:	f7f5 f8ba 	bl	8000210 <__aeabi_dsub>
 800b09c:	f7f5 fd20 	bl	8000ae0 <__aeabi_d2iz>
 800b0a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0a4:	f849 0b04 	str.w	r0, [r9], #4
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7f5 f8b2 	bl	8000214 <__adddf3>
 800b0b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b8:	e75d      	b.n	800af76 <__kernel_rem_pio2+0x10e>
 800b0ba:	d107      	bne.n	800b0cc <__kernel_rem_pio2+0x264>
 800b0bc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0c0:	aa0c      	add	r2, sp, #48	@ 0x30
 800b0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b0ca:	e79e      	b.n	800b00a <__kernel_rem_pio2+0x1a2>
 800b0cc:	4b2f      	ldr	r3, [pc, #188]	@ (800b18c <__kernel_rem_pio2+0x324>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f7f5 fcdc 	bl	8000a8c <__aeabi_dcmpge>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d143      	bne.n	800b160 <__kernel_rem_pio2+0x2f8>
 800b0d8:	4681      	mov	r9, r0
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 fcb5 	bl	8000a50 <__aeabi_dcmpeq>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f000 80bf 	beq.w	800b26a <__kernel_rem_pio2+0x402>
 800b0ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	9900      	ldr	r1, [sp, #0]
 800b0f4:	428b      	cmp	r3, r1
 800b0f6:	da6e      	bge.n	800b1d6 <__kernel_rem_pio2+0x36e>
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	f000 8089 	beq.w	800b210 <__kernel_rem_pio2+0x3a8>
 800b0fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800b102:	ab0c      	add	r3, sp, #48	@ 0x30
 800b104:	f1ab 0b18 	sub.w	fp, fp, #24
 800b108:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0f6      	beq.n	800b0fe <__kernel_rem_pio2+0x296>
 800b110:	4658      	mov	r0, fp
 800b112:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b170 <__kernel_rem_pio2+0x308>
 800b116:	f7ff fdeb 	bl	800acf0 <scalbn>
 800b11a:	f108 0301 	add.w	r3, r8, #1
 800b11e:	00da      	lsls	r2, r3, #3
 800b120:	9205      	str	r2, [sp, #20]
 800b122:	ec55 4b10 	vmov	r4, r5, d0
 800b126:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b128:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b184 <__kernel_rem_pio2+0x31c>
 800b12c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b130:	4646      	mov	r6, r8
 800b132:	f04f 0a00 	mov.w	sl, #0
 800b136:	2e00      	cmp	r6, #0
 800b138:	f280 80cf 	bge.w	800b2da <__kernel_rem_pio2+0x472>
 800b13c:	4644      	mov	r4, r8
 800b13e:	2c00      	cmp	r4, #0
 800b140:	f2c0 80fd 	blt.w	800b33e <__kernel_rem_pio2+0x4d6>
 800b144:	4b12      	ldr	r3, [pc, #72]	@ (800b190 <__kernel_rem_pio2+0x328>)
 800b146:	461f      	mov	r7, r3
 800b148:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b14a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b14e:	9306      	str	r3, [sp, #24]
 800b150:	f04f 0a00 	mov.w	sl, #0
 800b154:	f04f 0b00 	mov.w	fp, #0
 800b158:	2600      	movs	r6, #0
 800b15a:	eba8 0504 	sub.w	r5, r8, r4
 800b15e:	e0e2      	b.n	800b326 <__kernel_rem_pio2+0x4be>
 800b160:	f04f 0902 	mov.w	r9, #2
 800b164:	e754      	b.n	800b010 <__kernel_rem_pio2+0x1a8>
 800b166:	bf00      	nop
	...
 800b174:	3ff00000 	.word	0x3ff00000
 800b178:	0800b8e0 	.word	0x0800b8e0
 800b17c:	40200000 	.word	0x40200000
 800b180:	3ff00000 	.word	0x3ff00000
 800b184:	3e700000 	.word	0x3e700000
 800b188:	41700000 	.word	0x41700000
 800b18c:	3fe00000 	.word	0x3fe00000
 800b190:	0800b8a0 	.word	0x0800b8a0
 800b194:	f854 3b04 	ldr.w	r3, [r4], #4
 800b198:	b945      	cbnz	r5, 800b1ac <__kernel_rem_pio2+0x344>
 800b19a:	b123      	cbz	r3, 800b1a6 <__kernel_rem_pio2+0x33e>
 800b19c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b1a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	3201      	adds	r2, #1
 800b1a8:	461d      	mov	r5, r3
 800b1aa:	e738      	b.n	800b01e <__kernel_rem_pio2+0x1b6>
 800b1ac:	1acb      	subs	r3, r1, r3
 800b1ae:	e7f7      	b.n	800b1a0 <__kernel_rem_pio2+0x338>
 800b1b0:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1be:	a90c      	add	r1, sp, #48	@ 0x30
 800b1c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1c4:	e739      	b.n	800b03a <__kernel_rem_pio2+0x1d2>
 800b1c6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1d4:	e7f3      	b.n	800b1be <__kernel_rem_pio2+0x356>
 800b1d6:	a90c      	add	r1, sp, #48	@ 0x30
 800b1d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	430a      	orrs	r2, r1
 800b1e0:	e787      	b.n	800b0f2 <__kernel_rem_pio2+0x28a>
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	d0fa      	beq.n	800b1e2 <__kernel_rem_pio2+0x37a>
 800b1ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b1f2:	eb0d 0503 	add.w	r5, sp, r3
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	aa20      	add	r2, sp, #128	@ 0x80
 800b1fa:	4443      	add	r3, r8
 800b1fc:	f108 0701 	add.w	r7, r8, #1
 800b200:	3d98      	subs	r5, #152	@ 0x98
 800b202:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b206:	4444      	add	r4, r8
 800b208:	42bc      	cmp	r4, r7
 800b20a:	da04      	bge.n	800b216 <__kernel_rem_pio2+0x3ae>
 800b20c:	46a0      	mov	r8, r4
 800b20e:	e6a2      	b.n	800af56 <__kernel_rem_pio2+0xee>
 800b210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b212:	2401      	movs	r4, #1
 800b214:	e7e6      	b.n	800b1e4 <__kernel_rem_pio2+0x37c>
 800b216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b218:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b21c:	f7f5 f946 	bl	80004ac <__aeabi_i2d>
 800b220:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b4e8 <__kernel_rem_pio2+0x680>
 800b224:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b22c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b230:	46b2      	mov	sl, r6
 800b232:	f04f 0800 	mov.w	r8, #0
 800b236:	9b05      	ldr	r3, [sp, #20]
 800b238:	4598      	cmp	r8, r3
 800b23a:	dd05      	ble.n	800b248 <__kernel_rem_pio2+0x3e0>
 800b23c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b240:	3701      	adds	r7, #1
 800b242:	eca5 7b02 	vstmia	r5!, {d7}
 800b246:	e7df      	b.n	800b208 <__kernel_rem_pio2+0x3a0>
 800b248:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b24c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b250:	f7f5 f996 	bl	8000580 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b25c:	f7f4 ffda 	bl	8000214 <__adddf3>
 800b260:	f108 0801 	add.w	r8, r8, #1
 800b264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b268:	e7e5      	b.n	800b236 <__kernel_rem_pio2+0x3ce>
 800b26a:	f1cb 0000 	rsb	r0, fp, #0
 800b26e:	ec47 6b10 	vmov	d0, r6, r7
 800b272:	f7ff fd3d 	bl	800acf0 <scalbn>
 800b276:	ec55 4b10 	vmov	r4, r5, d0
 800b27a:	4b9d      	ldr	r3, [pc, #628]	@ (800b4f0 <__kernel_rem_pio2+0x688>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	4620      	mov	r0, r4
 800b280:	4629      	mov	r1, r5
 800b282:	f7f5 fc03 	bl	8000a8c <__aeabi_dcmpge>
 800b286:	b300      	cbz	r0, 800b2ca <__kernel_rem_pio2+0x462>
 800b288:	4b9a      	ldr	r3, [pc, #616]	@ (800b4f4 <__kernel_rem_pio2+0x68c>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f976 	bl	8000580 <__aeabi_dmul>
 800b294:	f7f5 fc24 	bl	8000ae0 <__aeabi_d2iz>
 800b298:	4606      	mov	r6, r0
 800b29a:	f7f5 f907 	bl	80004ac <__aeabi_i2d>
 800b29e:	4b94      	ldr	r3, [pc, #592]	@ (800b4f0 <__kernel_rem_pio2+0x688>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f7f5 f96d 	bl	8000580 <__aeabi_dmul>
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7f4 ffaf 	bl	8000210 <__aeabi_dsub>
 800b2b2:	f7f5 fc15 	bl	8000ae0 <__aeabi_d2iz>
 800b2b6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2b8:	f10b 0b18 	add.w	fp, fp, #24
 800b2bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2c0:	f108 0801 	add.w	r8, r8, #1
 800b2c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b2c8:	e722      	b.n	800b110 <__kernel_rem_pio2+0x2a8>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	f7f5 fc07 	bl	8000ae0 <__aeabi_d2iz>
 800b2d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2d8:	e71a      	b.n	800b110 <__kernel_rem_pio2+0x2a8>
 800b2da:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2e0:	f7f5 f8e4 	bl	80004ac <__aeabi_i2d>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	462b      	mov	r3, r5
 800b2e8:	f7f5 f94a 	bl	8000580 <__aeabi_dmul>
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 f942 	bl	8000580 <__aeabi_dmul>
 800b2fc:	3e01      	subs	r6, #1
 800b2fe:	4604      	mov	r4, r0
 800b300:	460d      	mov	r5, r1
 800b302:	e718      	b.n	800b136 <__kernel_rem_pio2+0x2ce>
 800b304:	9906      	ldr	r1, [sp, #24]
 800b306:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b30a:	9106      	str	r1, [sp, #24]
 800b30c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b310:	f7f5 f936 	bl	8000580 <__aeabi_dmul>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4650      	mov	r0, sl
 800b31a:	4659      	mov	r1, fp
 800b31c:	f7f4 ff7a 	bl	8000214 <__adddf3>
 800b320:	3601      	adds	r6, #1
 800b322:	4682      	mov	sl, r0
 800b324:	468b      	mov	fp, r1
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	429e      	cmp	r6, r3
 800b32a:	dc01      	bgt.n	800b330 <__kernel_rem_pio2+0x4c8>
 800b32c:	42b5      	cmp	r5, r6
 800b32e:	dae9      	bge.n	800b304 <__kernel_rem_pio2+0x49c>
 800b330:	ab48      	add	r3, sp, #288	@ 0x120
 800b332:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b336:	e9c5 ab00 	strd	sl, fp, [r5]
 800b33a:	3c01      	subs	r4, #1
 800b33c:	e6ff      	b.n	800b13e <__kernel_rem_pio2+0x2d6>
 800b33e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b340:	2b02      	cmp	r3, #2
 800b342:	dc0b      	bgt.n	800b35c <__kernel_rem_pio2+0x4f4>
 800b344:	2b00      	cmp	r3, #0
 800b346:	dc39      	bgt.n	800b3bc <__kernel_rem_pio2+0x554>
 800b348:	d05d      	beq.n	800b406 <__kernel_rem_pio2+0x59e>
 800b34a:	9b02      	ldr	r3, [sp, #8]
 800b34c:	f003 0007 	and.w	r0, r3, #7
 800b350:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b354:	ecbd 8b02 	vpop	{d8}
 800b358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d1f3      	bne.n	800b34a <__kernel_rem_pio2+0x4e2>
 800b362:	9b05      	ldr	r3, [sp, #20]
 800b364:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b368:	eb0d 0403 	add.w	r4, sp, r3
 800b36c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b370:	4625      	mov	r5, r4
 800b372:	46c2      	mov	sl, r8
 800b374:	f1ba 0f00 	cmp.w	sl, #0
 800b378:	f1a5 0508 	sub.w	r5, r5, #8
 800b37c:	dc6b      	bgt.n	800b456 <__kernel_rem_pio2+0x5ee>
 800b37e:	4645      	mov	r5, r8
 800b380:	2d01      	cmp	r5, #1
 800b382:	f1a4 0408 	sub.w	r4, r4, #8
 800b386:	f300 8087 	bgt.w	800b498 <__kernel_rem_pio2+0x630>
 800b38a:	9c05      	ldr	r4, [sp, #20]
 800b38c:	ab48      	add	r3, sp, #288	@ 0x120
 800b38e:	441c      	add	r4, r3
 800b390:	2000      	movs	r0, #0
 800b392:	2100      	movs	r1, #0
 800b394:	f1b8 0f01 	cmp.w	r8, #1
 800b398:	f300 809c 	bgt.w	800b4d4 <__kernel_rem_pio2+0x66c>
 800b39c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b3a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b3a4:	f1b9 0f00 	cmp.w	r9, #0
 800b3a8:	f040 80a6 	bne.w	800b4f8 <__kernel_rem_pio2+0x690>
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	e9c3 7800 	strd	r7, r8, [r3]
 800b3b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b3b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3ba:	e7c6      	b.n	800b34a <__kernel_rem_pio2+0x4e2>
 800b3bc:	9d05      	ldr	r5, [sp, #20]
 800b3be:	ab48      	add	r3, sp, #288	@ 0x120
 800b3c0:	441d      	add	r5, r3
 800b3c2:	4644      	mov	r4, r8
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	2c00      	cmp	r4, #0
 800b3ca:	da35      	bge.n	800b438 <__kernel_rem_pio2+0x5d0>
 800b3cc:	f1b9 0f00 	cmp.w	r9, #0
 800b3d0:	d038      	beq.n	800b444 <__kernel_rem_pio2+0x5dc>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3d8:	9c04      	ldr	r4, [sp, #16]
 800b3da:	e9c4 2300 	strd	r2, r3, [r4]
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b3e6:	f7f4 ff13 	bl	8000210 <__aeabi_dsub>
 800b3ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800b3ec:	2401      	movs	r4, #1
 800b3ee:	45a0      	cmp	r8, r4
 800b3f0:	da2b      	bge.n	800b44a <__kernel_rem_pio2+0x5e2>
 800b3f2:	f1b9 0f00 	cmp.w	r9, #0
 800b3f6:	d002      	beq.n	800b3fe <__kernel_rem_pio2+0x596>
 800b3f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b404:	e7a1      	b.n	800b34a <__kernel_rem_pio2+0x4e2>
 800b406:	9c05      	ldr	r4, [sp, #20]
 800b408:	ab48      	add	r3, sp, #288	@ 0x120
 800b40a:	441c      	add	r4, r3
 800b40c:	2000      	movs	r0, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	f1b8 0f00 	cmp.w	r8, #0
 800b414:	da09      	bge.n	800b42a <__kernel_rem_pio2+0x5c2>
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	d002      	beq.n	800b422 <__kernel_rem_pio2+0x5ba>
 800b41c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b420:	4619      	mov	r1, r3
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	e9c3 0100 	strd	r0, r1, [r3]
 800b428:	e78f      	b.n	800b34a <__kernel_rem_pio2+0x4e2>
 800b42a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b42e:	f7f4 fef1 	bl	8000214 <__adddf3>
 800b432:	f108 38ff 	add.w	r8, r8, #4294967295
 800b436:	e7eb      	b.n	800b410 <__kernel_rem_pio2+0x5a8>
 800b438:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b43c:	f7f4 feea 	bl	8000214 <__adddf3>
 800b440:	3c01      	subs	r4, #1
 800b442:	e7c1      	b.n	800b3c8 <__kernel_rem_pio2+0x560>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e7c6      	b.n	800b3d8 <__kernel_rem_pio2+0x570>
 800b44a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b44e:	f7f4 fee1 	bl	8000214 <__adddf3>
 800b452:	3401      	adds	r4, #1
 800b454:	e7cb      	b.n	800b3ee <__kernel_rem_pio2+0x586>
 800b456:	ed95 7b00 	vldr	d7, [r5]
 800b45a:	ed8d 7b00 	vstr	d7, [sp]
 800b45e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b462:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b466:	ec53 2b17 	vmov	r2, r3, d7
 800b46a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b46e:	f7f4 fed1 	bl	8000214 <__adddf3>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b47e:	f7f4 fec7 	bl	8000210 <__aeabi_dsub>
 800b482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b486:	f7f4 fec5 	bl	8000214 <__adddf3>
 800b48a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b48e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b492:	e9c5 6700 	strd	r6, r7, [r5]
 800b496:	e76d      	b.n	800b374 <__kernel_rem_pio2+0x50c>
 800b498:	ed94 7b00 	vldr	d7, [r4]
 800b49c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b4a0:	ec51 0b17 	vmov	r0, r1, d7
 800b4a4:	4652      	mov	r2, sl
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	ed8d 7b00 	vstr	d7, [sp]
 800b4ac:	f7f4 feb2 	bl	8000214 <__adddf3>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4bc:	f7f4 fea8 	bl	8000210 <__aeabi_dsub>
 800b4c0:	4652      	mov	r2, sl
 800b4c2:	465b      	mov	r3, fp
 800b4c4:	f7f4 fea6 	bl	8000214 <__adddf3>
 800b4c8:	3d01      	subs	r5, #1
 800b4ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4ce:	e9c4 6700 	strd	r6, r7, [r4]
 800b4d2:	e755      	b.n	800b380 <__kernel_rem_pio2+0x518>
 800b4d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4d8:	f7f4 fe9c 	bl	8000214 <__adddf3>
 800b4dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4e0:	e758      	b.n	800b394 <__kernel_rem_pio2+0x52c>
 800b4e2:	bf00      	nop
 800b4e4:	f3af 8000 	nop.w
	...
 800b4f0:	41700000 	.word	0x41700000
 800b4f4:	3e700000 	.word	0x3e700000
 800b4f8:	9b04      	ldr	r3, [sp, #16]
 800b4fa:	9a04      	ldr	r2, [sp, #16]
 800b4fc:	601f      	str	r7, [r3, #0]
 800b4fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b502:	605c      	str	r4, [r3, #4]
 800b504:	609d      	str	r5, [r3, #8]
 800b506:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b50a:	60d3      	str	r3, [r2, #12]
 800b50c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b510:	6110      	str	r0, [r2, #16]
 800b512:	6153      	str	r3, [r2, #20]
 800b514:	e719      	b.n	800b34a <__kernel_rem_pio2+0x4e2>
 800b516:	bf00      	nop

0800b518 <floor>:
 800b518:	ec51 0b10 	vmov	r0, r1, d0
 800b51c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b524:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b528:	2e13      	cmp	r6, #19
 800b52a:	460c      	mov	r4, r1
 800b52c:	4605      	mov	r5, r0
 800b52e:	4680      	mov	r8, r0
 800b530:	dc34      	bgt.n	800b59c <floor+0x84>
 800b532:	2e00      	cmp	r6, #0
 800b534:	da17      	bge.n	800b566 <floor+0x4e>
 800b536:	a332      	add	r3, pc, #200	@ (adr r3, 800b600 <floor+0xe8>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 fe6a 	bl	8000214 <__adddf3>
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	f7f5 faac 	bl	8000aa0 <__aeabi_dcmpgt>
 800b548:	b150      	cbz	r0, 800b560 <floor+0x48>
 800b54a:	2c00      	cmp	r4, #0
 800b54c:	da55      	bge.n	800b5fa <floor+0xe2>
 800b54e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b552:	432c      	orrs	r4, r5
 800b554:	2500      	movs	r5, #0
 800b556:	42ac      	cmp	r4, r5
 800b558:	4c2b      	ldr	r4, [pc, #172]	@ (800b608 <floor+0xf0>)
 800b55a:	bf08      	it	eq
 800b55c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	e023      	b.n	800b5ae <floor+0x96>
 800b566:	4f29      	ldr	r7, [pc, #164]	@ (800b60c <floor+0xf4>)
 800b568:	4137      	asrs	r7, r6
 800b56a:	ea01 0307 	and.w	r3, r1, r7
 800b56e:	4303      	orrs	r3, r0
 800b570:	d01d      	beq.n	800b5ae <floor+0x96>
 800b572:	a323      	add	r3, pc, #140	@ (adr r3, 800b600 <floor+0xe8>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f4 fe4c 	bl	8000214 <__adddf3>
 800b57c:	2200      	movs	r2, #0
 800b57e:	2300      	movs	r3, #0
 800b580:	f7f5 fa8e 	bl	8000aa0 <__aeabi_dcmpgt>
 800b584:	2800      	cmp	r0, #0
 800b586:	d0eb      	beq.n	800b560 <floor+0x48>
 800b588:	2c00      	cmp	r4, #0
 800b58a:	bfbe      	ittt	lt
 800b58c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b590:	4133      	asrlt	r3, r6
 800b592:	18e4      	addlt	r4, r4, r3
 800b594:	ea24 0407 	bic.w	r4, r4, r7
 800b598:	2500      	movs	r5, #0
 800b59a:	e7e1      	b.n	800b560 <floor+0x48>
 800b59c:	2e33      	cmp	r6, #51	@ 0x33
 800b59e:	dd0a      	ble.n	800b5b6 <floor+0x9e>
 800b5a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b5a4:	d103      	bne.n	800b5ae <floor+0x96>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	f7f4 fe33 	bl	8000214 <__adddf3>
 800b5ae:	ec41 0b10 	vmov	d0, r0, r1
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b5be:	40df      	lsrs	r7, r3
 800b5c0:	4207      	tst	r7, r0
 800b5c2:	d0f4      	beq.n	800b5ae <floor+0x96>
 800b5c4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b600 <floor+0xe8>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe23 	bl	8000214 <__adddf3>
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f7f5 fa65 	bl	8000aa0 <__aeabi_dcmpgt>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d0c2      	beq.n	800b560 <floor+0x48>
 800b5da:	2c00      	cmp	r4, #0
 800b5dc:	da0a      	bge.n	800b5f4 <floor+0xdc>
 800b5de:	2e14      	cmp	r6, #20
 800b5e0:	d101      	bne.n	800b5e6 <floor+0xce>
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	e006      	b.n	800b5f4 <floor+0xdc>
 800b5e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	40b3      	lsls	r3, r6
 800b5ee:	441d      	add	r5, r3
 800b5f0:	4545      	cmp	r5, r8
 800b5f2:	d3f6      	bcc.n	800b5e2 <floor+0xca>
 800b5f4:	ea25 0507 	bic.w	r5, r5, r7
 800b5f8:	e7b2      	b.n	800b560 <floor+0x48>
 800b5fa:	2500      	movs	r5, #0
 800b5fc:	462c      	mov	r4, r5
 800b5fe:	e7af      	b.n	800b560 <floor+0x48>
 800b600:	8800759c 	.word	0x8800759c
 800b604:	7e37e43c 	.word	0x7e37e43c
 800b608:	bff00000 	.word	0xbff00000
 800b60c:	000fffff 	.word	0x000fffff

0800b610 <_init>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr

0800b61c <_fini>:
 800b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61e:	bf00      	nop
 800b620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b622:	bc08      	pop	{r3}
 800b624:	469e      	mov	lr, r3
 800b626:	4770      	bx	lr
