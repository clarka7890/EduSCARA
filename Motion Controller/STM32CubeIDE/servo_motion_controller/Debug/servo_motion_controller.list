
servo_motion_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b288  0800b288  0000c288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b550  0800b550  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b550  0800b550  0000c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b558  0800b558  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0000c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0000c55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800b560  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000078  0800b5d8  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800b5d8  0000d504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142d8  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003546  00000000  00000000  00021380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000248c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd4  00000000  00000000  00025970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026212  00000000  00000000  00026644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186c0  00000000  00000000  0004c856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e071c  00000000  00000000  00064f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  00145678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0014a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b270 	.word	0x0800b270

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	0800b270 	.word	0x0800b270

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96a 	b.w	8000efc <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14e      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	458c      	cmp	ip, r1
 8000c50:	4686      	mov	lr, r0
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	d962      	bls.n	8000d1e <__udivmoddi4+0xde>
 8000c58:	b14a      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f f68c 	uxth.w	r6, ip
 8000c76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb04 f106 	mul.w	r1, r4, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c96:	f080 8112 	bcs.w	8000ebe <__udivmoddi4+0x27e>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 810f 	bls.w	8000ebe <__udivmoddi4+0x27e>
 8000ca0:	3c02      	subs	r4, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cae:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f606 	mul.w	r6, r0, r6
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d90a      	bls.n	8000cd4 <__udivmoddi4+0x94>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc6:	f080 80fc 	bcs.w	8000ec2 <__udivmoddi4+0x282>
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	f240 80f9 	bls.w	8000ec2 <__udivmoddi4+0x282>
 8000cd0:	4463      	add	r3, ip
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0xa6>
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d905      	bls.n	8000cfa <__udivmoddi4+0xba>
 8000cee:	b10d      	cbz	r5, 8000cf4 <__udivmoddi4+0xb4>
 8000cf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e7f5      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d146      	bne.n	8000d90 <__udivmoddi4+0x150>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xcc>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f0c0 80f0 	bcc.w	8000eec <__udivmoddi4+0x2ac>
 8000d0c:	1a86      	subs	r6, r0, r2
 8000d0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d0e6      	beq.n	8000ce6 <__udivmoddi4+0xa6>
 8000d18:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1c:	e7e3      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x204>
 8000d24:	eba1 040c 	sub.w	r4, r1, ip
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb07 f006 	mul.w	r0, r7, r6
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x11c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x11a>
 8000d54:	4298      	cmp	r0, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	1a1c      	subs	r4, r3, r0
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d66:	fb08 4410 	mls	r4, r8, r0, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb00 f707 	mul.w	r7, r0, r7
 8000d72:	429f      	cmp	r7, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x148>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x146>
 8000d80:	429f      	cmp	r7, r3
 8000d82:	f200 80b0 	bhi.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d86:	4620      	mov	r0, r4
 8000d88:	1bdb      	subs	r3, r3, r7
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0x9c>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da0:	fa04 f301 	lsl.w	r3, r4, r1
 8000da4:	ea43 030c 	orr.w	r3, r3, ip
 8000da8:	40f4      	lsrs	r4, r6
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	0c38      	lsrs	r0, r7, #16
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb4 fef0 	udiv	lr, r4, r0
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x1a6>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd6:	f080 8084 	bcs.w	8000ee2 <__udivmoddi4+0x2a2>
 8000dda:	45a1      	cmp	r9, r4
 8000ddc:	f240 8081 	bls.w	8000ee2 <__udivmoddi4+0x2a2>
 8000de0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	eba4 0409 	sub.w	r4, r4, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df2:	fb00 4413 	mls	r4, r0, r3, r4
 8000df6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x1d2>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e08:	d267      	bcs.n	8000eda <__udivmoddi4+0x29a>
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d965      	bls.n	8000eda <__udivmoddi4+0x29a>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e16:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	46ce      	mov	lr, r9
 8000e22:	469c      	mov	ip, r3
 8000e24:	d351      	bcc.n	8000eca <__udivmoddi4+0x28a>
 8000e26:	d04e      	beq.n	8000ec6 <__udivmoddi4+0x286>
 8000e28:	b155      	cbz	r5, 8000e40 <__udivmoddi4+0x200>
 8000e2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e32:	fa04 f606 	lsl.w	r6, r4, r6
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e750      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000e44:	f1c2 0320 	rsb	r3, r2, #32
 8000e48:	fa20 f103 	lsr.w	r1, r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa24 f303 	lsr.w	r3, r4, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	430c      	orrs	r4, r1
 8000e58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3110 	mls	r1, r8, r0, r3
 8000e6c:	0c23      	lsrs	r3, r4, #16
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e72:	fb00 f107 	mul.w	r1, r0, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x24c>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e82:	d22c      	bcs.n	8000ede <__udivmoddi4+0x29e>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d92a      	bls.n	8000ede <__udivmoddi4+0x29e>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e94:	fb08 3311 	mls	r3, r8, r1, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x276>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eac:	d213      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d911      	bls.n	8000ed6 <__udivmoddi4+0x296>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	1ae4      	subs	r4, r4, r3
 8000eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ebc:	e739      	b.n	8000d32 <__udivmoddi4+0xf2>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	e6f0      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e706      	b.n	8000cd4 <__udivmoddi4+0x94>
 8000ec6:	45c8      	cmp	r8, r9
 8000ec8:	d2ae      	bcs.n	8000e28 <__udivmoddi4+0x1e8>
 8000eca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ece:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	e7a8      	b.n	8000e28 <__udivmoddi4+0x1e8>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	e7ed      	b.n	8000eb6 <__udivmoddi4+0x276>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e799      	b.n	8000e12 <__udivmoddi4+0x1d2>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e7d4      	b.n	8000e8c <__udivmoddi4+0x24c>
 8000ee2:	46d6      	mov	lr, sl
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1a6>
 8000ee6:	4463      	add	r3, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74d      	b.n	8000d88 <__udivmoddi4+0x148>
 8000eec:	4606      	mov	r6, r0
 8000eee:	4623      	mov	r3, r4
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e70f      	b.n	8000d14 <__udivmoddi4+0xd4>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	e730      	b.n	8000d5c <__udivmoddi4+0x11c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xb8>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f42:	4a1e      	ldr	r2, [pc, #120]	@ (8000fbc <MX_ADC1_Init+0xbc>)
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f62:	f003 fc91 	bl	8004888 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 fb7e 	bl	800166c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f70:	230a      	movs	r3, #10
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f82:	f003 fdf3 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fb6e 	bl	800166c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f90:	230b      	movs	r3, #11
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_ADC1_Init+0xb4>)
 8000f9e:	f003 fde5 	bl	8004b6c <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fa8:	f000 fb60 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000094 	.word	0x20000094
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <HAL_ADC_MspInit+0xdc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d157      	bne.n	8001092 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <HAL_ADC_MspInit+0xe0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <HAL_ADC_MspInit+0xe4>)
 800102e:	f004 fccf 	bl	80059d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001034:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <HAL_ADC_MspInit+0xec>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 8001078:	f004 f93a 	bl	80052f0 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001082:	f000 faf3 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_ADC_MspInit+0xe8>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	200000dc 	.word	0x200000dc
 80010ac:	40026410 	.word	0x40026410

080010b0 <start>:
servo_t axis_2;
servo_t axis_3;
scara_t scara_0;

void start(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	@ 0x38
 80010b4:	af02      	add	r7, sp, #8
	//#define DEBUGGING
	#ifdef DEBUGGING
		uart_channel = &huart3;
	#else
		uart_channel = &huart2;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <start+0x80>)
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <start+0x84>)
 80010ba:	601a      	str	r2, [r3, #0]
	#endif

	// default values for scara robot ac3100
	float link_1 = 0.125;
 80010bc:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float link_2 = 0.1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <start+0x88>)
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	float z_min = 0.095;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <start+0x8c>)
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
	float z_max = 0.15;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <start+0x90>)
 80010cc:	623b      	str	r3, [r7, #32]
	float settling_time = 1.0;
 80010ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010d2:	61fb      	str	r3, [r7, #28]
	float P_0 = 1.3;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <start+0x94>)
 80010d6:	61bb      	str	r3, [r7, #24]
	float I_0 = 0.01;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <start+0x98>)
 80010da:	617b      	str	r3, [r7, #20]
	float D_0 = 0.001;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <start+0x9c>)
 80010de:	613b      	str	r3, [r7, #16]
	float P_1 = 1.3;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <start+0x94>)
 80010e2:	60fb      	str	r3, [r7, #12]
	float I_1 = 0.01;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <start+0x98>)
 80010e6:	60bb      	str	r3, [r7, #8]
	float D_1 = 0.001;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <start+0x9c>)
 80010ea:	607b      	str	r3, [r7, #4]

	// initialise scara with default values
	scara_init(&scara_0, &axis_0, &axis_1, &axis_2, &axis_3, link_1, link_2, z_min, z_max,
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <start+0xa0>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	ed97 5a01 	vldr	s10, [r7, #4]
 80010f4:	edd7 4a02 	vldr	s9, [r7, #8]
 80010f8:	ed97 4a03 	vldr	s8, [r7, #12]
 80010fc:	edd7 3a04 	vldr	s7, [r7, #16]
 8001100:	ed97 3a05 	vldr	s6, [r7, #20]
 8001104:	edd7 2a06 	vldr	s5, [r7, #24]
 8001108:	ed97 2a07 	vldr	s4, [r7, #28]
 800110c:	edd7 1a08 	vldr	s3, [r7, #32]
 8001110:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8001114:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001118:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <start+0xa4>)
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <start+0xa8>)
 8001120:	490e      	ldr	r1, [pc, #56]	@ (800115c <start+0xac>)
 8001122:	480f      	ldr	r0, [pc, #60]	@ (8001160 <start+0xb0>)
 8001124:	f000 fb3e 	bl	80017a4 <scara_init>
			   settling_time,
			   P_0, I_0, D_0, P_1, I_1, D_1);
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	@ 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000013c 	.word	0x2000013c
 8001134:	20000324 	.word	0x20000324
 8001138:	3dcccccd 	.word	0x3dcccccd
 800113c:	3dc28f5c 	.word	0x3dc28f5c
 8001140:	3e19999a 	.word	0x3e19999a
 8001144:	3fa66666 	.word	0x3fa66666
 8001148:	3c23d70a 	.word	0x3c23d70a
 800114c:	3a83126f 	.word	0x3a83126f
 8001150:	2000020c 	.word	0x2000020c
 8001154:	200001d8 	.word	0x200001d8
 8001158:	200001a4 	.word	0x200001a4
 800115c:	20000170 	.word	0x20000170
 8001160:	20000240 	.word	0x20000240

08001164 <update>:

void update(void)
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b0b0      	sub	sp, #192	@ 0xc0
 8001168:	af00      	add	r7, sp, #0
	int32_t success_flag = 1; // success flag
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	uint8_t rxdata[48];  // 48 bytes total

	if (HAL_UART_Receive(uart_channel, rxdata, 48, HAL_MAX_DELAY) == HAL_OK)
 8001170:	4bae      	ldr	r3, [pc, #696]	@ (800142c <update+0x2c8>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2230      	movs	r2, #48	@ 0x30
 800117e:	f006 fb7a 	bl	8007876 <HAL_UART_Receive>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 814d 	bne.w	8001424 <update+0x2c0>
	{
		memcpy(&command, &rxdata, sizeof(command_t));
 800118a:	4ba9      	ldr	r3, [pc, #676]	@ (8001430 <update+0x2cc>)
 800118c:	461d      	mov	r5, r3
 800118e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800119e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

		switch (command.command_id)
 80011a2:	4ba3      	ldr	r3, [pc, #652]	@ (8001430 <update+0x2cc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b06      	cmp	r3, #6
 80011aa:	f200 813a 	bhi.w	8001422 <update+0x2be>
 80011ae:	a201      	add	r2, pc, #4	@ (adr r2, 80011b4 <update+0x50>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d1 	.word	0x080011d1
 80011b8:	08001273 	.word	0x08001273
 80011bc:	0800128d 	.word	0x0800128d
 80011c0:	080012cd 	.word	0x080012cd
 80011c4:	0800132d 	.word	0x0800132d
 80011c8:	0800138d 	.word	0x0800138d
 80011cc:	080013c9 	.word	0x080013c9
		{
		case 1:			// SCARA_INITIALISE
			// |0001   |aaaa  |bbbb  |cccc |dddd |eeee         |ffff|gggg|hhhh|iiii|jjjj|kkkk|
			// |command|link_1|link_2|z_min|z_max|settling_time|P_0 |I_0 |D_0 |P_1 |I_1 |D_1 |

			float link_1; memcpy(&link_1, &command.values[0], sizeof(float));
 80011d0:	4b97      	ldr	r3, [pc, #604]	@ (8001430 <update+0x2cc>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			float link_2; memcpy(&link_2, &command.values[1], sizeof(float));
 80011d8:	4b95      	ldr	r3, [pc, #596]	@ (8001430 <update+0x2cc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			float z_min; memcpy(&z_min, &command.values[2], sizeof(float));
 80011e0:	4b93      	ldr	r3, [pc, #588]	@ (8001430 <update+0x2cc>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			float z_max; memcpy(&z_max, &command.values[3], sizeof(float));
 80011e8:	4b91      	ldr	r3, [pc, #580]	@ (8001430 <update+0x2cc>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
			float settling_time; memcpy(&settling_time, &command.values[4], sizeof(float));
 80011ee:	4b90      	ldr	r3, [pc, #576]	@ (8001430 <update+0x2cc>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	67bb      	str	r3, [r7, #120]	@ 0x78
			float P_0; memcpy(&P_0, &command.values[5], sizeof(float));
 80011f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001430 <update+0x2cc>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	677b      	str	r3, [r7, #116]	@ 0x74
			float I_0; memcpy(&I_0, &command.values[6], sizeof(float));
 80011fa:	4b8d      	ldr	r3, [pc, #564]	@ (8001430 <update+0x2cc>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	673b      	str	r3, [r7, #112]	@ 0x70
			float D_0; memcpy(&D_0, &command.values[7], sizeof(float));
 8001200:	4b8b      	ldr	r3, [pc, #556]	@ (8001430 <update+0x2cc>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	66fb      	str	r3, [r7, #108]	@ 0x6c
			float P_1; memcpy(&P_1, &command.values[8], sizeof(float));
 8001206:	4b8a      	ldr	r3, [pc, #552]	@ (8001430 <update+0x2cc>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	66bb      	str	r3, [r7, #104]	@ 0x68
			float I_1; memcpy(&I_1, &command.values[9], sizeof(float));
 800120c:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <update+0x2cc>)
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	667b      	str	r3, [r7, #100]	@ 0x64
			float D_1; memcpy(&D_1, &command.values[10], sizeof(float));
 8001212:	4b87      	ldr	r3, [pc, #540]	@ (8001430 <update+0x2cc>)
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	663b      	str	r3, [r7, #96]	@ 0x60

			scara_reinit(&scara_0,
 8001218:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800121c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001220:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8001224:	ed97 6a1f 	vldr	s12, [r7, #124]	@ 0x7c
 8001228:	edd7 5a1e 	vldr	s11, [r7, #120]	@ 0x78
 800122c:	edd7 2a1d 	vldr	s5, [r7, #116]	@ 0x74
 8001230:	ed97 3a1c 	vldr	s6, [r7, #112]	@ 0x70
 8001234:	edd7 3a1b 	vldr	s7, [r7, #108]	@ 0x6c
 8001238:	ed97 4a1a 	vldr	s8, [r7, #104]	@ 0x68
 800123c:	edd7 4a19 	vldr	s9, [r7, #100]	@ 0x64
 8001240:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8001244:	eeb0 2a65 	vmov.f32	s4, s11
 8001248:	eef0 1a46 	vmov.f32	s3, s12
 800124c:	eeb0 1a66 	vmov.f32	s2, s13
 8001250:	eef0 0a47 	vmov.f32	s1, s14
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	4876      	ldr	r0, [pc, #472]	@ (8001434 <update+0x2d0>)
 800125a:	f000 fb00 	bl	800185e <scara_reinit>
					     link_1, link_2, z_min, z_max,
					     settling_time,
					     P_0, I_0, D_0, P_1, I_1, D_1);

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 800125e:	4b73      	ldr	r3, [pc, #460]	@ (800142c <update+0x2c8>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	2204      	movs	r2, #4
 800126c:	f006 fa78 	bl	8007760 <HAL_UART_Transmit>

			break;
 8001270:	e0d8      	b.n	8001424 <update+0x2c0>

		case 2:			// SCARA_AUTO_CALIBRATE
			// |0002   |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			scara_auto_calibrate(&scara_0);
 8001272:	4870      	ldr	r0, [pc, #448]	@ (8001434 <update+0x2d0>)
 8001274:	f000 fb30 	bl	80018d8 <scara_auto_calibrate>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 8001278:	4b6c      	ldr	r3, [pc, #432]	@ (800142c <update+0x2c8>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	2204      	movs	r2, #4
 8001286:	f006 fa6b 	bl	8007760 <HAL_UART_Transmit>

			break;
 800128a:	e0cb      	b.n	8001424 <update+0x2c0>

		case 3:			// SCARA_MOVE_JOINT
			// |0003   |aaaa|bbbb |cccc|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|axis|angle|time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			int32_t axis; memcpy(&axis, &command.values[0], sizeof(int32_t));
 800128c:	4b68      	ldr	r3, [pc, #416]	@ (8001430 <update+0x2cc>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
			float angle; memcpy(&angle, &command.values[1], sizeof(float));
 8001292:	4b67      	ldr	r3, [pc, #412]	@ (8001430 <update+0x2cc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	65bb      	str	r3, [r7, #88]	@ 0x58
			float time_3; memcpy(&time_3, &command.values[2], sizeof(float));
 8001298:	4b65      	ldr	r3, [pc, #404]	@ (8001430 <update+0x2cc>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	657b      	str	r3, [r7, #84]	@ 0x54

			scara_move_j(&scara_0, axis, angle, time_3);
 800129e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80012a4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012a8:	eef0 0a47 	vmov.f32	s1, s14
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	4619      	mov	r1, r3
 80012b2:	4860      	ldr	r0, [pc, #384]	@ (8001434 <update+0x2d0>)
 80012b4:	f000 fb2c 	bl	8001910 <scara_move_j>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80012b8:	4b5c      	ldr	r3, [pc, #368]	@ (800142c <update+0x2c8>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2204      	movs	r2, #4
 80012c6:	f006 fa4b 	bl	8007760 <HAL_UART_Transmit>

			break;
 80012ca:	e0ab      	b.n	8001424 <update+0x2c0>

		case 4:			// SCARA_MOVE_JOINTS
			// |0004   |aaaa   |bbbb   |cccc   |dddd   |eeee|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
        	// |command|angle_0|angle_1|angle_2|angle_3|time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			float angle_0; memcpy(&angle_0, &command.values[0], sizeof(float));
 80012cc:	4b58      	ldr	r3, [pc, #352]	@ (8001430 <update+0x2cc>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	653b      	str	r3, [r7, #80]	@ 0x50
			float angle_1; memcpy(&angle_1, &command.values[1], sizeof(float));
 80012d2:	4b57      	ldr	r3, [pc, #348]	@ (8001430 <update+0x2cc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			float angle_2; memcpy(&angle_2, &command.values[2], sizeof(float));
 80012d8:	4b55      	ldr	r3, [pc, #340]	@ (8001430 <update+0x2cc>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	64bb      	str	r3, [r7, #72]	@ 0x48
			float angle_3; memcpy(&angle_3, &command.values[3], sizeof(float));
 80012de:	4b54      	ldr	r3, [pc, #336]	@ (8001430 <update+0x2cc>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
			float time_4; memcpy(&time_4, &command.values[4], sizeof(float));
 80012e4:	4b52      	ldr	r3, [pc, #328]	@ (8001430 <update+0x2cc>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	643b      	str	r3, [r7, #64]	@ 0x40

			scara_move_js(&scara_0, angle_0, angle_1, angle_2, angle_3, time_4);
 80012ea:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80012ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80012f2:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012f6:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 80012fa:	edd7 5a10 	vldr	s11, [r7, #64]	@ 0x40
 80012fe:	eeb0 2a65 	vmov.f32	s4, s11
 8001302:	eef0 1a46 	vmov.f32	s3, s12
 8001306:	eeb0 1a66 	vmov.f32	s2, s13
 800130a:	eef0 0a47 	vmov.f32	s1, s14
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	4848      	ldr	r0, [pc, #288]	@ (8001434 <update+0x2d0>)
 8001314:	f000 fb13 	bl	800193e <scara_move_js>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 8001318:	4b44      	ldr	r3, [pc, #272]	@ (800142c <update+0x2c8>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	2204      	movs	r2, #4
 8001326:	f006 fa1b 	bl	8007760 <HAL_UART_Transmit>

			break;
 800132a:	e07b      	b.n	8001424 <update+0x2c0>

		case 5:			// SCARA_MOVE_COORD
			// |0005   |aaaa|bbbb|cccc   |dddd|eeee|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|x   |y   |z_angle|z   |time|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			float x; memcpy(&x, &command.values[0], sizeof(float));
 800132c:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <update+0x2cc>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float y; memcpy(&y, &command.values[1], sizeof(float));
 8001332:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <update+0x2cc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	63bb      	str	r3, [r7, #56]	@ 0x38
			float z_angle; memcpy(&z_angle, &command.values[2], sizeof(float));
 8001338:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <update+0x2cc>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
			float z; memcpy(&z, &command.values[3], sizeof(float));
 800133e:	4b3c      	ldr	r3, [pc, #240]	@ (8001430 <update+0x2cc>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
			float time_5; memcpy(&time_5, &command.values[4], sizeof(float));
 8001344:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <update+0x2cc>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c

			scara_move_coord(&scara_0, x, y, z_angle, z, time_5);
 800134a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800134e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001352:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001356:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800135a:	edd7 5a0b 	vldr	s11, [r7, #44]	@ 0x2c
 800135e:	eeb0 2a65 	vmov.f32	s4, s11
 8001362:	eef0 1a46 	vmov.f32	s3, s12
 8001366:	eeb0 1a66 	vmov.f32	s2, s13
 800136a:	eef0 0a47 	vmov.f32	s1, s14
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	4830      	ldr	r0, [pc, #192]	@ (8001434 <update+0x2d0>)
 8001374:	f000 fb04 	bl	8001980 <scara_move_coord>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <update+0x2c8>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	2204      	movs	r2, #4
 8001386:	f006 f9eb 	bl	8007760 <HAL_UART_Transmit>

			break;
 800138a:	e04b      	b.n	8001424 <update+0x2c0>
			// PROTOCOL (RETURN) [48 bytes]:

			// |0006   |aaaa |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|angle|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			int32_t axis_6; memcpy(&axis_6, &command.values[0], sizeof(int32_t));
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <update+0x2cc>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
			float angle_read = potentiometers_read_angle(axis_6);
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f9a3 	bl	80016e0 <potentiometers_read_angle>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <update+0x2c8>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	2204      	movs	r2, #4
 80013b0:	f006 f9d6 	bl	8007760 <HAL_UART_Transmit>

			HAL_UART_Transmit(uart_channel, (uint8_t*)&angle_read, sizeof(float), HAL_MAX_DELAY);
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <update+0x2c8>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	2204      	movs	r2, #4
 80013c2:	f006 f9cd 	bl	8007760 <HAL_UART_Transmit>

			break;
 80013c6:	e02d      	b.n	8001424 <update+0x2c0>

			// |0007   |aaaa|bbbb|cccc   |dddd|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|
			// |command|x   |y   |z_angle|z   |xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|xxxx|

			scara_position_t scara_pos;
			scara_pos = scara_get_position(&scara_0);
 80013c8:	481a      	ldr	r0, [pc, #104]	@ (8001434 <update+0x2d0>)
 80013ca:	f000 fb17 	bl	80019fc <scara_get_position>
 80013ce:	eeb0 6a40 	vmov.f32	s12, s0
 80013d2:	eef0 6a60 	vmov.f32	s13, s1
 80013d6:	eeb0 7a41 	vmov.f32	s14, s2
 80013da:	eef0 7a61 	vmov.f32	s15, s3
 80013de:	ed87 6a05 	vstr	s12, [r7, #20]
 80013e2:	edc7 6a06 	vstr	s13, [r7, #24]
 80013e6:	ed87 7a07 	vstr	s14, [r7, #28]
 80013ea:	edc7 7a08 	vstr	s15, [r7, #32]

			float pos[4];
			pos[0] = scara_pos.x;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	607b      	str	r3, [r7, #4]
			pos[1] = scara_pos.y;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60bb      	str	r3, [r7, #8]
			pos[2] = scara_pos.angle_z;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	60fb      	str	r3, [r7, #12]
			pos[3] = scara_pos.z;
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	613b      	str	r3, [r7, #16]

			HAL_UART_Transmit(uart_channel, (uint8_t*)&success_flag, sizeof(int32_t), HAL_MAX_DELAY);
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <update+0x2c8>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2204      	movs	r2, #4
 800140c:	f006 f9a8 	bl	8007760 <HAL_UART_Transmit>

			HAL_UART_Transmit(uart_channel, (uint8_t*)pos, sizeof(pos), HAL_MAX_DELAY);
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <update+0x2c8>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	2210      	movs	r2, #16
 800141c:	f006 f9a0 	bl	8007760 <HAL_UART_Transmit>

			break;
 8001420:	e000      	b.n	8001424 <update+0x2c0>

		default:

			break;
 8001422:	bf00      	nop

		}
	}
}
 8001424:	bf00      	nop
 8001426:	37c0      	adds	r7, #192	@ 0xc0
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	2000013c 	.word	0x2000013c
 8001430:	20000140 	.word	0x20000140
 8001434:	20000240 	.word	0x20000240

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_DMA_Init+0x3c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <MX_DMA_Init+0x3c>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_DMA_Init+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2038      	movs	r0, #56	@ 0x38
 8001460:	f003 ff0f 	bl	8005282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001464:	2038      	movs	r0, #56	@ 0x38
 8001466:	f003 ff28 	bl	80052ba <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a2c      	ldr	r2, [pc, #176]	@ (8001548 <MX_GPIO_Init+0xd0>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a25      	ldr	r2, [pc, #148]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	4812      	ldr	r0, [pc, #72]	@ (800154c <MX_GPIO_Init+0xd4>)
 8001504:	f004 fbf8 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_GPIO_Init+0xd8>)
 8001520:	f004 fa56 	bl	80059d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001524:	2320      	movs	r3, #32
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_GPIO_Init+0xd4>)
 800153c:	f004 fa48 	bl	80059d0 <HAL_GPIO_Init>

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020800 	.word	0x40020800

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f003 f900 	bl	800475c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f814 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f7ff ff8a 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 8001564:	f7ff ff68 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001568:	f002 fffc 	bl	8004564 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800156c:	f002 fe52 	bl	8004214 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001570:	f002 fef8 	bl	8004364 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001574:	f7ff fcc4 	bl	8000f00 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001578:	f003 f81e 	bl	80045b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  start();
 800157c:	f7ff fd98 	bl	80010b0 <start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	update();
 8001580:	f7ff fdf0 	bl	8001164 <update>
 8001584:	e7fc      	b.n	8001580 <main+0x2c>
	...

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	@ 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	2234      	movs	r2, #52	@ 0x34
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f006 ffe2 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <SystemClock_Config+0xdc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <SystemClock_Config+0xdc>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <SystemClock_Config+0xdc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <SystemClock_Config+0xe0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a25      	ldr	r2, [pc, #148]	@ (8001668 <SystemClock_Config+0xe0>)
 80015d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <SystemClock_Config+0xe0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ec:	2310      	movs	r3, #16
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f0:	2302      	movs	r3, #2
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f8:	2308      	movs	r3, #8
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015fc:	23b4      	movs	r3, #180	@ 0xb4
 80015fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001604:	2302      	movs	r3, #2
 8001606:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4618      	mov	r0, r3
 8001612:	f004 ff25 	bl	8006460 <HAL_RCC_OscConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800161c:	f000 f826 	bl	800166c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001620:	f004 fb84 	bl	8005d2c <HAL_PWREx_EnableOverDrive>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800162a:	f000 f81f 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162e:	230f      	movs	r3, #15
 8001630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001632:	2302      	movs	r3, #2
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800163a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001644:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	2105      	movs	r1, #5
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fbbd 	bl	8005dcc <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001658:	f000 f808 	bl	800166c <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	3750      	adds	r7, #80	@ 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <potentiometers_init>:

uint16_t pot_raw_value[POTS];
potentiometer_t pots[POTS];

void potentiometers_init()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, pot_raw_value, POTS);
 800167c:	2202      	movs	r2, #2
 800167e:	490f      	ldr	r1, [pc, #60]	@ (80016bc <potentiometers_init+0x44>)
 8001680:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <potentiometers_init+0x48>)
 8001682:	f003 f945 	bl	8004910 <HAL_ADC_Start_DMA>

    // default values for white robot
    pots[0].min_angle = -90.0;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <potentiometers_init+0x4c>)
 8001688:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <potentiometers_init+0x50>)
 800168a:	601a      	str	r2, [r3, #0]
    pots[0].max_angle = 90.0;
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <potentiometers_init+0x4c>)
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <potentiometers_init+0x54>)
 8001690:	605a      	str	r2, [r3, #4]
    pots[0].min_raw_value = 700.0;
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <potentiometers_init+0x4c>)
 8001694:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <potentiometers_init+0x58>)
 8001696:	60da      	str	r2, [r3, #12]
    pots[0].max_raw_value = 3300.0;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <potentiometers_init+0x4c>)
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <potentiometers_init+0x5c>)
 800169c:	611a      	str	r2, [r3, #16]

    pots[1].min_angle = 0.0;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <potentiometers_init+0x4c>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
    pots[1].max_angle = 90.0;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <potentiometers_init+0x4c>)
 80016a8:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <potentiometers_init+0x54>)
 80016aa:	619a      	str	r2, [r3, #24]
    pots[1].min_raw_value = 720.0;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <potentiometers_init+0x4c>)
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <potentiometers_init+0x60>)
 80016b0:	621a      	str	r2, [r3, #32]
    pots[1].max_raw_value = 2090.0;
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <potentiometers_init+0x4c>)
 80016b4:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <potentiometers_init+0x64>)
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
//
//	pots[1].min_angle = 0.0;
//	pots[1].max_angle = 90.0;
//	pots[1].min_raw_value = 700.0;
//	pots[1].max_raw_value = 2050.0;
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000264 	.word	0x20000264
 80016c0:	20000094 	.word	0x20000094
 80016c4:	20000268 	.word	0x20000268
 80016c8:	c2b40000 	.word	0xc2b40000
 80016cc:	42b40000 	.word	0x42b40000
 80016d0:	442f0000 	.word	0x442f0000
 80016d4:	454e4000 	.word	0x454e4000
 80016d8:	44340000 	.word	0x44340000
 80016dc:	4502a000 	.word	0x4502a000

080016e0 <potentiometers_read_angle>:
    // range 0-4095
    return pot_raw_value[_channel];
}

float potentiometers_read_angle(int _channel)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    float angle = pots[_channel].min_angle
 80016e8:	492c      	ldr	r1, [pc, #176]	@ (800179c <potentiometers_read_angle+0xbc>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	ed93 7a00 	vldr	s14, [r3]
                + ((pot_raw_value[_channel] - pots[_channel].min_raw_value)
 80016fa:	4a29      	ldr	r2, [pc, #164]	@ (80017a0 <potentiometers_read_angle+0xc0>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800170a:	4924      	ldr	r1, [pc, #144]	@ (800179c <potentiometers_read_angle+0xbc>)
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	330c      	adds	r3, #12
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee76 6ae7 	vsub.f32	s13, s13, s15
                * (pots[_channel].max_angle - pots[_channel].min_angle))
 8001722:	491e      	ldr	r1, [pc, #120]	@ (800179c <potentiometers_read_angle+0xbc>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3304      	adds	r3, #4
 8001732:	ed93 6a00 	vldr	s12, [r3]
 8001736:	4919      	ldr	r1, [pc, #100]	@ (800179c <potentiometers_read_angle+0xbc>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee76 7a67 	vsub.f32	s15, s12, s15
 800174c:	ee26 6aa7 	vmul.f32	s12, s13, s15
                / (pots[_channel].max_raw_value - pots[_channel].min_raw_value);
 8001750:	4912      	ldr	r1, [pc, #72]	@ (800179c <potentiometers_read_angle+0xbc>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3310      	adds	r3, #16
 8001760:	edd3 6a00 	vldr	s13, [r3]
 8001764:	490d      	ldr	r1, [pc, #52]	@ (800179c <potentiometers_read_angle+0xbc>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	330c      	adds	r3, #12
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800177c:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float angle = pots[_channel].min_angle
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	edc7 7a03 	vstr	s15, [r7, #12]
    return angle;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	ee07 3a90 	vmov	s15, r3
}
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000268 	.word	0x20000268
 80017a0:	20000264 	.word	0x20000264

080017a4 <scara_init>:
void scara_init(scara_t *_scara, servo_t *_joint_0, servo_t *_joint_1, servo_t *_joint_2, servo_t *_joint_3,
                float _link_1, float _link_2, float _z_min, float _z_max,
				float _settling_time,
				float _P_0, float _I_0, float _D_0,
				float _P_1, float _I_1, float _D_1)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b092      	sub	sp, #72	@ 0x48
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80017ac:	63b9      	str	r1, [r7, #56]	@ 0x38
 80017ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b2:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80017b6:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 80017ba:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 80017be:	edc7 1a08 	vstr	s3, [r7, #32]
 80017c2:	ed87 2a07 	vstr	s4, [r7, #28]
 80017c6:	edc7 2a06 	vstr	s5, [r7, #24]
 80017ca:	ed87 3a05 	vstr	s6, [r7, #20]
 80017ce:	edc7 3a04 	vstr	s7, [r7, #16]
 80017d2:	ed87 4a03 	vstr	s8, [r7, #12]
 80017d6:	edc7 4a02 	vstr	s9, [r7, #8]
 80017da:	ed87 5a01 	vstr	s10, [r7, #4]
	potentiometers_init();
 80017de:	f7ff ff4b 	bl	8001678 <potentiometers_init>

    if (_scara->servo_controller_scara == NULL) {
 80017e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <scara_init+0x54>
        _scara->servo_controller_scara = malloc(sizeof(servo_controller_scara_t));
 80017ea:	202c      	movs	r0, #44	@ 0x2c
 80017ec:	f006 fc0a 	bl	8008004 <malloc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f6:	621a      	str	r2, [r3, #32]
    }

    _scara->joint_0 = _joint_0;
 80017f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017fc:	601a      	str	r2, [r3, #0]
    _scara->joint_1 = _joint_1;
 80017fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001802:	605a      	str	r2, [r3, #4]
    _scara->joint_2 = _joint_2;
 8001804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001808:	609a      	str	r2, [r3, #8]
    _scara->joint_3 = _joint_3;
 800180a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800180c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800180e:	60da      	str	r2, [r3, #12]

    servo_controller_scara_init(_scara->servo_controller_scara,
 8001810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001812:	6a18      	ldr	r0, [r3, #32]
 8001814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	ed97 3a01 	vldr	s6, [r7, #4]
 800181c:	edd7 2a02 	vldr	s5, [r7, #8]
 8001820:	ed97 2a03 	vldr	s4, [r7, #12]
 8001824:	edd7 1a04 	vldr	s3, [r7, #16]
 8001828:	ed97 1a05 	vldr	s2, [r7, #20]
 800182c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001830:	ed97 0a07 	vldr	s0, [r7, #28]
 8001834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001836:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001838:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800183a:	f000 fceb 	bl	8002214 <servo_controller_scara_init>
    							_joint_0, _joint_1, _joint_2, _joint_3,
								_settling_time,
								_P_0, _I_0, _D_0, _P_1, _I_1, _D_1);

    _scara->link_1 = _link_1;
 800183e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001842:	611a      	str	r2, [r3, #16]
    _scara->link_2 = _link_2;
 8001844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001848:	615a      	str	r2, [r3, #20]
    _scara->z_min = _z_min;
 800184a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800184c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184e:	619a      	str	r2, [r3, #24]
    _scara->z_max = _z_max;
 8001850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001852:	6a3a      	ldr	r2, [r7, #32]
 8001854:	61da      	str	r2, [r3, #28]
}
 8001856:	bf00      	nop
 8001858:	3740      	adds	r7, #64	@ 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <scara_reinit>:
void scara_reinit(scara_t *_scara,
				  float _link_1, float _link_2, float _z_min, float _z_max,
				  float _settling_time,
				  float _P_0, float _I_0, float _D_0,
				  float _P_1, float _I_1, float _D_1)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b08c      	sub	sp, #48	@ 0x30
 8001862:	af00      	add	r7, sp, #0
 8001864:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001866:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 800186a:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 800186e:	ed87 1a08 	vstr	s2, [r7, #32]
 8001872:	edc7 1a07 	vstr	s3, [r7, #28]
 8001876:	ed87 2a06 	vstr	s4, [r7, #24]
 800187a:	edc7 2a05 	vstr	s5, [r7, #20]
 800187e:	ed87 3a04 	vstr	s6, [r7, #16]
 8001882:	edc7 3a03 	vstr	s7, [r7, #12]
 8001886:	ed87 4a02 	vstr	s8, [r7, #8]
 800188a:	edc7 4a01 	vstr	s9, [r7, #4]
 800188e:	ed87 5a00 	vstr	s10, [r7]
    servo_controller_scara_reinit(_scara->servo_controller_scara,
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	ed97 3a00 	vldr	s6, [r7]
 800189a:	edd7 2a01 	vldr	s5, [r7, #4]
 800189e:	ed97 2a02 	vldr	s4, [r7, #8]
 80018a2:	edd7 1a03 	vldr	s3, [r7, #12]
 80018a6:	ed97 1a04 	vldr	s2, [r7, #16]
 80018aa:	edd7 0a05 	vldr	s1, [r7, #20]
 80018ae:	ed97 0a06 	vldr	s0, [r7, #24]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fd4c 	bl	8002350 <servo_controller_scara_reinit>
								  _settling_time,
								  _P_0, _I_0, _D_0, _P_1, _I_1, _D_1);

    _scara->link_1 = _link_1;
 80018b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018bc:	611a      	str	r2, [r3, #16]
    _scara->link_2 = _link_2;
 80018be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c2:	615a      	str	r2, [r3, #20]
    _scara->z_min = _z_min;
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	619a      	str	r2, [r3, #24]
    _scara->z_max = _z_max;
 80018ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	61da      	str	r2, [r3, #28]
}
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	@ 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <scara_auto_calibrate>:

void scara_auto_calibrate(scara_t *_scara)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	servo_controller_scara_auto_calibrate_axis(_scara->servo_controller_scara, 0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd60 	bl	80023ac <servo_controller_scara_auto_calibrate_axis>
	HAL_Delay(500);
 80018ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018f0:	f002 ffa6 	bl	8004840 <HAL_Delay>
	servo_controller_scara_auto_calibrate_axis(_scara->servo_controller_scara, 1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fd56 	bl	80023ac <servo_controller_scara_auto_calibrate_axis>
	HAL_Delay(500);
 8001900:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001904:	f002 ff9c 	bl	8004840 <HAL_Delay>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <scara_move_j>:

void scara_move_j(scara_t *_scara, int _axis, float _angle, float _T)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	ed87 0a01 	vstr	s0, [r7, #4]
 800191e:	edc7 0a00 	vstr	s1, [r7]
	move_j_scara(_scara->servo_controller_scara, _axis, _angle, _T);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	edd7 0a00 	vldr	s1, [r7]
 800192a:	ed97 0a01 	vldr	s0, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fff9 	bl	8002928 <move_j_scara>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <scara_move_js>:

void scara_move_js(scara_t *_scara, float _angle_0, float _angle_1, float _angle_2, float _angle_3, float _T)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	6178      	str	r0, [r7, #20]
 8001946:	ed87 0a04 	vstr	s0, [r7, #16]
 800194a:	edc7 0a03 	vstr	s1, [r7, #12]
 800194e:	ed87 1a02 	vstr	s2, [r7, #8]
 8001952:	edc7 1a01 	vstr	s3, [r7, #4]
 8001956:	ed87 2a00 	vstr	s4, [r7]
    move_js_scara(_scara->servo_controller_scara, _angle_0, _angle_1, _angle_2, _angle_3, _T);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	ed97 2a00 	vldr	s4, [r7]
 8001962:	edd7 1a01 	vldr	s3, [r7, #4]
 8001966:	ed97 1a02 	vldr	s2, [r7, #8]
 800196a:	edd7 0a03 	vldr	s1, [r7, #12]
 800196e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fa6c 	bl	8002e50 <move_js_scara>
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <scara_move_coord>:

void scara_move_coord(scara_t *_scara, float _x, float _y, float _z_angle, float _z, float _T)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af02      	add	r7, sp, #8
 8001986:	6178      	str	r0, [r7, #20]
 8001988:	ed87 0a04 	vstr	s0, [r7, #16]
 800198c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001990:	ed87 1a02 	vstr	s2, [r7, #8]
 8001994:	edc7 1a01 	vstr	s3, [r7, #4]
 8001998:	ed87 2a00 	vstr	s4, [r7]
    float theta_1, theta_2, theta_3, theta_4;
    calc_inverse_kinematics(_scara, &theta_1, &theta_2, &theta_3, &theta_4, _x, _y, _z_angle, _z);
 800199c:	f107 001c 	add.w	r0, r7, #28
 80019a0:	f107 0220 	add.w	r2, r7, #32
 80019a4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	edd7 1a01 	vldr	s3, [r7, #4]
 80019b2:	ed97 1a02 	vldr	s2, [r7, #8]
 80019b6:	edd7 0a03 	vldr	s1, [r7, #12]
 80019ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80019be:	4603      	mov	r3, r0
 80019c0:	6978      	ldr	r0, [r7, #20]
 80019c2:	f000 f965 	bl	8001c90 <calc_inverse_kinematics>
    move_js_scara(_scara->servo_controller_scara, theta_1, theta_2, theta_3, theta_4, _T);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80019d6:	ed97 6a06 	vldr	s12, [r7, #24]
 80019da:	ed97 2a00 	vldr	s4, [r7]
 80019de:	eef0 1a46 	vmov.f32	s3, s12
 80019e2:	eeb0 1a66 	vmov.f32	s2, s13
 80019e6:	eef0 0a47 	vmov.f32	s1, s14
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fa2e 	bl	8002e50 <move_js_scara>
}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <scara_get_position>:

scara_position_t scara_get_position(scara_t *_scara)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b099      	sub	sp, #100	@ 0x64
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	6178      	str	r0, [r7, #20]
	float theta_1 = potentiometers_read_angle(0);
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fe6b 	bl	80016e0 <potentiometers_read_angle>
 8001a0a:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	float theta_2 = potentiometers_read_angle(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fe66 	bl	80016e0 <potentiometers_read_angle>
 8001a14:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
	float theta_3 = _scara->joint_2->cpos;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float theta_4 = _scara->joint_3->cpos;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48

	float x, y, angle_z, z;

	calc_forward_kinematics(_scara, &x, &y, &angle_z, &z, theta_1, theta_2, theta_3, theta_4);
 8001a28:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a2c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001a30:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001a34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	edd7 1a12 	vldr	s3, [r7, #72]	@ 0x48
 8001a3e:	ed97 1a13 	vldr	s2, [r7, #76]	@ 0x4c
 8001a42:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8001a46:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f000 f827 	bl	8001aa0 <calc_forward_kinematics>

	scara_position_t pos;
	pos.x = x;
 8001a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a54:	61bb      	str	r3, [r7, #24]
	pos.y = y;
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	61fb      	str	r3, [r7, #28]
	pos.angle_z = angle_z;
 8001a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5c:	623b      	str	r3, [r7, #32]
	pos.z = z;
 8001a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24

	return pos;
 8001a62:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a78:	ee06 0a10 	vmov	s12, r0
 8001a7c:	ee06 1a90 	vmov	s13, r1
 8001a80:	ee07 2a10 	vmov	s14, r2
 8001a84:	ee07 3a90 	vmov	s15, r3
}
 8001a88:	eeb0 0a46 	vmov.f32	s0, s12
 8001a8c:	eef0 0a66 	vmov.f32	s1, s13
 8001a90:	eeb0 1a47 	vmov.f32	s2, s14
 8001a94:	eef0 1a67 	vmov.f32	s3, s15
 8001a98:	375c      	adds	r7, #92	@ 0x5c
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
	...

08001aa0 <calc_forward_kinematics>:
// calculations
// ----------------------------------------------------------------------------------------------------

void calc_forward_kinematics(scara_t *_scara, float *_x, float *_y, float *_angle_z, float *_z,
											  float _theta_1, float _theta_2, float _theta_3, float _theta_4)
{
 8001aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa4:	b08c      	sub	sp, #48	@ 0x30
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	61f8      	str	r0, [r7, #28]
 8001aaa:	61b9      	str	r1, [r7, #24]
 8001aac:	617a      	str	r2, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ab4:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ab8:	ed87 1a01 	vstr	s2, [r7, #4]
 8001abc:	edc7 1a00 	vstr	s3, [r7]
    float l1 = _scara->link_1;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float l2 = _scara->link_2;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28

    // convert angles from degrees to radians
    float t1 = _theta_1 * (PI / 180.0);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7fe fcff 	bl	80004d0 <__aeabi_f2d>
 8001ad2:	a36d      	add	r3, pc, #436	@ (adr r3, 8001c88 <calc_forward_kinematics+0x1e8>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fd52 	bl	8000580 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f844 	bl	8000b70 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    float t2 = _theta_2 * (PI / 180.0);
 8001aec:	68b8      	ldr	r0, [r7, #8]
 8001aee:	f7fe fcef 	bl	80004d0 <__aeabi_f2d>
 8001af2:	a365      	add	r3, pc, #404	@ (adr r3, 8001c88 <calc_forward_kinematics+0x1e8>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd42 	bl	8000580 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f834 	bl	8000b70 <__aeabi_d2f>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	623b      	str	r3, [r7, #32]

    // compute X and Y position
    *_x = l1 * sin(t1) + l2 * sin(t1 + t2);
 8001b0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b0e:	f7fe fcdf 	bl	80004d0 <__aeabi_f2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b18:	f7fe fcda 	bl	80004d0 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	ec43 2b10 	vmov	d0, r2, r3
 8001b24:	f007 f850 	bl	8008bc8 <sin>
 8001b28:	ec53 2b10 	vmov	r2, r3, d0
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fd26 	bl	8000580 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b3e:	f7fe fcc7 	bl	80004d0 <__aeabi_f2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	ee17 0a90 	vmov	r0, s15
 8001b56:	f7fe fcbb 	bl	80004d0 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	ec43 2b10 	vmov	d0, r2, r3
 8001b62:	f007 f831 	bl	8008bc8 <sin>
 8001b66:	ec53 2b10 	vmov	r2, r3, d0
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe fd07 	bl	8000580 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4640      	mov	r0, r8
 8001b78:	4649      	mov	r1, r9
 8001b7a:	f7fe fb4b 	bl	8000214 <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe fff3 	bl	8000b70 <__aeabi_d2f>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]
    *_y = l1 * cos(t1) + l2 * cos(t1 + t2);
 8001b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b92:	f7fe fc9d 	bl	80004d0 <__aeabi_f2d>
 8001b96:	4604      	mov	r4, r0
 8001b98:	460d      	mov	r5, r1
 8001b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b9c:	f7fe fc98 	bl	80004d0 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ec43 2b10 	vmov	d0, r2, r3
 8001ba8:	f006 ffb2 	bl	8008b10 <cos>
 8001bac:	ec53 2b10 	vmov	r2, r3, d0
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fce4 	bl	8000580 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bc2:	f7fe fc85 	bl	80004d0 <__aeabi_f2d>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	460d      	mov	r5, r1
 8001bca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bce:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7fe fc79 	bl	80004d0 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ec43 2b10 	vmov	d0, r2, r3
 8001be6:	f006 ff93 	bl	8008b10 <cos>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fcc5 	bl	8000580 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	f7fe fb09 	bl	8000214 <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ffb1 	bl	8000b70 <__aeabi_d2f>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]

    // compute total rotation angle around Z
    *_angle_z = _theta_1 + _theta_2 + _theta_3;
 8001c14:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	edc3 7a00 	vstr	s15, [r3]

    // convert theta_4 (the servo angle) back to Z height
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c3c:	edd7 6a00 	vldr	s13, [r7]
 8001c40:	ee76 6ae7 	vsub.f32	s13, s13, s15
          (_scara->z_max - _scara->z_min) /
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	ed93 6a07 	vldr	s12, [r3, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c50:	ee76 7a67 	vsub.f32	s15, s12, s15
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001c54:	ee26 6aa7 	vmul.f32	s12, s13, s15
          (_scara->joint_3->max_angle - _scara->joint_3->min_angle));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c68:	ee76 6ae7 	vsub.f32	s13, s13, s15
          (_scara->z_max - _scara->z_min) /
 8001c6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
    *_z = _scara->z_min + ((_theta_4 - _scara->joint_3->min_angle) *
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c76:	edc3 7a00 	vstr	s15, [r3]
}
 8001c7a:	bf00      	nop
 8001c7c:	3730      	adds	r7, #48	@ 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c84:	f3af 8000 	nop.w
 8001c88:	a2529d39 	.word	0xa2529d39
 8001c8c:	3f91df46 	.word	0x3f91df46

08001c90 <calc_inverse_kinematics>:

void calc_inverse_kinematics(scara_t *_scara, float *_theta_1, float *_theta_2, float *_theta_3, float *_theta_4,
                                              float _x, float _y, float _angle_z, float _z)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b092      	sub	sp, #72	@ 0x48
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	61f8      	str	r0, [r7, #28]
 8001c98:	61b9      	str	r1, [r7, #24]
 8001c9a:	617a      	str	r2, [r7, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ca2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ca6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001caa:	edc7 1a00 	vstr	s3, [r7]
    float l1 = _scara->link_1;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
    float l2 = _scara->link_2;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	643b      	str	r3, [r7, #64]	@ 0x40
    float x = _x;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float y = _y;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    float r = sqrt((x * x) + (y * y));
 8001cc2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001cc6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	ee17 0a90 	vmov	r0, s15
 8001cda:	f7fe fbf9 	bl	80004d0 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ec43 2b10 	vmov	d0, r2, r3
 8001ce6:	f006 fee7 	bl	8008ab8 <sqrt>
 8001cea:	ec53 2b10 	vmov	r2, r3, d0
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff3d 	bl	8000b70 <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	637b      	str	r3, [r7, #52]	@ 0x34

    float phi1 = acos(((l2 * l2) - (r * r) - (l1 * l1)) / (-2 * r * l1));
 8001cfa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001cfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d02:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d1e:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001d22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d26:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d32:	ee16 0a90 	vmov	r0, s13
 8001d36:	f7fe fbcb 	bl	80004d0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ec43 2b10 	vmov	d0, r2, r3
 8001d42:	f006 fe13 	bl	800896c <acos>
 8001d46:	ec53 2b10 	vmov	r2, r3, d0
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff0f 	bl	8000b70 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	633b      	str	r3, [r7, #48]	@ 0x30
    float phi2 = atan2(x, y);
 8001d56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d58:	f7fe fbba 	bl	80004d0 <__aeabi_f2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d62:	f7fe fbb5 	bl	80004d0 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	ec43 2b11 	vmov	d1, r2, r3
 8001d6e:	ec45 4b10 	vmov	d0, r4, r5
 8001d72:	f006 fe2f 	bl	80089d4 <atan2>
 8001d76:	ec53 2b10 	vmov	r2, r3, d0
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe fef7 	bl	8000b70 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float phi3 = acos(((r * r) - (l1 * l1) - (l2 * l2)) / (-2 * l1 * l2));
 8001d86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d8e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d9a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001daa:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001dae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001db2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dbe:	ee16 0a90 	vmov	r0, s13
 8001dc2:	f7fe fb85 	bl	80004d0 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	ec43 2b10 	vmov	d0, r2, r3
 8001dce:	f006 fdcd 	bl	800896c <acos>
 8001dd2:	ec53 2b10 	vmov	r2, r3, d0
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fec9 	bl	8000b70 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    // convert z displacement to servo angle in degrees
    float phi4 = _scara->joint_3->min_angle + ((_z - _scara->z_min)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	edd3 7a06 	vldr	s15, [r3, #24]
 8001df0:	edd7 6a00 	vldr	s13, [r7]
 8001df4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    			 * (_scara->joint_3->max_angle - _scara->joint_3->min_angle) / (_scara->z_max - _scara->z_min));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	ed93 6a07 	vldr	s12, [r3, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e0c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	edd3 6a07 	vldr	s13, [r3, #28]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e20:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float phi4 = _scara->joint_3->min_angle + ((_z - _scara->z_min)
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    *_theta_1 = (phi2 - phi1) * (180.0 / PI);   // convert to degrees
 8001e2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001e30:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	ee17 0a90 	vmov	r0, s15
 8001e3c:	f7fe fb48 	bl	80004d0 <__aeabi_f2d>
 8001e40:	a31f      	add	r3, pc, #124	@ (adr r3, 8001ec0 <calc_inverse_kinematics+0x230>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fb9b 	bl	8000580 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe8d 	bl	8000b70 <__aeabi_d2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]
    *_theta_2 = (PI - phi3) * (180.0 / PI);     // convert to degrees
 8001e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e5e:	f7fe fb37 	bl	80004d0 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	a118      	add	r1, pc, #96	@ (adr r1, 8001ec8 <calc_inverse_kinematics+0x238>)
 8001e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6c:	f7fe f9d0 	bl	8000210 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	a311      	add	r3, pc, #68	@ (adr r3, 8001ec0 <calc_inverse_kinematics+0x230>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fb7f 	bl	8000580 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fe71 	bl	8000b70 <__aeabi_d2f>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]
    *_theta_3 = _angle_z - (*_theta_1 + *_theta_2);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	ed93 7a00 	vldr	s14, [r3]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	edc3 7a00 	vstr	s15, [r3]
    *_theta_4 = phi4;
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3748      	adds	r7, #72	@ 0x48
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	1a63c1f8 	.word	0x1a63c1f8
 8001ec4:	404ca5dc 	.word	0x404ca5dc
 8001ec8:	54442d18 	.word	0x54442d18
 8001ecc:	400921fb 	.word	0x400921fb

08001ed0 <servo_init>:
#include "servo.h"
#include "tim.h"

void servo_init(servo_t *_servo, float _min_pulse_width, float _max_pulse_width, float _zero_pulse_width,
				float _min_angle, float _max_angle, float _offset_angle, float _cpos, int _channel)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b08b      	sub	sp, #44	@ 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ed8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001edc:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ee0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ee4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ee8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001eec:	edc7 2a03 	vstr	s5, [r7, #12]
 8001ef0:	ed87 3a02 	vstr	s6, [r7, #8]
 8001ef4:	6079      	str	r1, [r7, #4]
	_servo->min_pulse_width = _min_pulse_width;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	601a      	str	r2, [r3, #0]
	_servo->max_pulse_width = _max_pulse_width;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	605a      	str	r2, [r3, #4]
	_servo->zero_pulse_width = _zero_pulse_width;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	609a      	str	r2, [r3, #8]

	// uncalibrated values
	_servo->calib_min_pulse_width = _min_pulse_width;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	6a3a      	ldr	r2, [r7, #32]
 8001f0c:	60da      	str	r2, [r3, #12]
	_servo->calib_max_pulse_width = _max_pulse_width;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	611a      	str	r2, [r3, #16]
	_servo->calib_zero_pulse_width = _zero_pulse_width;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	615a      	str	r2, [r3, #20]

	_servo->min_angle = _min_angle;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	619a      	str	r2, [r3, #24]
	_servo->max_angle = _max_angle;
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	61da      	str	r2, [r3, #28]
	_servo->offset_angle = _offset_angle;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	621a      	str	r2, [r3, #32]

	_servo->cpos = _cpos;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo->last_angle_adjustment = 0;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28

	switch (_channel)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d827      	bhi.n	8001f90 <servo_init+0xc0>
 8001f40:	a201      	add	r2, pc, #4	@ (adr r2, 8001f48 <servo_init+0x78>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f67 	.word	0x08001f67
 8001f50:	08001f75 	.word	0x08001f75
 8001f54:	08001f83 	.word	0x08001f83
	{
		case 0:
			// PC7 - timer 3 channel 2
			_servo->pwm_timer = &htim3;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <servo_init+0xdc>)
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_2;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	2204      	movs	r2, #4
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001f64:	e01b      	b.n	8001f9e <servo_init+0xce>
		case 1:
			// PA6 - timer 3 channel 1
			_servo->pwm_timer = &htim3;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <servo_init+0xdc>)
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_1;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001f72:	e014      	b.n	8001f9e <servo_init+0xce>
		case 2:
			// PB0 - timer 3 channel 3
			_servo->pwm_timer = &htim3;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <servo_init+0xdc>)
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_3;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001f80:	e00d      	b.n	8001f9e <servo_init+0xce>
		case 3:
			// PB1 - timer 3 channel 4
			_servo->pwm_timer = &htim3;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <servo_init+0xdc>)
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_4;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001f8e:	e006      	b.n	8001f9e <servo_init+0xce>
		default:
			// PC7 - timer 3 channel 2
			_servo->pwm_timer = &htim3;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	4a06      	ldr	r2, [pc, #24]	@ (8001fac <servo_init+0xdc>)
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c
			_servo->pwm_timer_channel = TIM_CHANNEL_2;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	2204      	movs	r2, #4
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
			break;
 8001f9c:	bf00      	nop
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	@ 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000294 	.word	0x20000294

08001fb0 <servo_get_pulse_width_us>:

float servo_get_pulse_width_us(servo_t *_servo)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    uint16_t pulse_width = __HAL_TIM_GET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <servo_get_pulse_width_us+0x1c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	e018      	b.n	8001ffe <servo_get_pulse_width_us+0x4e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d105      	bne.n	8001fe0 <servo_get_pulse_width_us+0x30>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	e00e      	b.n	8001ffe <servo_get_pulse_width_us+0x4e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d105      	bne.n	8001ff4 <servo_get_pulse_width_us+0x44>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	e004      	b.n	8001ffe <servo_get_pulse_width_us+0x4e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	81fb      	strh	r3, [r7, #14]
    float pulse_width_us = ((float)pulse_width * 27.0) / 9.0;
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	ee17 0a90 	vmov	r0, s15
 800200e:	f7fe fa5f 	bl	80004d0 <__aeabi_f2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <servo_get_pulse_width_us+0xa0>)
 8002018:	f7fe fab2 	bl	8000580 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <servo_get_pulse_width_us+0xa4>)
 800202a:	f7fe fbd3 	bl	80007d4 <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd9b 	bl	8000b70 <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
 800203c:	60bb      	str	r3, [r7, #8]
    return pulse_width_us;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	ee07 3a90 	vmov	s15, r3
}
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	403b0000 	.word	0x403b0000
 8002054:	40220000 	.word	0x40220000

08002058 <servo_set_pulse_width_us>:

void servo_set_pulse_width_us(servo_t *_servo, float _pulse_width_us)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	ed87 0a00 	vstr	s0, [r7]
	uint16_t pulse_width = (uint16_t)((_pulse_width_us * 9.0) / 27.0);
 8002064:	6838      	ldr	r0, [r7, #0]
 8002066:	f7fe fa33 	bl	80004d0 <__aeabi_f2d>
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <servo_set_pulse_width_us+0x8c>)
 8002070:	f7fe fa86 	bl	8000580 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <servo_set_pulse_width_us+0x90>)
 8002082:	f7fe fba7 	bl	80007d4 <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fd4f 	bl	8000b30 <__aeabi_d2uiz>
 8002092:	4603      	mov	r3, r0
 8002094:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <servo_set_pulse_width_us+0x52>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	89fa      	ldrh	r2, [r7, #14]
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020a8:	e018      	b.n	80020dc <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d105      	bne.n	80020be <servo_set_pulse_width_us+0x66>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020bc:	e00e      	b.n	80020dc <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d105      	bne.n	80020d2 <servo_set_pulse_width_us+0x7a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80020d0:	e004      	b.n	80020dc <servo_set_pulse_width_us+0x84>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40220000 	.word	0x40220000
 80020e8:	403b0000 	.word	0x403b0000

080020ec <servo_set_angle>:

    return angle;
}

void servo_set_angle(servo_t *_servo, float _angle)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	ed87 0a00 	vstr	s0, [r7]
	// set the current position parameter
	_servo->cpos = _angle;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24

	float pulse_width_us;
	_angle = _angle - _servo->offset_angle;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 7a08 	vldr	s15, [r3, #32]
 8002104:	ed97 7a00 	vldr	s14, [r7]
 8002108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210c:	edc7 7a00 	vstr	s15, [r7]
	if (_angle > 0)
 8002110:	edd7 7a00 	vldr	s15, [r7]
 8002114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd18      	ble.n	8002150 <servo_set_angle+0x64>
	{
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	ed93 7a05 	vldr	s14, [r3, #20]
					   * (_servo->calib_max_pulse_width - _servo->calib_zero_pulse_width)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 6a04 	vldr	s13, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002130:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002134:	edd7 7a00 	vldr	s15, [r7]
 8002138:	ee26 6aa7 	vmul.f32	s12, s13, s15
					   / (_servo->max_angle - 0));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002142:	eec6 7a26 	vdiv.f32	s15, s12, s13
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	edc7 7a03 	vstr	s15, [r7, #12]
 800214e:	e026      	b.n	800219e <servo_set_angle+0xb2>
	}
	else if (_angle < 0)
 8002150:	edd7 7a00 	vldr	s15, [r7]
 8002154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d51c      	bpl.n	8002198 <servo_set_angle+0xac>
	{
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	ed93 7a05 	vldr	s14, [r3, #20]
					   * (_servo->calib_zero_pulse_width - _servo->calib_min_pulse_width)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edd3 6a05 	vldr	s13, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002170:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002174:	edd7 7a00 	vldr	s15, [r7]
 8002178:	ee26 6aa7 	vmul.f32	s12, s13, s15
					   / (0 - _servo->min_angle));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002182:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002210 <servo_set_angle+0x124>
 8002186:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800218a:	eec6 7a26 	vdiv.f32	s15, s12, s13
		pulse_width_us = _servo->calib_zero_pulse_width + ((_angle - 0)
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	edc7 7a03 	vstr	s15, [r7, #12]
 8002196:	e002      	b.n	800219e <servo_set_angle+0xb2>
	}
	else
	{
		pulse_width_us = _servo->calib_zero_pulse_width;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	60fb      	str	r3, [r7, #12]
	}

	// Convert pulse width (us) to timer counts for 333Hz PWM
	// timer counts = (pulse width in s x 90000000) / (270 * 1000000)
	uint16_t pulse_width = (uint16_t)((pulse_width_us * 9) / 27);
 800219e:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a2:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80021a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021aa:	eef3 6a0b 	vmov.f32	s13, #59	@ 0x41d80000  27.0
 80021ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b6:	ee17 3a90 	vmov	r3, s15
 80021ba:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <servo_set_angle+0xe4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	897a      	ldrh	r2, [r7, #10]
 80021cc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021ce:	e018      	b.n	8002202 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d105      	bne.n	80021e4 <servo_set_angle+0xf8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021e2:	e00e      	b.n	8002202 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d105      	bne.n	80021f8 <servo_set_angle+0x10c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80021f6:	e004      	b.n	8002202 <servo_set_angle+0x116>
	__HAL_TIM_SET_COMPARE(_servo->pwm_timer, _servo->pwm_timer_channel, pulse_width);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	00000000 	.word	0x00000000

08002214 <servo_controller_scara_init>:
void servo_controller_scara_init(servo_controller_scara_t *_servo_controller_scara,
						   	     servo_t *_axis_0, servo_t *_axis_1, servo_t *_axis_2, servo_t *_axis_3,
						   	   	 float _settling_time,
								 float _P_0, float _I_0, float _D_0,
							 	 float _P_1, float _I_1, float _D_1)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800221c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800221e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002220:	623b      	str	r3, [r7, #32]
 8002222:	ed87 0a07 	vstr	s0, [r7, #28]
 8002226:	edc7 0a06 	vstr	s1, [r7, #24]
 800222a:	ed87 1a05 	vstr	s2, [r7, #20]
 800222e:	edc7 1a04 	vstr	s3, [r7, #16]
 8002232:	ed87 2a03 	vstr	s4, [r7, #12]
 8002236:	edc7 2a02 	vstr	s5, [r7, #8]
 800223a:	ed87 3a01 	vstr	s6, [r7, #4]
	_servo_controller_scara->axis_0 = _axis_0;
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002242:	601a      	str	r2, [r3, #0]
	_servo_controller_scara->axis_1 = _axis_1;
 8002244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002248:	605a      	str	r2, [r3, #4]
	_servo_controller_scara->axis_2 = _axis_2;
 800224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	609a      	str	r2, [r3, #8]
	_servo_controller_scara->axis_3 = _axis_3;
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002254:	60da      	str	r2, [r3, #12]

	servo_init(_axis_0, 2500, 500, 1500, -90, 90, 0, 0, 0);
 8002256:	2100      	movs	r1, #0
 8002258:	ed9f 3a31 	vldr	s6, [pc, #196]	@ 8002320 <servo_controller_scara_init+0x10c>
 800225c:	eddf 2a30 	vldr	s5, [pc, #192]	@ 8002320 <servo_controller_scara_init+0x10c>
 8002260:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 8002324 <servo_controller_scara_init+0x110>
 8002264:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8002328 <servo_controller_scara_init+0x114>
 8002268:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800232c <servo_controller_scara_init+0x118>
 800226c:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002330 <servo_controller_scara_init+0x11c>
 8002270:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002334 <servo_controller_scara_init+0x120>
 8002274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002276:	f7ff fe2b 	bl	8001ed0 <servo_init>
	servo_init(_axis_1, 2500, 500, 1500, -90, 30, 90, 0, 1);
 800227a:	2101      	movs	r1, #1
 800227c:	ed9f 3a28 	vldr	s6, [pc, #160]	@ 8002320 <servo_controller_scara_init+0x10c>
 8002280:	eddf 2a28 	vldr	s5, [pc, #160]	@ 8002324 <servo_controller_scara_init+0x110>
 8002284:	eeb3 2a0e 	vmov.f32	s4, #62	@ 0x41f00000  30.0
 8002288:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8002328 <servo_controller_scara_init+0x114>
 800228c:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800232c <servo_controller_scara_init+0x118>
 8002290:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8002330 <servo_controller_scara_init+0x11c>
 8002294:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002334 <servo_controller_scara_init+0x120>
 8002298:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800229a:	f7ff fe19 	bl	8001ed0 <servo_init>
	servo_init(_axis_2, 500, 2500, 1550, -180, 180, 0, 0, 2);
 800229e:	2102      	movs	r1, #2
 80022a0:	ed9f 3a1f 	vldr	s6, [pc, #124]	@ 8002320 <servo_controller_scara_init+0x10c>
 80022a4:	eddf 2a1e 	vldr	s5, [pc, #120]	@ 8002320 <servo_controller_scara_init+0x10c>
 80022a8:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8002338 <servo_controller_scara_init+0x124>
 80022ac:	eddf 1a23 	vldr	s3, [pc, #140]	@ 800233c <servo_controller_scara_init+0x128>
 80022b0:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8002340 <servo_controller_scara_init+0x12c>
 80022b4:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002334 <servo_controller_scara_init+0x120>
 80022b8:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002330 <servo_controller_scara_init+0x11c>
 80022bc:	6a38      	ldr	r0, [r7, #32]
 80022be:	f7ff fe07 	bl	8001ed0 <servo_init>
	servo_init(_axis_3, 500, 2300, 1500, 90, -60, 0, 0, 3);
 80022c2:	2103      	movs	r1, #3
 80022c4:	ed9f 3a16 	vldr	s6, [pc, #88]	@ 8002320 <servo_controller_scara_init+0x10c>
 80022c8:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8002320 <servo_controller_scara_init+0x10c>
 80022cc:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 8002344 <servo_controller_scara_init+0x130>
 80022d0:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8002324 <servo_controller_scara_init+0x110>
 80022d4:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800232c <servo_controller_scara_init+0x118>
 80022d8:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8002348 <servo_controller_scara_init+0x134>
 80022dc:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002330 <servo_controller_scara_init+0x11c>
 80022e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022e2:	f7ff fdf5 	bl	8001ed0 <servo_init>

	_servo_controller_scara->settling_time = _settling_time;
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	611a      	str	r2, [r3, #16]

	_servo_controller_scara->P_0 = _P_0;
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	615a      	str	r2, [r3, #20]
	_servo_controller_scara->I_0 = _I_0;
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	619a      	str	r2, [r3, #24]
	_servo_controller_scara->D_0 = _D_0;
 80022f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	61da      	str	r2, [r3, #28]

	_servo_controller_scara->P_1 = _P_1;
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	621a      	str	r2, [r3, #32]
	_servo_controller_scara->I_1 = _I_1;
 8002304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo_controller_scara->D_1 = _D_1;
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28

	printf("servo controller initialised\n");
 8002310:	480e      	ldr	r0, [pc, #56]	@ (800234c <servo_controller_scara_init+0x138>)
 8002312:	f006 f845 	bl	80083a0 <puts>
}
 8002316:	bf00      	nop
 8002318:	3730      	adds	r7, #48	@ 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	00000000 	.word	0x00000000
 8002324:	42b40000 	.word	0x42b40000
 8002328:	c2b40000 	.word	0xc2b40000
 800232c:	44bb8000 	.word	0x44bb8000
 8002330:	43fa0000 	.word	0x43fa0000
 8002334:	451c4000 	.word	0x451c4000
 8002338:	43340000 	.word	0x43340000
 800233c:	c3340000 	.word	0xc3340000
 8002340:	44c1c000 	.word	0x44c1c000
 8002344:	c2700000 	.word	0xc2700000
 8002348:	450fc000 	.word	0x450fc000
 800234c:	0800b288 	.word	0x0800b288

08002350 <servo_controller_scara_reinit>:

void servo_controller_scara_reinit(servo_controller_scara_t *_servo_controller_scara,
								   float _settling_time,
								   float _P_0, float _I_0, float _D_0,
								   float _P_1, float _I_1, float _D_1)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	61f8      	str	r0, [r7, #28]
 8002358:	ed87 0a06 	vstr	s0, [r7, #24]
 800235c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002360:	ed87 1a04 	vstr	s2, [r7, #16]
 8002364:	edc7 1a03 	vstr	s3, [r7, #12]
 8002368:	ed87 2a02 	vstr	s4, [r7, #8]
 800236c:	edc7 2a01 	vstr	s5, [r7, #4]
 8002370:	ed87 3a00 	vstr	s6, [r7]
	_servo_controller_scara->settling_time = _settling_time;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	611a      	str	r2, [r3, #16]

	_servo_controller_scara->P_0 = _P_0;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	615a      	str	r2, [r3, #20]
	_servo_controller_scara->I_0 = _I_0;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	619a      	str	r2, [r3, #24]
	_servo_controller_scara->D_0 = _D_0;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	61da      	str	r2, [r3, #28]

	_servo_controller_scara->P_1 = _P_1;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	621a      	str	r2, [r3, #32]
	_servo_controller_scara->I_1 = _I_1;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
	_servo_controller_scara->D_1 = _D_1;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <servo_controller_scara_auto_calibrate_axis>:

void servo_controller_scara_auto_calibrate_axis(servo_controller_scara_t *_servo_controller_scara, int _axis)
{
 80023ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b0:	b08c      	sub	sp, #48	@ 0x30
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	servo_t *axis = _servo_controller_scara->axis_0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	switch (_axis)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d103      	bne.n	80023cc <servo_controller_scara_auto_calibrate_axis+0x20>
	{
		case 1:
			axis = _servo_controller_scara->axis_1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 80023ca:	e000      	b.n	80023ce <servo_controller_scara_auto_calibrate_axis+0x22>
		default:
			break;
 80023cc:	bf00      	nop
	}

	float pulse_width_us = axis->zero_pulse_width;
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float pot_angle = potentiometers_read_angle(_axis);
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f7ff f983 	bl	80016e0 <potentiometers_read_angle>
 80023da:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	// reset to zero position
	servo_set_pulse_width_us(axis, pulse_width_us);
 80023de:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80023e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023e4:	f7ff fe38 	bl	8002058 <servo_set_pulse_width_us>
	HAL_Delay(500);
 80023e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023ec:	f002 fa28 	bl	8004840 <HAL_Delay>

	// check whether the axis is inverted
	// ==================== AXIS IS NOT INVERTED ====================
	if (axis->max_pulse_width >= axis->min_pulse_width)
 80023f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80023f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	f2c0 813f 	blt.w	8002686 <servo_controller_scara_auto_calibrate_axis+0x2da>
	{
		// sweep from 0 to max pulse width (deadband = 4), stopping when max angle reached
		for (int i = axis->zero_pulse_width; i <= axis->max_pulse_width; i+=5)
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	edd3 7a02 	vldr	s15, [r3, #8]
 800240e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002412:	ee17 3a90 	vmov	r3, s15
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	e054      	b.n	80024c4 <servo_controller_scara_auto_calibrate_axis+0x118>
		{
			pulse_width_us = i;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002424:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002428:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800242c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800242e:	f7ff fe13 	bl	8002058 <servo_set_pulse_width_us>

			// check position using encoder
			pot_angle = potentiometers_read_angle(_axis);
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f7ff f954 	bl	80016e0 <potentiometers_read_angle>
 8002438:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			// if angle within 20% of target angle, move slower
			if (pot_angle >= (axis->max_angle * 0.5) + axis->offset_angle)
 800243c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800243e:	f7fe f847 	bl	80004d0 <__aeabi_f2d>
 8002442:	4604      	mov	r4, r0
 8002444:	460d      	mov	r5, r1
 8002446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f840 	bl	80004d0 <__aeabi_f2d>
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4bb9      	ldr	r3, [pc, #740]	@ (800273c <servo_controller_scara_auto_calibrate_axis+0x390>)
 8002456:	f7fe f893 	bl	8000580 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4690      	mov	r8, r2
 8002460:	4699      	mov	r9, r3
 8002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f832 	bl	80004d0 <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4640      	mov	r0, r8
 8002472:	4649      	mov	r1, r9
 8002474:	f7fd fece 	bl	8000214 <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fe fb04 	bl	8000a8c <__aeabi_dcmpge>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <servo_controller_scara_auto_calibrate_axis+0xe6>
			{
				HAL_Delay(50);
 800248a:	2032      	movs	r0, #50	@ 0x32
 800248c:	f002 f9d8 	bl	8004840 <HAL_Delay>
 8002490:	e002      	b.n	8002498 <servo_controller_scara_auto_calibrate_axis+0xec>
			}
			else // otherwise move fast
			{
				HAL_Delay(5);
 8002492:	2005      	movs	r0, #5
 8002494:	f002 f9d4 	bl	8004840 <HAL_Delay>
			}

			// check if target angle is reached
			if (pot_angle >= (axis->max_angle + axis->offset_angle))
 8002498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249a:	ed93 7a07 	vldr	s14, [r3, #28]
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	db03      	blt.n	80024be <servo_controller_scara_auto_calibrate_axis+0x112>
			{
				axis->calib_max_pulse_width = pulse_width_us;
 80024b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ba:	611a      	str	r2, [r3, #16]
				break;
 80024bc:	e00f      	b.n	80024de <servo_controller_scara_auto_calibrate_axis+0x132>
		for (int i = axis->zero_pulse_width; i <= axis->max_pulse_width; i+=5)
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	3305      	adds	r3, #5
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d99d      	bls.n	800241a <servo_controller_scara_auto_calibrate_axis+0x6e>
			}
		}
		// sweep from max angle to min angle
		for (int i = pulse_width_us; i >= axis->min_pulse_width; i-=5)
 80024de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80024e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e6:	ee17 3a90 	vmov	r3, s15
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e054      	b.n	8002598 <servo_controller_scara_auto_calibrate_axis+0x1ec>
		{
			pulse_width_us = i;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 80024fc:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002500:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002502:	f7ff fda9 	bl	8002058 <servo_set_pulse_width_us>

			// check position using encoder
			pot_angle = potentiometers_read_angle(_axis);
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f7ff f8ea 	bl	80016e0 <potentiometers_read_angle>
 800250c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle <= (axis->min_angle * 0.5) + axis->offset_angle)
 8002510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002512:	f7fd ffdd 	bl	80004d0 <__aeabi_f2d>
 8002516:	4604      	mov	r4, r0
 8002518:	460d      	mov	r5, r1
 800251a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd ffd6 	bl	80004d0 <__aeabi_f2d>
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4b84      	ldr	r3, [pc, #528]	@ (800273c <servo_controller_scara_auto_calibrate_axis+0x390>)
 800252a:	f7fe f829 	bl	8000580 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4690      	mov	r8, r2
 8002534:	4699      	mov	r9, r3
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffc8 	bl	80004d0 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4640      	mov	r0, r8
 8002546:	4649      	mov	r1, r9
 8002548:	f7fd fe64 	bl	8000214 <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fe fa90 	bl	8000a78 <__aeabi_dcmple>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <servo_controller_scara_auto_calibrate_axis+0x1ba>
			{
				HAL_Delay(50);
 800255e:	2032      	movs	r0, #50	@ 0x32
 8002560:	f002 f96e 	bl	8004840 <HAL_Delay>
 8002564:	e002      	b.n	800256c <servo_controller_scara_auto_calibrate_axis+0x1c0>
			}
			else
			{
				HAL_Delay(5);
 8002566:	2005      	movs	r0, #5
 8002568:	f002 f96a 	bl	8004840 <HAL_Delay>
			}

			if (pot_angle <= (axis->min_angle + axis->offset_angle))
 800256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	edd3 7a08 	vldr	s15, [r3, #32]
 8002578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d803      	bhi.n	8002592 <servo_controller_scara_auto_calibrate_axis+0x1e6>
			{
				axis->calib_min_pulse_width = pulse_width_us;
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800258e:	60da      	str	r2, [r3, #12]
				break;
 8002590:	e00f      	b.n	80025b2 <servo_controller_scara_auto_calibrate_axis+0x206>
		for (int i = pulse_width_us; i >= axis->min_pulse_width; i-=5)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b05      	subs	r3, #5
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	da9d      	bge.n	80024ee <servo_controller_scara_auto_calibrate_axis+0x142>
			}
		}
		// sweep towards max pulse width again, but stopping at 0 degrees
		for (int i = pulse_width_us; i <= axis->max_pulse_width; i+=5)
 80025b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80025b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ba:	ee17 3a90 	vmov	r3, s15
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e053      	b.n	800266a <servo_controller_scara_auto_calibrate_axis+0x2be>
		{
			pulse_width_us = i;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 80025d0:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80025d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025d6:	f7ff fd3f 	bl	8002058 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f7ff f880 	bl	80016e0 <potentiometers_read_angle>
 80025e0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->min_angle * 0.5) + axis->offset_angle)
 80025e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025e6:	f7fd ff73 	bl	80004d0 <__aeabi_f2d>
 80025ea:	4604      	mov	r4, r0
 80025ec:	460d      	mov	r5, r1
 80025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff6c 	bl	80004d0 <__aeabi_f2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <servo_controller_scara_auto_calibrate_axis+0x390>)
 80025fe:	f7fd ffbf 	bl	8000580 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff5e 	bl	80004d0 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4640      	mov	r0, r8
 800261a:	4649      	mov	r1, r9
 800261c:	f7fd fdfa 	bl	8000214 <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fe fa30 	bl	8000a8c <__aeabi_dcmpge>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <servo_controller_scara_auto_calibrate_axis+0x28e>
			{
				HAL_Delay(50);
 8002632:	2032      	movs	r0, #50	@ 0x32
 8002634:	f002 f904 	bl	8004840 <HAL_Delay>
 8002638:	e002      	b.n	8002640 <servo_controller_scara_auto_calibrate_axis+0x294>
			}
			else
			{
				HAL_Delay(5);
 800263a:	2005      	movs	r0, #5
 800263c:	f002 f900 	bl	8004840 <HAL_Delay>
			}

			if (pot_angle >= (0 + axis->offset_angle))
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	edd3 7a08 	vldr	s15, [r3, #32]
 8002646:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002740 <servo_controller_scara_auto_calibrate_axis+0x394>
 800264a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800264e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	db03      	blt.n	8002664 <servo_controller_scara_auto_calibrate_axis+0x2b8>
			{
				axis->calib_zero_pulse_width = pulse_width_us;
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002660:	615a      	str	r2, [r3, #20]
				break;
 8002662:	e152      	b.n	800290a <servo_controller_scara_auto_calibrate_axis+0x55e>
		for (int i = pulse_width_us; i <= axis->max_pulse_width; i+=5)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	3305      	adds	r3, #5
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002676:	edd3 7a01 	vldr	s15, [r3, #4]
 800267a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d99e      	bls.n	80025c2 <servo_controller_scara_auto_calibrate_axis+0x216>
 8002684:	e141      	b.n	800290a <servo_controller_scara_auto_calibrate_axis+0x55e>
	}
	// ==================== AXIS IS INVERTED ====================
	else
	{
		// sweep towards max angle
		for (int i = axis->zero_pulse_width; i >= axis->max_pulse_width; i-=5)
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	edd3 7a02 	vldr	s15, [r3, #8]
 800268c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002690:	ee17 3a90 	vmov	r3, s15
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e058      	b.n	800274a <servo_controller_scara_auto_calibrate_axis+0x39e>
		{
			pulse_width_us = i;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 80026a6:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80026aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026ac:	f7ff fcd4 	bl	8002058 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 80026b0:	6838      	ldr	r0, [r7, #0]
 80026b2:	f7ff f815 	bl	80016e0 <potentiometers_read_angle>
 80026b6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->max_angle * 0.5) + axis->offset_angle)
 80026ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026bc:	f7fd ff08 	bl	80004d0 <__aeabi_f2d>
 80026c0:	4604      	mov	r4, r0
 80026c2:	460d      	mov	r5, r1
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff01 	bl	80004d0 <__aeabi_f2d>
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <servo_controller_scara_auto_calibrate_axis+0x390>)
 80026d4:	f7fd ff54 	bl	8000580 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4690      	mov	r8, r2
 80026de:	4699      	mov	r9, r3
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fef3 	bl	80004d0 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4640      	mov	r0, r8
 80026f0:	4649      	mov	r1, r9
 80026f2:	f7fd fd8f 	bl	8000214 <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fe f9c5 	bl	8000a8c <__aeabi_dcmpge>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <servo_controller_scara_auto_calibrate_axis+0x364>
			{
				HAL_Delay(50);
 8002708:	2032      	movs	r0, #50	@ 0x32
 800270a:	f002 f899 	bl	8004840 <HAL_Delay>
 800270e:	e002      	b.n	8002716 <servo_controller_scara_auto_calibrate_axis+0x36a>
			}
			else
			{
				HAL_Delay(5);
 8002710:	2005      	movs	r0, #5
 8002712:	f002 f895 	bl	8004840 <HAL_Delay>
			}

			if (pot_angle >= (axis->max_angle + axis->offset_angle))
 8002716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002718:	ed93 7a07 	vldr	s14, [r3, #28]
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800272a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	db07      	blt.n	8002744 <servo_controller_scara_auto_calibrate_axis+0x398>
			{
				axis->calib_max_pulse_width = pulse_width_us;
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002738:	611a      	str	r2, [r3, #16]
				break;
 800273a:	e013      	b.n	8002764 <servo_controller_scara_auto_calibrate_axis+0x3b8>
 800273c:	3fe00000 	.word	0x3fe00000
 8002740:	00000000 	.word	0x00000000
		for (int i = axis->zero_pulse_width; i >= axis->max_pulse_width; i-=5)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3b05      	subs	r3, #5
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	edd3 7a01 	vldr	s15, [r3, #4]
 800275a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	da99      	bge.n	8002698 <servo_controller_scara_auto_calibrate_axis+0x2ec>
			}
		}
		// sweep from max angle to min angle
		for (int i = pulse_width_us; i <= axis->min_pulse_width; i+=5)
 8002764:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800276c:	ee17 3a90 	vmov	r3, s15
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e054      	b.n	800281e <servo_controller_scara_auto_calibrate_axis+0x472>
		{
			pulse_width_us = i;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002782:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002788:	f7ff fc66 	bl	8002058 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe ffa7 	bl	80016e0 <potentiometers_read_angle>
 8002792:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle <= (axis->min_angle * 0.5) + axis->offset_angle)
 8002796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002798:	f7fd fe9a 	bl	80004d0 <__aeabi_f2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe93 	bl	80004d0 <__aeabi_f2d>
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b5b      	ldr	r3, [pc, #364]	@ (800291c <servo_controller_scara_auto_calibrate_axis+0x570>)
 80027b0:	f7fd fee6 	bl	8000580 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4690      	mov	r8, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe85 	bl	80004d0 <__aeabi_f2d>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4640      	mov	r0, r8
 80027cc:	4649      	mov	r1, r9
 80027ce:	f7fd fd21 	bl	8000214 <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7fe f94d 	bl	8000a78 <__aeabi_dcmple>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <servo_controller_scara_auto_calibrate_axis+0x440>
			{
				HAL_Delay(50);
 80027e4:	2032      	movs	r0, #50	@ 0x32
 80027e6:	f002 f82b 	bl	8004840 <HAL_Delay>
 80027ea:	e002      	b.n	80027f2 <servo_controller_scara_auto_calibrate_axis+0x446>
			}
			else
			{
				HAL_Delay(5);
 80027ec:	2005      	movs	r0, #5
 80027ee:	f002 f827 	bl	8004840 <HAL_Delay>
			}

			if (pot_angle <= (axis->min_angle + axis->offset_angle))
 80027f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80027f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d803      	bhi.n	8002818 <servo_controller_scara_auto_calibrate_axis+0x46c>
			{
				axis->calib_min_pulse_width = pulse_width_us;
 8002810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002814:	60da      	str	r2, [r3, #12]
				break;
 8002816:	e00f      	b.n	8002838 <servo_controller_scara_auto_calibrate_axis+0x48c>
		for (int i = pulse_width_us; i <= axis->min_pulse_width; i+=5)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3305      	adds	r3, #5
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	d99d      	bls.n	8002774 <servo_controller_scara_auto_calibrate_axis+0x3c8>
			}
		}
		// return to 0
		for (int i = pulse_width_us; i >= axis->max_pulse_width; i-=5)
 8002838:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800283c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002840:	ee17 3a90 	vmov	r3, s15
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e053      	b.n	80028f0 <servo_controller_scara_auto_calibrate_axis+0x544>
		{
			pulse_width_us = i;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002852:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			servo_set_pulse_width_us(axis, pulse_width_us);
 8002856:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800285a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800285c:	f7ff fbfc 	bl	8002058 <servo_set_pulse_width_us>

			pot_angle = potentiometers_read_angle(_axis);
 8002860:	6838      	ldr	r0, [r7, #0]
 8002862:	f7fe ff3d 	bl	80016e0 <potentiometers_read_angle>
 8002866:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			if (pot_angle >= (axis->min_angle * 0.5) + axis->offset_angle)
 800286a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800286c:	f7fd fe30 	bl	80004d0 <__aeabi_f2d>
 8002870:	4604      	mov	r4, r0
 8002872:	460d      	mov	r5, r1
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe29 	bl	80004d0 <__aeabi_f2d>
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b26      	ldr	r3, [pc, #152]	@ (800291c <servo_controller_scara_auto_calibrate_axis+0x570>)
 8002884:	f7fd fe7c 	bl	8000580 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe1b 	bl	80004d0 <__aeabi_f2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4640      	mov	r0, r8
 80028a0:	4649      	mov	r1, r9
 80028a2:	f7fd fcb7 	bl	8000214 <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fe f8ed 	bl	8000a8c <__aeabi_dcmpge>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <servo_controller_scara_auto_calibrate_axis+0x514>
			{
				HAL_Delay(50);
 80028b8:	2032      	movs	r0, #50	@ 0x32
 80028ba:	f001 ffc1 	bl	8004840 <HAL_Delay>
 80028be:	e002      	b.n	80028c6 <servo_controller_scara_auto_calibrate_axis+0x51a>
			}
			else
			{
				HAL_Delay(5);
 80028c0:	2005      	movs	r0, #5
 80028c2:	f001 ffbd 	bl	8004840 <HAL_Delay>
			}

			if (pot_angle >= (0 + axis->offset_angle))
 80028c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028cc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002920 <servo_controller_scara_auto_calibrate_axis+0x574>
 80028d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	db03      	blt.n	80028ea <servo_controller_scara_auto_calibrate_axis+0x53e>
			{
				axis->calib_zero_pulse_width = pulse_width_us;
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028e6:	615a      	str	r2, [r3, #20]
				break;
 80028e8:	e00f      	b.n	800290a <servo_controller_scara_auto_calibrate_axis+0x55e>
		for (int i = pulse_width_us; i >= axis->max_pulse_width; i-=5)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b05      	subs	r3, #5
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	da9e      	bge.n	8002848 <servo_controller_scara_auto_calibrate_axis+0x49c>
			}
		}
	}
	axis->cpos = pot_angle;
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002910:	bf00      	nop
 8002912:	3730      	adds	r7, #48	@ 0x30
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800291a:	bf00      	nop
 800291c:	3fe00000 	.word	0x3fe00000
	...

08002928 <move_j_scara>:

void move_j_scara(servo_controller_scara_t *_servo_controller_scara, int _axis, float _angle, float _T)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	ed2d 8b06 	vpush	{d8-d10}
 800292e:	b0ac      	sub	sp, #176	@ 0xb0
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	ed87 0a01 	vstr	s0, [r7, #4]
 800293a:	edc7 0a00 	vstr	s1, [r7]
    // assign axis
    servo_t *axis = _servo_controller_scara->axis_0;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    switch (_axis)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d013      	beq.n	8002974 <move_j_scara+0x4c>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b03      	cmp	r3, #3
 8002950:	dc15      	bgt.n	800297e <move_j_scara+0x56>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d003      	beq.n	8002960 <move_j_scara+0x38>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d005      	beq.n	800296a <move_j_scara+0x42>
            break;
        case 3:
			axis = _servo_controller_scara->axis_3;
			break;
        default:
            break;
 800295e:	e00e      	b.n	800297e <move_j_scara+0x56>
            axis = _servo_controller_scara->axis_1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 8002968:	e00a      	b.n	8002980 <move_j_scara+0x58>
            axis = _servo_controller_scara->axis_2;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 8002972:	e005      	b.n	8002980 <move_j_scara+0x58>
			axis = _servo_controller_scara->axis_3;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			break;
 800297c:	e000      	b.n	8002980 <move_j_scara+0x58>
            break;
 800297e:	bf00      	nop
    }

    // compensate for adjustment from previous move
    float cpos = axis->cpos;
 8002980:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (_axis == 0 || _axis == 1)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <move_j_scara+0x6e>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d14a      	bne.n	8002a2c <move_j_scara+0x104>
	{
		float cpos_adjustment;
		if (axis->last_angle_adjustment < 0)
 8002996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800299e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a6:	d50c      	bpl.n	80029c2 <move_j_scara+0x9a>
		{
			cpos_adjustment = -(axis->last_angle_adjustment) * 0.5;
 80029a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80029b0:	eef1 7a67 	vneg.f32	s15, s15
 80029b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 80029c0:	e009      	b.n	80029d6 <move_j_scara+0xae>
		}
		else
		{
			cpos_adjustment = axis->last_angle_adjustment * 0.5;
 80029c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80029ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80029ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		}

		if (_angle - cpos > cpos_adjustment)
 80029d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80029da:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80029de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e2:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80029e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	d508      	bpl.n	8002a02 <move_j_scara+0xda>
		{
			cpos += cpos_adjustment;
 80029f0:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80029f4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80029f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fc:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
 8002a00:	e014      	b.n	8002a2c <move_j_scara+0x104>
		}
		else if (_angle - cpos < cpos_adjustment)
 8002a02:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a06:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0e:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	dd07      	ble.n	8002a2c <move_j_scara+0x104>
		{
			cpos -= cpos_adjustment;
 8002a1c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8002a20:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a28:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		}
	}

	float tpos = _angle;        // target position in degrees
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	673b      	str	r3, [r7, #112]	@ 0x70
	float h = tpos - cpos;     	// displacement in degrees
 8002a30:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002a34:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	float T = _T;				// time to complete move
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	66bb      	str	r3, [r7, #104]	@ 0x68
	float alpha = 0.3;         	// acceleration phase duration as fraction of T
 8002a44:	4bc6      	ldr	r3, [pc, #792]	@ (8002d60 <move_j_scara+0x438>)
 8002a46:	667b      	str	r3, [r7, #100]	@ 0x64
	float beta = 0.3;          	// jerk phase duration as fraction of T_a
 8002a48:	4bc5      	ldr	r3, [pc, #788]	@ (8002d60 <move_j_scara+0x438>)
 8002a4a:	663b      	str	r3, [r7, #96]	@ 0x60

	// calculate double-S profile parameters
	float T_a, T_j, v_max, a_max, j_max;
	calc_double_s_parameters(T, h, alpha, beta, &T_a, &T_j, &v_max, &a_max, &j_max);
 8002a4c:	f107 0414 	add.w	r4, r7, #20
 8002a50:	f107 0218 	add.w	r2, r7, #24
 8002a54:	f107 011c 	add.w	r1, r7, #28
 8002a58:	f107 0020 	add.w	r0, r7, #32
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4623      	mov	r3, r4
 8002a64:	edd7 1a18 	vldr	s3, [r7, #96]	@ 0x60
 8002a68:	ed97 1a19 	vldr	s2, [r7, #100]	@ 0x64
 8002a6c:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8002a70:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8002a74:	f000 fed8 	bl	8003828 <calc_double_s_parameters>
	// ============================== MOVE ==============================

	float P;
	float I;
	float D;
	if (_axis == 0)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <move_j_scara+0x170>
	{
		P = _servo_controller_scara->P_0;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		I = _servo_controller_scara->I_0;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		D = _servo_controller_scara->D_0;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a96:	e00b      	b.n	8002ab0 <move_j_scara+0x188>
	}
	else
	{
		P = _servo_controller_scara->P_1;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		I = _servo_controller_scara->I_1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		D = _servo_controller_scara->D_1;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}

	float error_sum = 0.0;
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	float last_error = 0.0;
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	float max_integral = 20.0;
 8002ac0:	4ba8      	ldr	r3, [pc, #672]	@ (8002d64 <move_j_scara+0x43c>)
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// calculate samples
	int samples = (int)(T * 1000.0 / SAMPLING_TIME);
 8002ac4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002ac6:	f7fd fd03 	bl	80004d0 <__aeabi_f2d>
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4ba6      	ldr	r3, [pc, #664]	@ (8002d68 <move_j_scara+0x440>)
 8002ad0:	f7fd fd56 	bl	8000580 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f800 	bl	8000ae0 <__aeabi_d2iz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	65bb      	str	r3, [r7, #88]	@ 0x58

	for (int i = 0; i < samples; i++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aea:	e100      	b.n	8002cee <move_j_scara+0x3c6>
	{
	    double t = i * SAMPLING_TIME / 1000.0; // Convert sampling time to seconds
 8002aec:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002af0:	f7fd fcdc 	bl	80004ac <__aeabi_i2d>
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d68 <move_j_scara+0x440>)
 8002afa:	f7fd fe6b 	bl	80007d4 <__aeabi_ddiv>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	    // desired position using double S-curve profile
	    float dpos = cpos + calc_double_s_value(T, h, T_a, T_j, v_max, a_max, j_max, t);
 8002b06:	ed97 8a08 	vldr	s16, [r7, #32]
 8002b0a:	edd7 8a07 	vldr	s17, [r7, #28]
 8002b0e:	ed97 9a06 	vldr	s18, [r7, #24]
 8002b12:	edd7 9a05 	vldr	s19, [r7, #20]
 8002b16:	ed97 aa04 	vldr	s20, [r7, #16]
 8002b1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002b1e:	f7fe f827 	bl	8000b70 <__aeabi_d2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	ee03 3a90 	vmov	s7, r3
 8002b28:	eeb0 3a4a 	vmov.f32	s6, s20
 8002b2c:	eef0 2a69 	vmov.f32	s5, s19
 8002b30:	eeb0 2a49 	vmov.f32	s4, s18
 8002b34:	eef0 1a68 	vmov.f32	s3, s17
 8002b38:	eeb0 1a48 	vmov.f32	s2, s16
 8002b3c:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8002b40:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8002b44:	f000 fef8 	bl	8003938 <calc_double_s_value>
 8002b48:	eeb0 7a40 	vmov.f32	s14, s0
 8002b4c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	    // ----- control loop -----
	    if (_axis == 0 || _axis == 1)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <move_j_scara+0x23e>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80b6 	bne.w	8002cd2 <move_j_scara+0x3aa>
	    {
	        // error calculation
	        float pot_read = potentiometers_read_angle(_axis);
 8002b66:	68b8      	ldr	r0, [r7, #8]
 8002b68:	f7fe fdba 	bl	80016e0 <potentiometers_read_angle>
 8002b6c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	        float error = dpos - pot_read;
 8002b70:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002b74:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	        // PID terms
	        float P_term_move = error * P;
 8002b80:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002b84:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	        // integral term (with anti-windup)
	        error_sum += error * (SAMPLING_TIME / 1000.0);
 8002b90:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002b94:	f7fd fc9c 	bl	80004d0 <__aeabi_f2d>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b9e:	f7fd fc97 	bl	80004d0 <__aeabi_f2d>
 8002ba2:	a36d      	add	r3, pc, #436	@ (adr r3, 8002d58 <move_j_scara+0x430>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f7fd fcea 	bl	8000580 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	f7fd fb2e 	bl	8000214 <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd ffd6 	bl	8000b70 <__aeabi_d2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	        if (error_sum > max_integral)
 8002bca:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002bce:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	dd03      	ble.n	8002be4 <move_j_scara+0x2bc>
	            error_sum = max_integral;
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002be2:	e010      	b.n	8002c06 <move_j_scara+0x2de>
	        else if (error_sum < -max_integral)
 8002be4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002be8:	eef1 7a67 	vneg.f32	s15, s15
 8002bec:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d505      	bpl.n	8002c06 <move_j_scara+0x2de>
	            error_sum = -max_integral;
 8002bfa:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002bfe:	eef1 7a67 	vneg.f32	s15, s15
 8002c02:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

	        float I_term_move = error_sum * I;
 8002c06:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002c0a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	        // derivative term
	        float D_term_move = ((error - last_error) / (SAMPLING_TIME / 1000.0)) * D;
 8002c16:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002c1a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	ee17 0a90 	vmov	r0, s15
 8002c26:	f7fd fc53 	bl	80004d0 <__aeabi_f2d>
 8002c2a:	a34b      	add	r3, pc, #300	@ (adr r3, 8002d58 <move_j_scara+0x430>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fdd0 	bl	80007d4 <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c40:	f7fd fc46 	bl	80004d0 <__aeabi_f2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4620      	mov	r0, r4
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	f7fd fc98 	bl	8000580 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ff8a 	bl	8000b70 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	        last_error = error;
 8002c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	        // PID output
	        float pid_output = P_term_move + I_term_move + D_term_move;
 8002c66:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002c6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	        // limit PID output to +-5 degrees
	        float adjusted_error;
	        if (pid_output > 5)
 8002c7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c82:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	dd03      	ble.n	8002c98 <move_j_scara+0x370>
	        {
	            adjusted_error = 5;
 8002c90:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <move_j_scara+0x444>)
 8002c92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c96:	e00f      	b.n	8002cb8 <move_j_scara+0x390>
	        }
	        else if (pid_output < -5)
 8002c98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c9c:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d503      	bpl.n	8002cb2 <move_j_scara+0x38a>
	        {
	            adjusted_error = -5;
 8002caa:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <move_j_scara+0x448>)
 8002cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cb0:	e002      	b.n	8002cb8 <move_j_scara+0x390>
	        }
	        else
	        {
	            adjusted_error = pid_output;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	        }

	        // set adjusted position with PID correction
	        servo_set_angle(axis, dpos + adjusted_error);
 8002cb8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002cbc:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002ccc:	f7ff fa0e 	bl	80020ec <servo_set_angle>
	    {
 8002cd0:	e005      	b.n	8002cde <move_j_scara+0x3b6>
	    }
	    // ------------------------
	    else
	    {
	        // no PID correction for other axes
	        servo_set_angle(axis, dpos);
 8002cd2:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002cd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002cda:	f7ff fa07 	bl	80020ec <servo_set_angle>
	    }

	    HAL_Delay(SAMPLING_TIME);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f001 fdae 	bl	8004840 <HAL_Delay>
	for (int i = 0; i < samples; i++)
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f6ff aef9 	blt.w	8002aec <move_j_scara+0x1c4>
	}

	// ============================== SETTLING ==============================

	// get angle before settling
	float angle_before_settling = 0.0;
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if (_axis == 0 || _axis == 1)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <move_j_scara+0x3e4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d104      	bne.n	8002d16 <move_j_scara+0x3ee>
	{
		angle_before_settling = potentiometers_read_angle(_axis);
 8002d0c:	68b8      	ldr	r0, [r7, #8]
 8002d0e:	f7fe fce7 	bl	80016e0 <potentiometers_read_angle>
 8002d12:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
	}
    float pulse_width_correction = 0.0;
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	67bb      	str	r3, [r7, #120]	@ 0x78

	// settling time (seconds) to reduce backlash
	int settling_samples = (int)(_servo_controller_scara->settling_time * 1000.0 / SAMPLING_TIME_SETTLING);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fbd5 	bl	80004d0 <__aeabi_f2d>
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <move_j_scara+0x440>)
 8002d2c:	f7fd fc28 	bl	8000580 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <move_j_scara+0x44c>)
 8002d3e:	f7fd fd49 	bl	80007d4 <__aeabi_ddiv>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd fec9 	bl	8000ae0 <__aeabi_d2iz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	657b      	str	r3, [r7, #84]	@ 0x54

	for (int i = 0; i < settling_samples; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d56:	e057      	b.n	8002e08 <move_j_scara+0x4e0>
 8002d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d5c:	3f50624d 	.word	0x3f50624d
 8002d60:	3e99999a 	.word	0x3e99999a
 8002d64:	41a00000 	.word	0x41a00000
 8002d68:	408f4000 	.word	0x408f4000
 8002d6c:	40a00000 	.word	0x40a00000
 8002d70:	c0a00000 	.word	0xc0a00000
 8002d74:	40490000 	.word	0x40490000
	{
	    // ----- control loop -----
	    if (_axis == 0 || _axis == 1)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <move_j_scara+0x45c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13b      	bne.n	8002dfc <move_j_scara+0x4d4>
	    {
	        float pot_read = potentiometers_read_angle(_axis);
 8002d84:	68b8      	ldr	r0, [r7, #8]
 8002d86:	f7fe fcab 	bl	80016e0 <potentiometers_read_angle>
 8002d8a:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

	        if (tpos - pot_read < -0.5) {
 8002d8e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002d92:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8002d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d502      	bpl.n	8002dae <move_j_scara+0x486>
	        	pulse_width_correction = 5;
 8002da8:	4b26      	ldr	r3, [pc, #152]	@ (8002e44 <move_j_scara+0x51c>)
 8002daa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dac:	e012      	b.n	8002dd4 <move_j_scara+0x4ac>
	        } else if (tpos - pot_read > 0.5) {
 8002dae:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002db2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	dd02      	ble.n	8002dce <move_j_scara+0x4a6>
	        	pulse_width_correction = -5;
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <move_j_scara+0x520>)
 8002dca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dcc:	e002      	b.n	8002dd4 <move_j_scara+0x4ac>
	        } else {
	        	pulse_width_correction = 0;
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
	        }

	        float current_pulse_width = servo_get_pulse_width_us(axis);
 8002dd4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002dd8:	f7ff f8ea 	bl	8001fb0 <servo_get_pulse_width_us>
 8002ddc:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	        float adjusted_pulse_width = current_pulse_width + pulse_width_correction;
 8002de0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002de4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dec:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	        servo_set_pulse_width_us(axis, adjusted_pulse_width);
 8002df0:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002df4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002df8:	f7ff f92e 	bl	8002058 <servo_set_pulse_width_us>
	    }

	    HAL_Delay(SAMPLING_TIME_SETTLING);
 8002dfc:	2032      	movs	r0, #50	@ 0x32
 8002dfe:	f001 fd1f 	bl	8004840 <HAL_Delay>
	for (int i = 0; i < settling_samples; i++)
 8002e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e04:	3301      	adds	r3, #1
 8002e06:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dbb3      	blt.n	8002d78 <move_j_scara+0x450>
	}

	// set last angle adjustment from settling
	if (_axis == 0 || _axis == 1)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <move_j_scara+0x4f4>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10c      	bne.n	8002e36 <move_j_scara+0x50e>
	{
		axis->last_angle_adjustment = angle_before_settling - potentiometers_read_angle(_axis);
 8002e1c:	68b8      	ldr	r0, [r7, #8]
 8002e1e:	f7fe fc5f 	bl	80016e0 <potentiometers_read_angle>
 8002e22:	eeb0 7a40 	vmov.f32	s14, s0
 8002e26:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e32:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	}
}
 8002e36:	bf00      	nop
 8002e38:	37a8      	adds	r7, #168	@ 0xa8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	ecbd 8b06 	vpop	{d8-d10}
 8002e40:	bdb0      	pop	{r4, r5, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40a00000 	.word	0x40a00000
 8002e48:	c0a00000 	.word	0xc0a00000
 8002e4c:	00000000 	.word	0x00000000

08002e50 <move_js_scara>:

void move_js_scara(servo_controller_scara_t *_servo_controller_scara,
		     	   float _angle_0, float _angle_1, float _angle_2, float _angle_3, float _T)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	ed2d 8b08 	vpush	{d8-d11}
 8002e56:	b0d6      	sub	sp, #344	@ 0x158
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e62:	6018      	str	r0, [r3, #0]
 8002e64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e6c:	ed83 0a00 	vstr	s0, [r3]
 8002e70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e78:	edc3 0a00 	vstr	s1, [r3]
 8002e7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e80:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e84:	ed83 1a00 	vstr	s2, [r3]
 8002e88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e8c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e90:	edc3 1a00 	vstr	s3, [r3]
 8002e94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e9c:	ed83 2a00 	vstr	s4, [r3]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 8002ea0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ea4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						   _servo_controller_scara->axis_1,
 8002eb0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002eb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 8002ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
						   _servo_controller_scara->axis_2,
 8002ec0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ec4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 8002ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
						   _servo_controller_scara->axis_3};
 8002ed0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ed4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
    servo_t *axis[AXES] = {_servo_controller_scara->axis_0,
 8002edc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	// input variables
    float cpos[AXES];
    float tpos[AXES] = {_angle_0, _angle_1, _angle_2, _angle_3};
 8002ee0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ee4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002eee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ef2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002efc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002f00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f0a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002f0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    float h[AXES];     	        // displacement in degrees
	float T = _T;				// time to complete move
 8002f18:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002f1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	float alpha = 0.3;         	// acceleration phase duration as fraction of T
 8002f26:	4bc6      	ldr	r3, [pc, #792]	@ (8003240 <move_js_scara+0x3f0>)
 8002f28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	float beta = 0.3;          	// jerk phase duration as fraction of T_a
 8002f2c:	4bc4      	ldr	r3, [pc, #784]	@ (8003240 <move_js_scara+0x3f0>)
 8002f2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    // calculate double-S profile parameters
	float T_a[AXES], T_j[AXES], v_max[AXES], a_max[AXES], j_max[AXES];

    for (int i = 0; i < AXES; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f38:	e0f6      	b.n	8003128 <move_js_scara+0x2d8>
    {
    	cpos[i] = axis[i]->cpos;
 8002f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f44:	443b      	add	r3, r7
 8002f46:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f56:	443b      	add	r3, r7
 8002f58:	3b84      	subs	r3, #132	@ 0x84
 8002f5a:	601a      	str	r2, [r3, #0]

    	if (i == 0 || i == 1)
 8002f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <move_js_scara+0x11e>
 8002f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 8087 	bne.w	800307c <move_js_scara+0x22c>
    	{
    		float cpos_adjustment;
			if (axis[i]->last_angle_adjustment < 0)
 8002f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f78:	443b      	add	r3, r7
 8002f7a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002f7e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	d512      	bpl.n	8002fb2 <move_js_scara+0x162>
			{
				cpos_adjustment = -(axis[i]->last_angle_adjustment) * 0.5;
 8002f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f96:	443b      	add	r3, r7
 8002f98:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002f9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fa0:	eef1 7a67 	vneg.f32	s15, s15
 8002fa4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fac:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
 8002fb0:	e00f      	b.n	8002fd2 <move_js_scara+0x182>
			}
			else
			{
				cpos_adjustment = axis[i]->last_angle_adjustment * 0.5;
 8002fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fbc:	443b      	add	r3, r7
 8002fbe:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002fc2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fce:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
			}

			if (tpos[AXES] - cpos[i] > cpos_adjustment)
 8002fd2:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8002fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fe0:	443b      	add	r3, r7
 8002fe2:	3b84      	subs	r3, #132	@ 0x84
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fec:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8002ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	d516      	bpl.n	8003028 <move_js_scara+0x1d8>
			{
				cpos[i] += cpos_adjustment;
 8002ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003004:	443b      	add	r3, r7
 8003006:	3b84      	subs	r3, #132	@ 0x84
 8003008:	ed93 7a00 	vldr	s14, [r3]
 800300c:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800301e:	443b      	add	r3, r7
 8003020:	3b84      	subs	r3, #132	@ 0x84
 8003022:	edc3 7a00 	vstr	s15, [r3]
 8003026:	e029      	b.n	800307c <move_js_scara+0x22c>
			}
			else if (tpos[AXES] - cpos[i] < cpos_adjustment)
 8003028:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800302c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003036:	443b      	add	r3, r7
 8003038:	3b84      	subs	r3, #132	@ 0x84
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003042:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	dd15      	ble.n	800307c <move_js_scara+0x22c>
			{
				cpos[i] -= cpos_adjustment;
 8003050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800305a:	443b      	add	r3, r7
 800305c:	3b84      	subs	r3, #132	@ 0x84
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003074:	443b      	add	r3, r7
 8003076:	3b84      	subs	r3, #132	@ 0x84
 8003078:	edc3 7a00 	vstr	s15, [r3]
			}
    	}

        h[i] = tpos[i] - cpos[i];
 800307c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003086:	443b      	add	r3, r7
 8003088:	3b94      	subs	r3, #148	@ 0x94
 800308a:	ed93 7a00 	vldr	s14, [r3]
 800308e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003098:	443b      	add	r3, r7
 800309a:	3b84      	subs	r3, #132	@ 0x84
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ae:	443b      	add	r3, r7
 80030b0:	3ba4      	subs	r3, #164	@ 0xa4
 80030b2:	edc3 7a00 	vstr	s15, [r3]
    	calc_double_s_parameters(T, h[i], alpha, beta, &T_a[i], &T_j[i], &v_max[i], &a_max[i], &j_max[i]);
 80030b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030c0:	443b      	add	r3, r7
 80030c2:	3ba4      	subs	r3, #164	@ 0xa4
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80030cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	18d0      	adds	r0, r2, r3
 80030d4:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80030d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	18d1      	adds	r1, r2, r3
 80030e0:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80030e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	18d4      	adds	r4, r2, r3
 80030ec:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80030f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	18d5      	adds	r5, r2, r3
 80030f8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80030fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	462b      	mov	r3, r5
 8003108:	4622      	mov	r2, r4
 800310a:	edd7 1a4a 	vldr	s3, [r7, #296]	@ 0x128
 800310e:	ed97 1a4b 	vldr	s2, [r7, #300]	@ 0x12c
 8003112:	eef0 0a67 	vmov.f32	s1, s15
 8003116:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 800311a:	f000 fb85 	bl	8003828 <calc_double_s_parameters>
    for (int i = 0; i < AXES; i++)
 800311e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800312c:	2b03      	cmp	r3, #3
 800312e:	f77f af04 	ble.w	8002f3a <move_js_scara+0xea>
    }

	// ============================== MOVE ==============================

    // PID for axis 0 and 1
    float P[2] = {_servo_controller_scara->P_0, _servo_controller_scara->P_1};
 8003132:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003136:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003140:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003144:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	65bb      	str	r3, [r7, #88]	@ 0x58
	float I[2] = {_servo_controller_scara->I_0, _servo_controller_scara->I_1};
 800314e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003152:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800315e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003168:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003170:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003178:	605a      	str	r2, [r3, #4]
	float D[2] = {_servo_controller_scara->D_0, _servo_controller_scara->D_1};
 800317a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800317e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800318a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003194:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800319c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031a4:	605a      	str	r2, [r3, #4]

	float error_sum[2] = {0.0, 0.0};
 80031a6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	605a      	str	r2, [r3, #4]
	float last_error[2] = {0.0, 0.0};
 80031c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
	float max_integral[2] = {20.0, 20.0};
 80031de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <move_js_scara+0x3f4>)
 80031e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ec:	e883 0003 	stmia.w	r3, {r0, r1}

	// calculate samples
	int samples = (int)(T * 1000.0 / SAMPLING_TIME);
 80031f0:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80031f4:	f7fd f96c 	bl	80004d0 <__aeabi_f2d>
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <move_js_scara+0x3f8>)
 80031fe:	f7fd f9bf 	bl	8000580 <__aeabi_dmul>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f7fd fc69 	bl	8000ae0 <__aeabi_d2iz>
 800320e:	4603      	mov	r3, r0
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	for (int i = 0; i < samples; i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800321a:	e1da      	b.n	80035d2 <move_js_scara+0x782>
        double t = i * SAMPLING_TIME / 1000.0; // convert sampling time to seconds
 800321c:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8003220:	f7fd f944 	bl	80004ac <__aeabi_i2d>
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <move_js_scara+0x3f8>)
 800322a:	f7fd fad3 	bl	80007d4 <__aeabi_ddiv>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < AXES; j++)
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800323c:	e1bc      	b.n	80035b8 <move_js_scara+0x768>
 800323e:	bf00      	nop
 8003240:	3e99999a 	.word	0x3e99999a
 8003244:	0800b2a8 	.word	0x0800b2a8
 8003248:	408f4000 	.word	0x408f4000
        {
            float dpos = cpos[j]
 800324c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003256:	443b      	add	r3, r7
 8003258:	3b84      	subs	r3, #132	@ 0x84
 800325a:	ed93 8a00 	vldr	s16, [r3]
                         + calc_double_s_value(T, h[j], T_a[j], T_j[j], v_max[j], a_max[j], j_max[j], t);
 800325e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003268:	443b      	add	r3, r7
 800326a:	3ba4      	subs	r3, #164	@ 0xa4
 800326c:	edd3 8a00 	vldr	s17, [r3]
 8003270:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800327a:	443b      	add	r3, r7
 800327c:	3bb4      	subs	r3, #180	@ 0xb4
 800327e:	ed93 9a00 	vldr	s18, [r3]
 8003282:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800328c:	443b      	add	r3, r7
 800328e:	3bc4      	subs	r3, #196	@ 0xc4
 8003290:	edd3 9a00 	vldr	s19, [r3]
 8003294:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800329e:	443b      	add	r3, r7
 80032a0:	3bd4      	subs	r3, #212	@ 0xd4
 80032a2:	ed93 aa00 	vldr	s20, [r3]
 80032a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032b0:	443b      	add	r3, r7
 80032b2:	3be4      	subs	r3, #228	@ 0xe4
 80032b4:	edd3 aa00 	vldr	s21, [r3]
 80032b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032c2:	443b      	add	r3, r7
 80032c4:	3bf4      	subs	r3, #244	@ 0xf4
 80032c6:	ed93 ba00 	vldr	s22, [r3]
 80032ca:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80032ce:	f7fd fc4f 	bl	8000b70 <__aeabi_d2f>
 80032d2:	4603      	mov	r3, r0
 80032d4:	ee03 3a90 	vmov	s7, r3
 80032d8:	eeb0 3a4b 	vmov.f32	s6, s22
 80032dc:	eef0 2a6a 	vmov.f32	s5, s21
 80032e0:	eeb0 2a4a 	vmov.f32	s4, s20
 80032e4:	eef0 1a69 	vmov.f32	s3, s19
 80032e8:	eeb0 1a49 	vmov.f32	s2, s18
 80032ec:	eef0 0a68 	vmov.f32	s1, s17
 80032f0:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 80032f4:	f000 fb20 	bl	8003938 <calc_double_s_value>
 80032f8:	eef0 7a40 	vmov.f32	s15, s0
            float dpos = cpos[j]
 80032fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003300:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104

            // ----- control loop -----
            if (j == 0 || j == 1)
 8003304:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <move_js_scara+0x4c6>
 800330c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 813f 	bne.w	8003594 <move_js_scara+0x744>
            {
            	// error calculation
				float pot_read = potentiometers_read_angle(j);
 8003316:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 800331a:	f7fe f9e1 	bl	80016e0 <potentiometers_read_angle>
 800331e:	ed87 0a40 	vstr	s0, [r7, #256]	@ 0x100
				float error = dpos - pot_read;
 8003322:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003326:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800332a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332e:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

				// PID terms
				float P_term_move = error * P[j];
 8003332:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800333c:	443b      	add	r3, r7
 800333e:	3bfc      	subs	r3, #252	@ 0xfc
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8003348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

				// integral term (with anti-windup)
				error_sum[j] += error * (SAMPLING_TIME / 1000.0);
 8003350:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003354:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003358:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8b4 	bl	80004d0 <__aeabi_f2d>
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
 800336c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8003370:	f7fd f8ae 	bl	80004d0 <__aeabi_f2d>
 8003374:	f20f 43a8 	addw	r3, pc, #1192	@ 0x4a8
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fd f900 	bl	8000580 <__aeabi_dmul>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fc ff44 	bl	8000214 <__adddf3>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd fbec 	bl	8000b70 <__aeabi_d2f>
 8003398:	4601      	mov	r1, r0
 800339a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800339e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80033a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	6019      	str	r1, [r3, #0]
				if (error_sum[j] > max_integral[j])
 80033ac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033b0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80033b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	ed93 7a00 	vldr	s14, [r3]
 80033c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033c4:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80033c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	dd12      	ble.n	8003404 <move_js_scara+0x5b4>
					error_sum[j] = max_integral[j];
 80033de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033e2:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80033e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033f4:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80033f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e030      	b.n	8003466 <move_js_scara+0x616>
				else if (error_sum[j] < -max_integral[j])
 8003404:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003408:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800340c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800341c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003420:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	eef1 7a67 	vneg.f32	s15, s15
 8003430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	d515      	bpl.n	8003466 <move_js_scara+0x616>
					error_sum[j] = -max_integral[j];
 800343a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800343e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003442:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eef1 7a67 	vneg.f32	s15, s15
 8003452:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003456:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800345a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	edc3 7a00 	vstr	s15, [r3]

				float I_term_move = error_sum[j] * I[j];
 8003466:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800346a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800346e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800347e:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8003482:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4

				// derivative term
				float D_term_move = ((error - last_error[j]) / (SAMPLING_TIME / 1000.0)) * D[j];
 8003496:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800349a:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800349e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	ee17 0a90 	vmov	r0, s15
 80034b6:	f7fd f80b 	bl	80004d0 <__aeabi_f2d>
 80034ba:	a3d9      	add	r3, pc, #868	@ (adr r3, 8003820 <move_js_scara+0x9d0>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f988 	bl	80007d4 <__aeabi_ddiv>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80034d0:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80034d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fc fff6 	bl	80004d0 <__aeabi_f2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4620      	mov	r0, r4
 80034ea:	4629      	mov	r1, r5
 80034ec:	f7fd f848 	bl	8000580 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb3a 	bl	8000b70 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
				last_error[j] = error;
 8003502:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003506:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800350a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003516:	601a      	str	r2, [r3, #0]

				// PID output
				float pid_output = P_term_move + I_term_move + D_term_move;
 8003518:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800351c:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec

				// limit PID output to +-5 degrees
				float adjusted_error;
				if (pid_output > 5)
 8003530:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8003534:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	dd03      	ble.n	800354a <move_js_scara+0x6fa>
				{
					adjusted_error = 5;
 8003542:	4bb3      	ldr	r3, [pc, #716]	@ (8003810 <move_js_scara+0x9c0>)
 8003544:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003548:	e010      	b.n	800356c <move_js_scara+0x71c>
				}
				else if (pid_output < -5)
 800354a:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800354e:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8003552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	d503      	bpl.n	8003564 <move_js_scara+0x714>
				{
					adjusted_error = -5;
 800355c:	4bad      	ldr	r3, [pc, #692]	@ (8003814 <move_js_scara+0x9c4>)
 800355e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003562:	e003      	b.n	800356c <move_js_scara+0x71c>
				}
				else
				{
					adjusted_error = pid_output;
 8003564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003568:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
				}

				// set adjusted position with PID correction
            	servo_set_angle(axis[j], dpos + adjusted_error);
 800356c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003576:	443b      	add	r3, r7
 8003578:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800357c:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003580:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003588:	eeb0 0a67 	vmov.f32	s0, s15
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fdad 	bl	80020ec <servo_set_angle>
            {
 8003592:	e00c      	b.n	80035ae <move_js_scara+0x75e>
            }
            // ------------------------
            else
            {
            	servo_set_angle(axis[j], dpos);
 8003594:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800359e:	443b      	add	r3, r7
 80035a0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80035a4:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fd9f 	bl	80020ec <servo_set_angle>
        for (int j = 0; j < AXES; j++)
 80035ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035b2:	3301      	adds	r3, #1
 80035b4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80035b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f77f ae45 	ble.w	800324c <move_js_scara+0x3fc>
            }
        }

        //Sleep(SAMPLING_TIME);
        HAL_Delay(SAMPLING_TIME);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f001 f93c 	bl	8004840 <HAL_Delay>
	for (int i = 0; i < samples; i++) {
 80035c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80035cc:	3301      	adds	r3, #1
 80035ce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80035d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80035d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80035da:	429a      	cmp	r2, r3
 80035dc:	f6ff ae1e 	blt.w	800321c <move_js_scara+0x3cc>
	}

	// ============================== SETTLING ==============================

	// get angle before settling
	float angle_before_settling[2] = {0.0, 0.0};
 80035e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80035e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80035f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
	angle_before_settling[0] = potentiometers_read_angle(0);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7fe f86f 	bl	80016e0 <potentiometers_read_angle>
 8003602:	eef0 7a40 	vmov.f32	s15, s0
 8003606:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800360a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800360e:	edc3 7a00 	vstr	s15, [r3]
	angle_before_settling[1] = potentiometers_read_angle(1);
 8003612:	2001      	movs	r0, #1
 8003614:	f7fe f864 	bl	80016e0 <potentiometers_read_angle>
 8003618:	eef0 7a40 	vmov.f32	s15, s0
 800361c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003620:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003624:	edc3 7a01 	vstr	s15, [r3, #4]

	float pulse_width_correction[2] = {0.0, 0.0};
 8003628:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800362c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800363a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	605a      	str	r2, [r3, #4]

	// settling time (seconds) to reduce backlash
	int settling_samples = (int)(_servo_controller_scara->settling_time * 1000.0 / SAMPLING_TIME_SETTLING);
 8003644:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003648:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff3d 	bl	80004d0 <__aeabi_f2d>
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <move_js_scara+0x9c8>)
 800365c:	f7fc ff90 	bl	8000580 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	4b6b      	ldr	r3, [pc, #428]	@ (800381c <move_js_scara+0x9cc>)
 800366e:	f7fd f8b1 	bl	80007d4 <__aeabi_ddiv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f7fd fa31 	bl	8000ae0 <__aeabi_d2iz>
 800367e:	4603      	mov	r3, r0
 8003680:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	for (int i = 0; i < settling_samples; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800368a:	e08e      	b.n	80037aa <move_js_scara+0x95a>
	{
		// apply to only axis 0 and 1 ...
		for (int j = 0; j < 2; j++)
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003692:	e07d      	b.n	8003790 <move_js_scara+0x940>
		{
			float pot_read = potentiometers_read_angle(j);
 8003694:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8003698:	f7fe f822 	bl	80016e0 <potentiometers_read_angle>
 800369c:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c

			if (tpos[j] - pot_read < -0.5)
 80036a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036aa:	443b      	add	r3, r7
 80036ac:	3b94      	subs	r3, #148	@ 0x94
 80036ae:	ed93 7a00 	vldr	s14, [r3]
 80036b2:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80036b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ba:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80036be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c6:	d50a      	bpl.n	80036de <move_js_scara+0x88e>
			{
				pulse_width_correction[j] = 5; // minimum pulse width as deadband = 4ms
 80036c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80036cc:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80036d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <move_js_scara+0x9c0>)
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e029      	b.n	8003732 <move_js_scara+0x8e2>
			}
			else if (tpos[j] - pot_read > 0.5)
 80036de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e8:	443b      	add	r3, r7
 80036ea:	3b94      	subs	r3, #148	@ 0x94
 80036ec:	ed93 7a00 	vldr	s14, [r3]
 80036f0:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80036f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	dd0a      	ble.n	800371c <move_js_scara+0x8cc>
			{
				pulse_width_correction[j] = -5;
 8003706:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800370a:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 800370e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	4a3f      	ldr	r2, [pc, #252]	@ (8003814 <move_js_scara+0x9c4>)
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00a      	b.n	8003732 <move_js_scara+0x8e2>
			}
			else
			{
				pulse_width_correction[j] = 0;
 800371c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003720:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003724:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
			}

			float current_pulse_width = servo_get_pulse_width_us(axis[j]);
 8003732:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800373c:	443b      	add	r3, r7
 800373e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fc34 	bl	8001fb0 <servo_get_pulse_width_us>
 8003748:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
			float adjusted_pulse_width = current_pulse_width + pulse_width_correction[j];
 800374c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003750:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003754:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

			servo_set_pulse_width_us(axis[j], adjusted_pulse_width);
 800376c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003776:	443b      	add	r3, r7
 8003778:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800377c:	ed97 0a45 	vldr	s0, [r7, #276]	@ 0x114
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fc69 	bl	8002058 <servo_set_pulse_width_us>
		for (int j = 0; j < 2; j++)
 8003786:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800378a:	3301      	adds	r3, #1
 800378c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003790:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003794:	2b01      	cmp	r3, #1
 8003796:	f77f af7d 	ble.w	8003694 <move_js_scara+0x844>
		}

		HAL_Delay(SAMPLING_TIME_SETTLING);
 800379a:	2032      	movs	r0, #50	@ 0x32
 800379c:	f001 f850 	bl	8004840 <HAL_Delay>
	for (int i = 0; i < settling_samples; i++)
 80037a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037a4:	3301      	adds	r3, #1
 80037a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80037aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80037ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80037b2:	429a      	cmp	r2, r3
 80037b4:	f6ff af6a 	blt.w	800368c <move_js_scara+0x83c>
	}

	// set last angle adjustment from settling
	axis[0]->last_angle_adjustment = angle_before_settling[0] - potentiometers_read_angle(0);
 80037b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037c0:	ed93 8a00 	vldr	s16, [r3]
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fd ff8b 	bl	80016e0 <potentiometers_read_angle>
 80037ca:	eef0 7a40 	vmov.f32	s15, s0
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80037d6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	axis[1]->last_angle_adjustment = angle_before_settling[1] - potentiometers_read_angle(1);
 80037da:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037e2:	ed93 8a01 	vldr	s16, [r3, #4]
 80037e6:	2001      	movs	r0, #1
 80037e8:	f7fd ff7a 	bl	80016e0 <potentiometers_read_angle>
 80037ec:	eef0 7a40 	vmov.f32	s15, s0
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80037f8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80037fc:	bf00      	nop
 80037fe:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8003802:	46bd      	mov	sp, r7
 8003804:	ecbd 8b08 	vpop	{d8-d11}
 8003808:	bdb0      	pop	{r4, r5, r7, pc}
 800380a:	bf00      	nop
 800380c:	f3af 8000 	nop.w
 8003810:	40a00000 	.word	0x40a00000
 8003814:	c0a00000 	.word	0xc0a00000
 8003818:	408f4000 	.word	0x408f4000
 800381c:	40490000 	.word	0x40490000
 8003820:	d2f1a9fc 	.word	0xd2f1a9fc
 8003824:	3f50624d 	.word	0x3f50624d

08003828 <calc_double_s_parameters>:
// ----------------------------------------------------------------------------------------------------

void calc_double_s_parameters(float T, float h, float alpha, float beta,
							  float *T_a, float *T_j,
							  float *v_max, float *a_max, float *j_max)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	ed87 0a07 	vstr	s0, [r7, #28]
 8003832:	edc7 0a06 	vstr	s1, [r7, #24]
 8003836:	ed87 1a05 	vstr	s2, [r7, #20]
 800383a:	edc7 1a04 	vstr	s3, [r7, #16]
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
    // accel / decel duration    0 < alpha < 1/2
    *T_a = alpha * T;
 8003846:	ed97 7a05 	vldr	s14, [r7, #20]
 800384a:	edd7 7a07 	vldr	s15, [r7, #28]
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	edc3 7a00 	vstr	s15, [r3]
    // jerk duration             0 < beta < 1/2
    *T_j = beta * (*T_a);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	ed93 7a00 	vldr	s14, [r3]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum velocity
    *v_max = h / ((1 - alpha) * T);
 800386c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003870:	edd7 7a05 	vldr	s15, [r7, #20]
 8003874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003878:	edd7 7a07 	vldr	s15, [r7, #28]
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	edd7 6a06 	vldr	s13, [r7, #24]
 8003884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum acceleration
    *a_max = h / (alpha * (1 - alpha) * (1 - beta) * T * T);
 800388e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003892:	edd7 7a05 	vldr	s15, [r7, #20]
 8003896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800389a:	edd7 7a05 	vldr	s15, [r7, #20]
 800389e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80038b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80038be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80038c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	edc3 7a00 	vstr	s15, [r3]
    // calculate maximum jerk
    *j_max = h / (alpha * alpha * beta * (1 - alpha) * (1 - beta) * T * T * T);
 80038d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003900:	edd7 7a07 	vldr	s15, [r7, #28]
 8003904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003908:	edd7 7a07 	vldr	s15, [r7, #28]
 800390c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003910:	edd7 7a07 	vldr	s15, [r7, #28]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	edd7 6a06 	vldr	s13, [r7, #24]
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	edc3 7a00 	vstr	s15, [r3]
}
 8003926:	bf00      	nop
 8003928:	3724      	adds	r7, #36	@ 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	0000      	movs	r0, r0
 8003934:	0000      	movs	r0, r0
	...

08003938 <calc_double_s_value>:


float calc_double_s_value(float T, float h, float T_a, float T_j,
						  float v_max, float a_max, float j_max,
						  float t)
{
 8003938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af00      	add	r7, sp, #0
 8003940:	ed87 0a07 	vstr	s0, [r7, #28]
 8003944:	edc7 0a06 	vstr	s1, [r7, #24]
 8003948:	ed87 1a05 	vstr	s2, [r7, #20]
 800394c:	edc7 1a04 	vstr	s3, [r7, #16]
 8003950:	ed87 2a03 	vstr	s4, [r7, #12]
 8003954:	edc7 2a02 	vstr	s5, [r7, #8]
 8003958:	ed87 3a01 	vstr	s6, [r7, #4]
 800395c:	edc7 3a00 	vstr	s7, [r7]
    // acceleration phase
    if (t >= 0 && t <= T_j)
 8003960:	edd7 7a00 	vldr	s15, [r7]
 8003964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	db2d      	blt.n	80039ca <calc_double_s_value+0x92>
 800396e:	ed97 7a00 	vldr	s14, [r7]
 8003972:	edd7 7a04 	vldr	s15, [r7, #16]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d824      	bhi.n	80039ca <calc_double_s_value+0x92>
    {
        return j_max * (pow(t, 3) / 6.0);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fc fda5 	bl	80004d0 <__aeabi_f2d>
 8003986:	4604      	mov	r4, r0
 8003988:	460d      	mov	r5, r1
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f7fc fda0 	bl	80004d0 <__aeabi_f2d>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8003c30 <calc_double_s_value+0x2f8>
 8003998:	ec43 2b10 	vmov	d0, r2, r3
 800399c:	f005 f81c 	bl	80089d8 <pow>
 80039a0:	ec51 0b10 	vmov	r0, r1, d0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	4ba5      	ldr	r3, [pc, #660]	@ (8003c40 <calc_double_s_value+0x308>)
 80039aa:	f7fc ff13 	bl	80007d4 <__aeabi_ddiv>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7fc fde3 	bl	8000580 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f8d5 	bl	8000b70 <__aeabi_d2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	e2f3      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    else if (t > T_j && t <= T_a - T_j)
 80039ca:	ed97 7a00 	vldr	s14, [r7]
 80039ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80039d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	dd65      	ble.n	8003aa8 <calc_double_s_value+0x170>
 80039dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80039e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e8:	ed97 7a00 	vldr	s14, [r7]
 80039ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d858      	bhi.n	8003aa8 <calc_double_s_value+0x170>
    {
    	return (a_max / 6.0) * ((3 * pow(t, 2)) - (3 * T_j * t) + pow(T_j, 2));
 80039f6:	68b8      	ldr	r0, [r7, #8]
 80039f8:	f7fc fd6a 	bl	80004d0 <__aeabi_f2d>
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	4b8f      	ldr	r3, [pc, #572]	@ (8003c40 <calc_double_s_value+0x308>)
 8003a02:	f7fc fee7 	bl	80007d4 <__aeabi_ddiv>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f7fc fd5e 	bl	80004d0 <__aeabi_f2d>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	ed9f 1b87 	vldr	d1, [pc, #540]	@ 8003c38 <calc_double_s_value+0x300>
 8003a1c:	ec43 2b10 	vmov	d0, r2, r3
 8003a20:	f004 ffda 	bl	80089d8 <pow>
 8003a24:	ec51 0b10 	vmov	r0, r1, d0
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	4b85      	ldr	r3, [pc, #532]	@ (8003c44 <calc_double_s_value+0x30c>)
 8003a2e:	f7fc fda7 	bl	8000580 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a3e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a46:	edd7 7a00 	vldr	s15, [r7]
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	ee17 0a90 	vmov	r0, s15
 8003a52:	f7fc fd3d 	bl	80004d0 <__aeabi_f2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	f7fc fbd7 	bl	8000210 <__aeabi_dsub>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4690      	mov	r8, r2
 8003a68:	4699      	mov	r9, r3
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f7fc fd30 	bl	80004d0 <__aeabi_f2d>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8003c38 <calc_double_s_value+0x300>
 8003a78:	ec43 2b10 	vmov	d0, r2, r3
 8003a7c:	f004 ffac 	bl	80089d8 <pow>
 8003a80:	ec53 2b10 	vmov	r2, r3, d0
 8003a84:	4640      	mov	r0, r8
 8003a86:	4649      	mov	r1, r9
 8003a88:	f7fc fbc4 	bl	8000214 <__adddf3>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4620      	mov	r0, r4
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7fc fd74 	bl	8000580 <__aeabi_dmul>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fd f866 	bl	8000b70 <__aeabi_d2f>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	e284      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    else if (t > T_a - T_j && t <= T_a)
 8003aa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aac:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab4:	ed97 7a00 	vldr	s14, [r7]
 8003ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	dd6a      	ble.n	8003b98 <calc_double_s_value+0x260>
 8003ac2:	ed97 7a00 	vldr	s14, [r7]
 8003ac6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d861      	bhi.n	8003b98 <calc_double_s_value+0x260>
    {
    	return (v_max * (T_a / 2.0)) - (v_max * (T_a - t)) - (-j_max * (pow(T_a - t, 3) / 6.0));
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7fc fcfb 	bl	80004d0 <__aeabi_f2d>
 8003ada:	4604      	mov	r4, r0
 8003adc:	460d      	mov	r5, r1
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f7fc fcf6 	bl	80004d0 <__aeabi_f2d>
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003aec:	f7fc fe72 	bl	80007d4 <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4620      	mov	r0, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	f7fc fd42 	bl	8000580 <__aeabi_dmul>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b08:	edd7 7a00 	vldr	s15, [r7]
 8003b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b18:	ee17 0a90 	vmov	r0, s15
 8003b1c:	f7fc fcd8 	bl	80004d0 <__aeabi_f2d>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4620      	mov	r0, r4
 8003b26:	4629      	mov	r1, r5
 8003b28:	f7fc fb72 	bl	8000210 <__aeabi_dsub>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4690      	mov	r8, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fc fccb 	bl	80004d0 <__aeabi_f2d>
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b42:	edd7 7a00 	vldr	s15, [r7]
 8003b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4a:	ee17 0a90 	vmov	r0, s15
 8003b4e:	f7fc fcbf 	bl	80004d0 <__aeabi_f2d>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8003c30 <calc_double_s_value+0x2f8>
 8003b5a:	ec43 2b10 	vmov	d0, r2, r3
 8003b5e:	f004 ff3b 	bl	80089d8 <pow>
 8003b62:	ec51 0b10 	vmov	r0, r1, d0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	4b35      	ldr	r3, [pc, #212]	@ (8003c40 <calc_double_s_value+0x308>)
 8003b6c:	f7fc fe32 	bl	80007d4 <__aeabi_ddiv>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fd02 	bl	8000580 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4640      	mov	r0, r8
 8003b82:	4649      	mov	r1, r9
 8003b84:	f7fc fb46 	bl	8000214 <__adddf3>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f7fc ffee 	bl	8000b70 <__aeabi_d2f>
 8003b94:	4603      	mov	r3, r0
 8003b96:	e20c      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    // constant velocity phase
    else if (t > T_a && t <= T - T_a)
 8003b98:	ed97 7a00 	vldr	s14, [r7]
 8003b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	dd4e      	ble.n	8003c48 <calc_double_s_value+0x310>
 8003baa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bae:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb6:	ed97 7a00 	vldr	s14, [r7]
 8003bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	d841      	bhi.n	8003c48 <calc_double_s_value+0x310>
    {
    	return v_max * (T_a / 2.0) + (v_max * (t - T_a));
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7fc fc83 	bl	80004d0 <__aeabi_f2d>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	460d      	mov	r5, r1
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7fc fc7e 	bl	80004d0 <__aeabi_f2d>
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bdc:	f7fc fdfa 	bl	80007d4 <__aeabi_ddiv>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fcca 	bl	8000580 <__aeabi_dmul>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	ed97 7a00 	vldr	s14, [r7]
 8003bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c08:	ee17 0a90 	vmov	r0, s15
 8003c0c:	f7fc fc60 	bl	80004d0 <__aeabi_f2d>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f7fc fafc 	bl	8000214 <__adddf3>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ffa4 	bl	8000b70 <__aeabi_d2f>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	e1c2      	b.n	8003fb2 <calc_double_s_value+0x67a>
 8003c2c:	f3af 8000 	nop.w
 8003c30:	00000000 	.word	0x00000000
 8003c34:	40080000 	.word	0x40080000
 8003c38:	00000000 	.word	0x00000000
 8003c3c:	40000000 	.word	0x40000000
 8003c40:	40180000 	.word	0x40180000
 8003c44:	40080000 	.word	0x40080000
    }
    // deceleration phase
    else if (t > T - T_a && t <= T - T_a + T_j)
 8003c48:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c54:	ed97 7a00 	vldr	s14, [r7]
 8003c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	f340 8088 	ble.w	8003d74 <calc_double_s_value+0x43c>
 8003c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c68:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	ed97 7a00 	vldr	s14, [r7]
 8003c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c84:	d876      	bhi.n	8003d74 <calc_double_s_value+0x43c>
    {
    	return h - (v_max * (T_a / 2.0)) + v_max * (t - T + T_a) - (j_max * pow(t - T + T_a, 3) / 6.0);
 8003c86:	69b8      	ldr	r0, [r7, #24]
 8003c88:	f7fc fc22 	bl	80004d0 <__aeabi_f2d>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7fc fc1d 	bl	80004d0 <__aeabi_f2d>
 8003c96:	4680      	mov	r8, r0
 8003c98:	4689      	mov	r9, r1
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7fc fc18 	bl	80004d0 <__aeabi_f2d>
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ca8:	f7fc fd94 	bl	80007d4 <__aeabi_ddiv>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	f7fc fc64 	bl	8000580 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc faa6 	bl	8000210 <__aeabi_dsub>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	ed97 7a00 	vldr	s14, [r7]
 8003cd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce8:	ee17 0a90 	vmov	r0, s15
 8003cec:	f7fc fbf0 	bl	80004d0 <__aeabi_f2d>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	f7fc fa8c 	bl	8000214 <__adddf3>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4690      	mov	r8, r2
 8003d02:	4699      	mov	r9, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc fbe3 	bl	80004d0 <__aeabi_f2d>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	ed97 7a00 	vldr	s14, [r7]
 8003d12:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d22:	ee17 0a90 	vmov	r0, s15
 8003d26:	f7fc fbd3 	bl	80004d0 <__aeabi_f2d>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8003fc8 <calc_double_s_value+0x690>
 8003d32:	ec43 2b10 	vmov	d0, r2, r3
 8003d36:	f004 fe4f 	bl	80089d8 <pow>
 8003d3a:	ec53 2b10 	vmov	r2, r3, d0
 8003d3e:	4620      	mov	r0, r4
 8003d40:	4629      	mov	r1, r5
 8003d42:	f7fc fc1d 	bl	8000580 <__aeabi_dmul>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	4ba1      	ldr	r3, [pc, #644]	@ (8003fd8 <calc_double_s_value+0x6a0>)
 8003d54:	f7fc fd3e 	bl	80007d4 <__aeabi_ddiv>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4649      	mov	r1, r9
 8003d60:	f7fc fa56 	bl	8000210 <__aeabi_dsub>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc ff00 	bl	8000b70 <__aeabi_d2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	e11e      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    else if (t > T - T_a + T_j && t <= T - T_j)
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d88:	ed97 7a00 	vldr	s14, [r7]
 8003d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	f340 80bf 	ble.w	8003f16 <calc_double_s_value+0x5de>
 8003d98:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da4:	ed97 7a00 	vldr	s14, [r7]
 8003da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	f200 80b1 	bhi.w	8003f16 <calc_double_s_value+0x5de>
    {
    	return h - (v_max * (T_a / 2.0)) + v_max * (t - T + T_a)
 8003db4:	69b8      	ldr	r0, [r7, #24]
 8003db6:	f7fc fb8b 	bl	80004d0 <__aeabi_f2d>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7fc fb86 	bl	80004d0 <__aeabi_f2d>
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	4689      	mov	r9, r1
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f7fc fb81 	bl	80004d0 <__aeabi_f2d>
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003dd6:	f7fc fcfd 	bl	80007d4 <__aeabi_ddiv>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4640      	mov	r0, r8
 8003de0:	4649      	mov	r1, r9
 8003de2:	f7fc fbcd 	bl	8000580 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc fa0f 	bl	8000210 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4614      	mov	r4, r2
 8003df8:	461d      	mov	r5, r3
 8003dfa:	ed97 7a00 	vldr	s14, [r7]
 8003dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fb59 	bl	80004d0 <__aeabi_f2d>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc f9f5 	bl	8000214 <__adddf3>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4614      	mov	r4, r2
 8003e30:	461d      	mov	r5, r3
               - ((a_max / 6.0) * (3 * pow(t - T + T_a, 2) - 3 * T_j * (t - T + T_a) + pow(T_j, 2)));
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f7fc fb4c 	bl	80004d0 <__aeabi_f2d>
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <calc_double_s_value+0x6a0>)
 8003e3e:	f7fc fcc9 	bl	80007d4 <__aeabi_ddiv>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	ed97 7a00 	vldr	s14, [r7]
 8003e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5e:	ee17 0a90 	vmov	r0, s15
 8003e62:	f7fc fb35 	bl	80004d0 <__aeabi_f2d>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 8003fd0 <calc_double_s_value+0x698>
 8003e6e:	ec43 2b10 	vmov	d0, r2, r3
 8003e72:	f004 fdb1 	bl	80089d8 <pow>
 8003e76:	ec51 0b10 	vmov	r0, r1, d0
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	4b57      	ldr	r3, [pc, #348]	@ (8003fdc <calc_double_s_value+0x6a4>)
 8003e80:	f7fc fb7e 	bl	8000580 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4692      	mov	sl, r2
 8003e8a:	469b      	mov	fp, r3
 8003e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e90:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003e94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e98:	edd7 6a00 	vldr	s13, [r7]
 8003e9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ea0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ea4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb0:	ee17 0a90 	vmov	r0, s15
 8003eb4:	f7fc fb0c 	bl	80004d0 <__aeabi_f2d>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4650      	mov	r0, sl
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	f7fc f9a6 	bl	8000210 <__aeabi_dsub>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4692      	mov	sl, r2
 8003eca:	469b      	mov	fp, r3
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f7fc faff 	bl	80004d0 <__aeabi_f2d>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003fd0 <calc_double_s_value+0x698>
 8003eda:	ec43 2b10 	vmov	d0, r2, r3
 8003ede:	f004 fd7b 	bl	80089d8 <pow>
 8003ee2:	ec53 2b10 	vmov	r2, r3, d0
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	4659      	mov	r1, fp
 8003eea:	f7fc f993 	bl	8000214 <__adddf3>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	f7fc fb43 	bl	8000580 <__aeabi_dmul>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7fc f985 	bl	8000210 <__aeabi_dsub>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7fc fe2f 	bl	8000b70 <__aeabi_d2f>
 8003f12:	4603      	mov	r3, r0
 8003f14:	e04d      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    else if (t > T - T_j && t <= T)
 8003f16:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f22:	ed97 7a00 	vldr	s14, [r7]
 8003f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	dd3f      	ble.n	8003fb0 <calc_double_s_value+0x678>
 8003f30:	ed97 7a00 	vldr	s14, [r7]
 8003f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	d836      	bhi.n	8003fb0 <calc_double_s_value+0x678>
    {
    	return h - (j_max * (pow(T - t, 3) / 6.0));
 8003f42:	69b8      	ldr	r0, [r7, #24]
 8003f44:	f7fc fac4 	bl	80004d0 <__aeabi_f2d>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc fabf 	bl	80004d0 <__aeabi_f2d>
 8003f52:	4680      	mov	r8, r0
 8003f54:	4689      	mov	r9, r1
 8003f56:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f5a:	edd7 7a00 	vldr	s15, [r7]
 8003f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f62:	ee17 0a90 	vmov	r0, s15
 8003f66:	f7fc fab3 	bl	80004d0 <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003fc8 <calc_double_s_value+0x690>
 8003f72:	ec43 2b10 	vmov	d0, r2, r3
 8003f76:	f004 fd2f 	bl	80089d8 <pow>
 8003f7a:	ec51 0b10 	vmov	r0, r1, d0
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <calc_double_s_value+0x6a0>)
 8003f84:	f7fc fc26 	bl	80007d4 <__aeabi_ddiv>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc faf6 	bl	8000580 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f7fc f938 	bl	8000210 <__aeabi_dsub>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fc fde2 	bl	8000b70 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
 8003fae:	e000      	b.n	8003fb2 <calc_double_s_value+0x67a>
    }
    else
    {
    	return 999;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <calc_double_s_value+0x6a8>)
    }
}
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	40080000 	.word	0x40080000
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	40000000 	.word	0x40000000
 8003fd8:	40180000 	.word	0x40180000
 8003fdc:	40080000 	.word	0x40080000
 8003fe0:	4479c000 	.word	0x4479c000

08003fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_MspInit+0x4c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8004030 <HAL_MspInit+0x4c>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <HAL_MspInit+0x4c>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_MspInit+0x4c>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <HAL_MspInit+0x4c>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	@ 0x40
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_MspInit+0x4c>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004022:	2007      	movs	r0, #7
 8004024:	f001 f922 	bl	800526c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800

08004034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <NMI_Handler+0x4>

0800403c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <HardFault_Handler+0x4>

08004044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <MemManage_Handler+0x4>

0800404c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <UsageFault_Handler+0x4>

0800405c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800408a:	f000 fbb9 	bl	8004800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004098:	4802      	ldr	r0, [pc, #8]	@ (80040a4 <DMA2_Stream0_IRQHandler+0x10>)
 800409a:	f001 fa2f 	bl	80054fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200000dc 	.word	0x200000dc

080040a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e00a      	b.n	80040d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040ba:	f3af 8000 	nop.w
 80040be:	4601      	mov	r1, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	60ba      	str	r2, [r7, #8]
 80040c6:	b2ca      	uxtb	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3301      	adds	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dbf0      	blt.n	80040ba <_read+0x12>
  }

  return len;
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e009      	b.n	8004108 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	60ba      	str	r2, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3301      	adds	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	dbf1      	blt.n	80040f4 <_write+0x12>
  }
  return len;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_close>:

int _close(int file)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004142:	605a      	str	r2, [r3, #4]
  return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <_isatty>:

int _isatty(int file)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800418c:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <_sbrk+0x5c>)
 800418e:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <_sbrk+0x60>)
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004198:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <_sbrk+0x64>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <_sbrk+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b4:	f004 fa32 	bl	800861c <__errno>
 80041b8:	4603      	mov	r3, r0
 80041ba:	220c      	movs	r2, #12
 80041bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	e009      	b.n	80041d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c4:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <_sbrk+0x64>)
 80041d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20020000 	.word	0x20020000
 80041e4:	00000400 	.word	0x00000400
 80041e8:	20000290 	.word	0x20000290
 80041ec:	20000508 	.word	0x20000508

080041f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <SystemInit+0x20>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <SystemInit+0x20>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	@ 0x38
 8004218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800421a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004228:	f107 0320 	add.w	r3, r7, #32
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
 8004240:	615a      	str	r2, [r3, #20]
 8004242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004244:	4b45      	ldr	r3, [pc, #276]	@ (800435c <MX_TIM3_Init+0x148>)
 8004246:	4a46      	ldr	r2, [pc, #280]	@ (8004360 <MX_TIM3_Init+0x14c>)
 8004248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 270-1;
 800424a:	4b44      	ldr	r3, [pc, #272]	@ (800435c <MX_TIM3_Init+0x148>)
 800424c:	f240 120d 	movw	r2, #269	@ 0x10d
 8004250:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004252:	4b42      	ldr	r3, [pc, #264]	@ (800435c <MX_TIM3_Init+0x148>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004258:	4b40      	ldr	r3, [pc, #256]	@ (800435c <MX_TIM3_Init+0x148>)
 800425a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800425e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004260:	4b3e      	ldr	r3, [pc, #248]	@ (800435c <MX_TIM3_Init+0x148>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004266:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <MX_TIM3_Init+0x148>)
 8004268:	2280      	movs	r2, #128	@ 0x80
 800426a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800426c:	483b      	ldr	r0, [pc, #236]	@ (800435c <MX_TIM3_Init+0x148>)
 800426e:	f002 fb95 	bl	800699c <HAL_TIM_Base_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004278:	f7fd f9f8 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800427c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004286:	4619      	mov	r1, r3
 8004288:	4834      	ldr	r0, [pc, #208]	@ (800435c <MX_TIM3_Init+0x148>)
 800428a:	f002 fdb9 	bl	8006e00 <HAL_TIM_ConfigClockSource>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004294:	f7fd f9ea 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004298:	4830      	ldr	r0, [pc, #192]	@ (800435c <MX_TIM3_Init+0x148>)
 800429a:	f002 fbce 	bl	8006a3a <HAL_TIM_PWM_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80042a4:	f7fd f9e2 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042b0:	f107 0320 	add.w	r3, r7, #32
 80042b4:	4619      	mov	r1, r3
 80042b6:	4829      	ldr	r0, [pc, #164]	@ (800435c <MX_TIM3_Init+0x148>)
 80042b8:	f003 f986 	bl	80075c8 <HAL_TIMEx_MasterConfigSynchronization>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042c2:	f7fd f9d3 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c6:	2360      	movs	r3, #96	@ 0x60
 80042c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	2200      	movs	r2, #0
 80042da:	4619      	mov	r1, r3
 80042dc:	481f      	ldr	r0, [pc, #124]	@ (800435c <MX_TIM3_Init+0x148>)
 80042de:	f002 fccd 	bl	8006c7c <HAL_TIM_PWM_ConfigChannel>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80042e8:	f7fd f9c0 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	2204      	movs	r2, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	481a      	ldr	r0, [pc, #104]	@ (800435c <MX_TIM3_Init+0x148>)
 80042f4:	f002 fcc2 	bl	8006c7c <HAL_TIM_PWM_ConfigChannel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80042fe:	f7fd f9b5 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	2208      	movs	r2, #8
 8004306:	4619      	mov	r1, r3
 8004308:	4814      	ldr	r0, [pc, #80]	@ (800435c <MX_TIM3_Init+0x148>)
 800430a:	f002 fcb7 	bl	8006c7c <HAL_TIM_PWM_ConfigChannel>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004314:	f7fd f9aa 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	220c      	movs	r2, #12
 800431c:	4619      	mov	r1, r3
 800431e:	480f      	ldr	r0, [pc, #60]	@ (800435c <MX_TIM3_Init+0x148>)
 8004320:	f002 fcac 	bl	8006c7c <HAL_TIM_PWM_ConfigChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800432a:	f7fd f99f 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800432e:	2100      	movs	r1, #0
 8004330:	480a      	ldr	r0, [pc, #40]	@ (800435c <MX_TIM3_Init+0x148>)
 8004332:	f002 fbdb 	bl	8006aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004336:	2104      	movs	r1, #4
 8004338:	4808      	ldr	r0, [pc, #32]	@ (800435c <MX_TIM3_Init+0x148>)
 800433a:	f002 fbd7 	bl	8006aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800433e:	2108      	movs	r1, #8
 8004340:	4806      	ldr	r0, [pc, #24]	@ (800435c <MX_TIM3_Init+0x148>)
 8004342:	f002 fbd3 	bl	8006aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004346:	210c      	movs	r1, #12
 8004348:	4804      	ldr	r0, [pc, #16]	@ (800435c <MX_TIM3_Init+0x148>)
 800434a:	f002 fbcf 	bl	8006aec <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800434e:	4803      	ldr	r0, [pc, #12]	@ (800435c <MX_TIM3_Init+0x148>)
 8004350:	f000 f88e 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8004354:	bf00      	nop
 8004356:	3738      	adds	r7, #56	@ 0x38
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000294 	.word	0x20000294
 8004360:	40000400 	.word	0x40000400

08004364 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004378:	463b      	mov	r3, r7
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <MX_TIM4_Init+0x94>)
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <MX_TIM4_Init+0x98>)
 8004384:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 270-1;
 8004386:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <MX_TIM4_Init+0x94>)
 8004388:	f240 120d 	movw	r2, #269	@ 0x10d
 800438c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <MX_TIM4_Init+0x94>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004394:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <MX_TIM4_Init+0x94>)
 8004396:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800439a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800439c:	4b16      	ldr	r3, [pc, #88]	@ (80043f8 <MX_TIM4_Init+0x94>)
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <MX_TIM4_Init+0x94>)
 80043a4:	2280      	movs	r2, #128	@ 0x80
 80043a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80043a8:	4813      	ldr	r0, [pc, #76]	@ (80043f8 <MX_TIM4_Init+0x94>)
 80043aa:	f002 faf7 	bl	800699c <HAL_TIM_Base_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80043b4:	f7fd f95a 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	4619      	mov	r1, r3
 80043c4:	480c      	ldr	r0, [pc, #48]	@ (80043f8 <MX_TIM4_Init+0x94>)
 80043c6:	f002 fd1b 	bl	8006e00 <HAL_TIM_ConfigClockSource>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80043d0:	f7fd f94c 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d8:	2300      	movs	r3, #0
 80043da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043dc:	463b      	mov	r3, r7
 80043de:	4619      	mov	r1, r3
 80043e0:	4805      	ldr	r0, [pc, #20]	@ (80043f8 <MX_TIM4_Init+0x94>)
 80043e2:	f003 f8f1 	bl	80075c8 <HAL_TIMEx_MasterConfigSynchronization>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80043ec:	f7fd f93e 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043f0:	bf00      	nop
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200002dc 	.word	0x200002dc
 80043fc:	40000800 	.word	0x40000800

08004400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a15      	ldr	r2, [pc, #84]	@ (8004464 <HAL_TIM_Base_MspInit+0x64>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	4a13      	ldr	r2, [pc, #76]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	6413      	str	r3, [r2, #64]	@ 0x40
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800442e:	e012      	b.n	8004456 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0d      	ldr	r2, [pc, #52]	@ (800446c <HAL_TIM_Base_MspInit+0x6c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10d      	bne.n	8004456 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a09      	ldr	r2, [pc, #36]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <HAL_TIM_Base_MspInit+0x68>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40000400 	.word	0x40000400
 8004468:	40023800 	.word	0x40023800
 800446c:	40000800 	.word	0x40000800

08004470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	@ 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a30      	ldr	r2, [pc, #192]	@ (8004550 <HAL_TIM_MspPostInit+0xe0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d15a      	bne.n	8004548 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	4b2f      	ldr	r3, [pc, #188]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	4a2e      	ldr	r2, [pc, #184]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b28      	ldr	r3, [pc, #160]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	4a27      	ldr	r2, [pc, #156]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044be:	4b25      	ldr	r3, [pc, #148]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b21      	ldr	r3, [pc, #132]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	4a20      	ldr	r2, [pc, #128]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044d4:	f043 0304 	orr.w	r3, r3, #4
 80044d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044da:	4b1e      	ldr	r3, [pc, #120]	@ (8004554 <HAL_TIM_MspPostInit+0xe4>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044e6:	2340      	movs	r3, #64	@ 0x40
 80044e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044f6:	2302      	movs	r3, #2
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	4815      	ldr	r0, [pc, #84]	@ (8004558 <HAL_TIM_MspPostInit+0xe8>)
 8004502:	f001 fa65 	bl	80059d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004506:	2302      	movs	r3, #2
 8004508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004516:	2302      	movs	r3, #2
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	4619      	mov	r1, r3
 8004520:	480e      	ldr	r0, [pc, #56]	@ (800455c <HAL_TIM_MspPostInit+0xec>)
 8004522:	f001 fa55 	bl	80059d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004526:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800452a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004538:	2302      	movs	r3, #2
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	4619      	mov	r1, r3
 8004542:	4807      	ldr	r0, [pc, #28]	@ (8004560 <HAL_TIM_MspPostInit+0xf0>)
 8004544:	f001 fa44 	bl	80059d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004548:	bf00      	nop
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40000400 	.word	0x40000400
 8004554:	40023800 	.word	0x40023800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800

08004564 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004568:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <MX_USART2_UART_Init+0x50>)
 800456c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800456e:	4b10      	ldr	r3, [pc, #64]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 8004570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 8004584:	2200      	movs	r2, #0
 8004586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 800458a:	220c      	movs	r2, #12
 800458c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800459a:	4805      	ldr	r0, [pc, #20]	@ (80045b0 <MX_USART2_UART_Init+0x4c>)
 800459c:	f003 f890 	bl	80076c0 <HAL_UART_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045a6:	f7fd f861 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000324 	.word	0x20000324
 80045b4:	40004400 	.word	0x40004400

080045b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045be:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <MX_USART3_UART_Init+0x50>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045ee:	4805      	ldr	r0, [pc, #20]	@ (8004604 <MX_USART3_UART_Init+0x4c>)
 80045f0:	f003 f866 	bl	80076c0 <HAL_UART_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80045fa:	f7fd f837 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2000036c 	.word	0x2000036c
 8004608:	40004800 	.word	0x40004800

0800460c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	@ 0x30
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a32      	ldr	r2, [pc, #200]	@ (80046f4 <HAL_UART_MspInit+0xe8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d12c      	bne.n	8004688 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	4a30      	ldr	r2, [pc, #192]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	6413      	str	r3, [r2, #64]	@ 0x40
 800463e:	4b2e      	ldr	r3, [pc, #184]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	4b2a      	ldr	r3, [pc, #168]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	4a29      	ldr	r2, [pc, #164]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6313      	str	r3, [r2, #48]	@ 0x30
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004666:	230c      	movs	r3, #12
 8004668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466a:	2302      	movs	r3, #2
 800466c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004672:	2303      	movs	r3, #3
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004676:	2307      	movs	r3, #7
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	f107 031c 	add.w	r3, r7, #28
 800467e:	4619      	mov	r1, r3
 8004680:	481e      	ldr	r0, [pc, #120]	@ (80046fc <HAL_UART_MspInit+0xf0>)
 8004682:	f001 f9a5 	bl	80059d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004686:	e031      	b.n	80046ec <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <HAL_UART_MspInit+0xf4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d12c      	bne.n	80046ec <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	4b18      	ldr	r3, [pc, #96]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 800469c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	4a10      	ldr	r2, [pc, #64]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046be:	4b0e      	ldr	r3, [pc, #56]	@ (80046f8 <HAL_UART_MspInit+0xec>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80046ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d0:	2302      	movs	r3, #2
 80046d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d8:	2303      	movs	r3, #3
 80046da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046dc:	2307      	movs	r3, #7
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e0:	f107 031c 	add.w	r3, r7, #28
 80046e4:	4619      	mov	r1, r3
 80046e6:	4807      	ldr	r0, [pc, #28]	@ (8004704 <HAL_UART_MspInit+0xf8>)
 80046e8:	f001 f972 	bl	80059d0 <HAL_GPIO_Init>
}
 80046ec:	bf00      	nop
 80046ee:	3730      	adds	r7, #48	@ 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40004400 	.word	0x40004400
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40020000 	.word	0x40020000
 8004700:	40004800 	.word	0x40004800
 8004704:	40020800 	.word	0x40020800

08004708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800470c:	f7ff fd70 	bl	80041f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004710:	480c      	ldr	r0, [pc, #48]	@ (8004744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004712:	490d      	ldr	r1, [pc, #52]	@ (8004748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004714:	4a0d      	ldr	r2, [pc, #52]	@ (800474c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004718:	e002      	b.n	8004720 <LoopCopyDataInit>

0800471a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800471a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800471c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800471e:	3304      	adds	r3, #4

08004720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004724:	d3f9      	bcc.n	800471a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004726:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004728:	4c0a      	ldr	r4, [pc, #40]	@ (8004754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800472c:	e001      	b.n	8004732 <LoopFillZerobss>

0800472e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800472e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004730:	3204      	adds	r2, #4

08004732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004734:	d3fb      	bcc.n	800472e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004736:	f003 ff77 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800473a:	f7fc ff0b 	bl	8001554 <main>
  bx  lr    
 800473e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004748:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800474c:	0800b560 	.word	0x0800b560
  ldr r2, =_sbss
 8004750:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004754:	20000504 	.word	0x20000504

08004758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004758:	e7fe      	b.n	8004758 <ADC_IRQHandler>
	...

0800475c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004760:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <HAL_Init+0x40>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0d      	ldr	r2, [pc, #52]	@ (800479c <HAL_Init+0x40>)
 8004766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800476a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_Init+0x40>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <HAL_Init+0x40>)
 8004772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a07      	ldr	r2, [pc, #28]	@ (800479c <HAL_Init+0x40>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004784:	2003      	movs	r0, #3
 8004786:	f000 fd71 	bl	800526c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800478a:	2000      	movs	r0, #0
 800478c:	f000 f808 	bl	80047a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004790:	f7ff fc28 	bl	8003fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023c00 	.word	0x40023c00

080047a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047a8:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <HAL_InitTick+0x54>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_InitTick+0x58>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fd89 	bl	80052d6 <HAL_SYSTICK_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00e      	b.n	80047ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	d80a      	bhi.n	80047ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047d4:	2200      	movs	r2, #0
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	f000 fd51 	bl	8005282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047e0:	4a06      	ldr	r2, [pc, #24]	@ (80047fc <HAL_InitTick+0x5c>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000008 	.word	0x20000008
 80047fc:	20000004 	.word	0x20000004

08004800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_IncTick+0x20>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_IncTick+0x24>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4413      	add	r3, r2
 8004810:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <HAL_IncTick+0x24>)
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000008 	.word	0x20000008
 8004824:	200003b4 	.word	0x200003b4

08004828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return uwTick;
 800482c:	4b03      	ldr	r3, [pc, #12]	@ (800483c <HAL_GetTick+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200003b4 	.word	0x200003b4

08004840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004848:	f7ff ffee 	bl	8004828 <HAL_GetTick>
 800484c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d005      	beq.n	8004866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800485a:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <HAL_Delay+0x44>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004866:	bf00      	nop
 8004868:	f7ff ffde 	bl	8004828 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d8f7      	bhi.n	8004868 <HAL_Delay+0x28>
  {
  }
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000008 	.word	0x20000008

08004888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e033      	b.n	8004906 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc fb8a 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d118      	bne.n	80048f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048ce:	f023 0302 	bic.w	r3, r3, #2
 80048d2:	f043 0202 	orr.w	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa78 	bl	8004dd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80048f6:	e001      	b.n	80048fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_ADC_Start_DMA+0x1e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0e9      	b.n	8004b02 <HAL_ADC_Start_DMA+0x1f2>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d018      	beq.n	8004976 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004954:	4b6d      	ldr	r3, [pc, #436]	@ (8004b0c <HAL_ADC_Start_DMA+0x1fc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6d      	ldr	r2, [pc, #436]	@ (8004b10 <HAL_ADC_Start_DMA+0x200>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0c9a      	lsrs	r2, r3, #18
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004968:	e002      	b.n	8004970 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3b01      	subs	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f9      	bne.n	800496a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	d107      	bne.n	8004996 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004994:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 80a1 	bne.w	8004ae8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e4:	d106      	bne.n	80049f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	f023 0206 	bic.w	r2, r3, #6
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80049f2:	e002      	b.n	80049fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a02:	4b44      	ldr	r3, [pc, #272]	@ (8004b14 <HAL_ADC_Start_DMA+0x204>)
 8004a04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	4a43      	ldr	r2, [pc, #268]	@ (8004b18 <HAL_ADC_Start_DMA+0x208>)
 8004a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	4a42      	ldr	r2, [pc, #264]	@ (8004b1c <HAL_ADC_Start_DMA+0x20c>)
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	4a41      	ldr	r2, [pc, #260]	@ (8004b20 <HAL_ADC_Start_DMA+0x210>)
 8004a1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004a36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	334c      	adds	r3, #76	@ 0x4c
 8004a52:	4619      	mov	r1, r3
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f000 fcf8 	bl	800544c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d12a      	bne.n	8004abe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b24 <HAL_ADC_Start_DMA+0x214>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d015      	beq.n	8004a9e <HAL_ADC_Start_DMA+0x18e>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <HAL_ADC_Start_DMA+0x218>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d105      	bne.n	8004a88 <HAL_ADC_Start_DMA+0x178>
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_ADC_Start_DMA+0x204>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <HAL_ADC_Start_DMA+0x21c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d136      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_ADC_Start_DMA+0x204>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d130      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d129      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	e020      	b.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	@ (8004b24 <HAL_ADC_Start_DMA+0x214>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d11b      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d114      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ae4:	609a      	str	r2, [r3, #8]
 8004ae6:	e00b      	b.n	8004b00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	f043 0201 	orr.w	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	431bde83 	.word	0x431bde83
 8004b14:	40012300 	.word	0x40012300
 8004b18:	08004fc9 	.word	0x08004fc9
 8004b1c:	08005083 	.word	0x08005083
 8004b20:	0800509f 	.word	0x0800509f
 8004b24:	40012000 	.word	0x40012000
 8004b28:	40012100 	.word	0x40012100
 8004b2c:	40012200 	.word	0x40012200

08004b30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e113      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x244>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	d925      	bls.n	8004be4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	3b1e      	subs	r3, #30
 8004bae:	2207      	movs	r2, #7
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	400a      	ands	r2, r1
 8004bbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68d9      	ldr	r1, [r3, #12]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	4618      	mov	r0, r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3b1e      	subs	r3, #30
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	e022      	b.n	8004c2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	400a      	ands	r2, r1
 8004c06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6919      	ldr	r1, [r3, #16]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	4618      	mov	r0, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4403      	add	r3, r0
 8004c20:	409a      	lsls	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d824      	bhi.n	8004c7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	3b05      	subs	r3, #5
 8004c44:	221f      	movs	r2, #31
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	400a      	ands	r2, r1
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4618      	mov	r0, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3b05      	subs	r3, #5
 8004c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c7a:	e04c      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d824      	bhi.n	8004cce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	3b23      	subs	r3, #35	@ 0x23
 8004c96:	221f      	movs	r2, #31
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3b23      	subs	r3, #35	@ 0x23
 8004cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ccc:	e023      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	3b41      	subs	r3, #65	@ 0x41
 8004ce0:	221f      	movs	r2, #31
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	400a      	ands	r2, r1
 8004cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	3b41      	subs	r3, #65	@ 0x41
 8004d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d16:	4b29      	ldr	r3, [pc, #164]	@ (8004dbc <HAL_ADC_ConfigChannel+0x250>)
 8004d18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x254>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10f      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x1d8>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b12      	cmp	r3, #18
 8004d2a:	d10b      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x254>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d12b      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x23a>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x258>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <HAL_ADC_ConfigChannel+0x1f4>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b11      	cmp	r3, #17
 8004d5e:	d122      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x258>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d82:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x25c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_ADC_ConfigChannel+0x260>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	0c9a      	lsrs	r2, r3, #18
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004d98:	e002      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f9      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40012300 	.word	0x40012300
 8004dc0:	40012000 	.word	0x40012000
 8004dc4:	10000012 	.word	0x10000012
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	431bde83 	.word	0x431bde83

08004dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dd8:	4b79      	ldr	r3, [pc, #484]	@ (8004fc0 <ADC_Init+0x1f0>)
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	021a      	lsls	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <ADC_Init+0x1f4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6899      	ldr	r1, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e00f      	b.n	8004ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0202 	bic.w	r2, r2, #2
 8004edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	7e1b      	ldrb	r3, [r3, #24]
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	3b01      	subs	r3, #1
 8004f28:	035a      	lsls	r2, r3, #13
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e007      	b.n	8004f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	051a      	lsls	r2, r3, #20
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f86:	025a      	lsls	r2, r3, #9
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	029a      	lsls	r2, r3, #10
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40012300 	.word	0x40012300
 8004fc4:	0f000001 	.word	0x0f000001

08004fc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d13c      	bne.n	800505c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d12b      	bne.n	8005054 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	d127      	bne.n	8005054 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800501c:	2b00      	cmp	r3, #0
 800501e:	d119      	bne.n	8005054 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0220 	bic.w	r2, r2, #32
 800502e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff fd6b 	bl	8004b30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800505a:	e00e      	b.n	800507a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fd75 	bl	8004b58 <HAL_ADC_ErrorCallback>
}
 800506e:	e004      	b.n	800507a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff fd57 	bl	8004b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2240      	movs	r2, #64	@ 0x40
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fd4a 	bl	8004b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fe:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	60d3      	str	r3, [r2, #12]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__NVIC_GetPriorityGrouping+0x18>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 0307 	and.w	r3, r3, #7
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db0b      	blt.n	800515a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f003 021f 	and.w	r2, r3, #31
 8005148:	4907      	ldr	r1, [pc, #28]	@ (8005168 <__NVIC_EnableIRQ+0x38>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2001      	movs	r0, #1
 8005152:	fa00 f202 	lsl.w	r2, r0, r2
 8005156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100

0800516c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db0a      	blt.n	8005196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	490c      	ldr	r1, [pc, #48]	@ (80051b8 <__NVIC_SetPriority+0x4c>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	440b      	add	r3, r1
 8005190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005194:	e00a      	b.n	80051ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4908      	ldr	r1, [pc, #32]	@ (80051bc <__NVIC_SetPriority+0x50>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3b04      	subs	r3, #4
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	440b      	add	r3, r1
 80051aa:	761a      	strb	r2, [r3, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e100 	.word	0xe000e100
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	@ 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f1c3 0307 	rsb	r3, r3, #7
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf28      	it	cs
 80051de:	2304      	movcs	r3, #4
 80051e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d902      	bls.n	80051f0 <NVIC_EncodePriority+0x30>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3b03      	subs	r3, #3
 80051ee:	e000      	b.n	80051f2 <NVIC_EncodePriority+0x32>
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	401a      	ands	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005208:	f04f 31ff 	mov.w	r1, #4294967295
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43d9      	mvns	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	4313      	orrs	r3, r2
         );
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	@ 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005238:	d301      	bcc.n	800523e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800523a:	2301      	movs	r3, #1
 800523c:	e00f      	b.n	800525e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <SysTick_Config+0x40>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005246:	210f      	movs	r1, #15
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	f7ff ff8e 	bl	800516c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005250:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <SysTick_Config+0x40>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005256:	4b04      	ldr	r3, [pc, #16]	@ (8005268 <SysTick_Config+0x40>)
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	e000e010 	.word	0xe000e010

0800526c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff29 	bl	80050cc <__NVIC_SetPriorityGrouping>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005294:	f7ff ff3e 	bl	8005114 <__NVIC_GetPriorityGrouping>
 8005298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7ff ff8e 	bl	80051c0 <NVIC_EncodePriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff5d 	bl	800516c <__NVIC_SetPriority>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff31 	bl	8005130 <__NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ffa2 	bl	8005228 <SysTick_Config>
 80052e4:	4603      	mov	r3, r0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff fa94 	bl	8004828 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e099      	b.n	8005440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532c:	e00f      	b.n	800534e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532e:	f7ff fa7b 	bl	8004828 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b05      	cmp	r3, #5
 800533a:	d908      	bls.n	800534e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e078      	b.n	8005440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e8      	bne.n	800532e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4b38      	ldr	r3, [pc, #224]	@ (8005448 <HAL_DMA_Init+0x158>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800537a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	4313      	orrs	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d117      	bne.n	8005412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa6f 	bl	80058d8 <DMA_CheckFifoParam>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	@ 0x40
 8005404:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800540e:	2301      	movs	r3, #1
 8005410:	e016      	b.n	8005440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa26 	bl	800586c <DMA_CalcBaseAndBitshift>
 8005420:	4603      	mov	r3, r0
 8005422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	223f      	movs	r2, #63	@ 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	f010803f 	.word	0xf010803f

0800544c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Start_IT+0x26>
 800546e:	2302      	movs	r3, #2
 8005470:	e040      	b.n	80054f4 <HAL_DMA_Start_IT+0xa8>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d12f      	bne.n	80054e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f9b8 	bl	8005810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	223f      	movs	r2, #63	@ 0x3f
 80054a6:	409a      	lsls	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0216 	orr.w	r2, r2, #22
 80054ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e005      	b.n	80054f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005508:	4b8e      	ldr	r3, [pc, #568]	@ (8005744 <HAL_DMA_IRQHandler+0x248>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a8e      	ldr	r2, [pc, #568]	@ (8005748 <HAL_DMA_IRQHandler+0x24c>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0a9b      	lsrs	r3, r3, #10
 8005514:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	2208      	movs	r2, #8
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01a      	beq.n	8005568 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0204 	bic.w	r2, r2, #4
 800554e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005554:	2208      	movs	r2, #8
 8005556:	409a      	lsls	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	f043 0201 	orr.w	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556c:	2201      	movs	r2, #1
 800556e:	409a      	lsls	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d012      	beq.n	800559e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558a:	2201      	movs	r2, #1
 800558c:	409a      	lsls	r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a2:	2204      	movs	r2, #4
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	2204      	movs	r2, #4
 80055c2:	409a      	lsls	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d8:	2210      	movs	r2, #16
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d043      	beq.n	800566c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d03c      	beq.n	800566c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	2210      	movs	r2, #16
 80055f8:	409a      	lsls	r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d018      	beq.n	800563e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d024      	beq.n	800566c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
 800562a:	e01f      	b.n	800566c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
 800563c:	e016      	b.n	800566c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d107      	bne.n	800565c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0208 	bic.w	r2, r2, #8
 800565a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	2220      	movs	r2, #32
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 808f 	beq.w	800579c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8087 	beq.w	800579c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005692:	2220      	movs	r2, #32
 8005694:	409a      	lsls	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d136      	bne.n	8005714 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0216 	bic.w	r2, r2, #22
 80056b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x1da>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0208 	bic.w	r2, r2, #8
 80056e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	223f      	movs	r2, #63	@ 0x3f
 80056ec:	409a      	lsls	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005706:	2b00      	cmp	r3, #0
 8005708:	d07e      	beq.n	8005808 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
        }
        return;
 8005712:	e079      	b.n	8005808 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01d      	beq.n	800575e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005734:	2b00      	cmp	r3, #0
 8005736:	d031      	beq.n	800579c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
 8005740:	e02c      	b.n	800579c <HAL_DMA_IRQHandler+0x2a0>
 8005742:	bf00      	nop
 8005744:	20000000 	.word	0x20000000
 8005748:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d023      	beq.n	800579c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
 800575c:	e01e      	b.n	800579c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10f      	bne.n	800578c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0210 	bic.w	r2, r2, #16
 800577a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d032      	beq.n	800580a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d022      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2205      	movs	r2, #5
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d307      	bcc.n	80057e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f2      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x2cc>
 80057e2:	e000      	b.n	80057e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
 8005806:	e000      	b.n	800580a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005808:	bf00      	nop
    }
  }
}
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800582c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b40      	cmp	r3, #64	@ 0x40
 800583c:	d108      	bne.n	8005850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800584e:	e007      	b.n	8005860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	3b10      	subs	r3, #16
 800587c:	4a14      	ldr	r2, [pc, #80]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x64>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005886:	4a13      	ldr	r2, [pc, #76]	@ (80058d4 <DMA_CalcBaseAndBitshift+0x68>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d909      	bls.n	80058ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80058ac:	e007      	b.n	80058be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	aaaaaaab 	.word	0xaaaaaaab
 80058d4:	0800b2c8 	.word	0x0800b2c8

080058d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11f      	bne.n	8005932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d856      	bhi.n	80059a6 <DMA_CheckFifoParam+0xce>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <DMA_CheckFifoParam+0x28>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	08005923 	.word	0x08005923
 8005908:	08005911 	.word	0x08005911
 800590c:	080059a7 	.word	0x080059a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d046      	beq.n	80059aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005920:	e043      	b.n	80059aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800592a:	d140      	bne.n	80059ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005930:	e03d      	b.n	80059ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800593a:	d121      	bne.n	8005980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d837      	bhi.n	80059b2 <DMA_CheckFifoParam+0xda>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <DMA_CheckFifoParam+0x70>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005959 	.word	0x08005959
 800594c:	0800595f 	.word	0x0800595f
 8005950:	08005959 	.word	0x08005959
 8005954:	08005971 	.word	0x08005971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
      break;
 800595c:	e030      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d025      	beq.n	80059b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596e:	e022      	b.n	80059b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005978:	d11f      	bne.n	80059ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800597e:	e01c      	b.n	80059ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d903      	bls.n	800598e <DMA_CheckFifoParam+0xb6>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d003      	beq.n	8005994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800598c:	e018      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	e015      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00e      	beq.n	80059be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	e00b      	b.n	80059be <DMA_CheckFifoParam+0xe6>
      break;
 80059a6:	bf00      	nop
 80059a8:	e00a      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;
 80059aa:	bf00      	nop
 80059ac:	e008      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;
 80059ae:	bf00      	nop
 80059b0:	e006      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;
 80059b2:	bf00      	nop
 80059b4:	e004      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <DMA_CheckFifoParam+0xe8>
      break;
 80059be:	bf00      	nop
    }
  } 
  
  return status; 
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop

080059d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	@ 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e165      	b.n	8005cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059ec:	2201      	movs	r2, #1
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f040 8154 	bne.w	8005cb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d005      	beq.n	8005a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d130      	bne.n	8005a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a58:	2201      	movs	r2, #1
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	f003 0201 	and.w	r2, r3, #1
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d017      	beq.n	8005ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d123      	bne.n	8005b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	08da      	lsrs	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3208      	adds	r2, #8
 8005ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	220f      	movs	r2, #15
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	08da      	lsrs	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3208      	adds	r2, #8
 8005b0e:	69b9      	ldr	r1, [r7, #24]
 8005b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	2203      	movs	r2, #3
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0203 	and.w	r2, r3, #3
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80ae 	beq.w	8005cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8005cd0 <HAL_GPIO_Init+0x300>)
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8005cd0 <HAL_GPIO_Init+0x300>)
 8005b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b66:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd0 <HAL_GPIO_Init+0x300>)
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b72:	4a58      	ldr	r2, [pc, #352]	@ (8005cd4 <HAL_GPIO_Init+0x304>)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	220f      	movs	r2, #15
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4f      	ldr	r2, [pc, #316]	@ (8005cd8 <HAL_GPIO_Init+0x308>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x21a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8005cdc <HAL_GPIO_Init+0x30c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x216>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce0 <HAL_GPIO_Init+0x310>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x212>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce4 <HAL_GPIO_Init+0x314>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x20e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce8 <HAL_GPIO_Init+0x318>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x20a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <HAL_GPIO_Init+0x31c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x206>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a49      	ldr	r2, [pc, #292]	@ (8005cf0 <HAL_GPIO_Init+0x320>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x202>
 8005bce:	2306      	movs	r3, #6
 8005bd0:	e00c      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	e00a      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bd6:	2305      	movs	r3, #5
 8005bd8:	e008      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	e006      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bde:	2303      	movs	r3, #3
 8005be0:	e004      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e002      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bea:	2300      	movs	r3, #0
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	f002 0203 	and.w	r2, r2, #3
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	4093      	lsls	r3, r2
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bfc:	4935      	ldr	r1, [pc, #212]	@ (8005cd4 <HAL_GPIO_Init+0x304>)
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	3302      	adds	r3, #2
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c2e:	4a31      	ldr	r2, [pc, #196]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c34:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4013      	ands	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c58:	4a26      	ldr	r2, [pc, #152]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c5e:	4b25      	ldr	r3, [pc, #148]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c82:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cac:	4a11      	ldr	r2, [pc, #68]	@ (8005cf4 <HAL_GPIO_Init+0x324>)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	f67f ae96 	bls.w	80059ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	3724      	adds	r7, #36	@ 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	40013800 	.word	0x40013800
 8005cd8:	40020000 	.word	0x40020000
 8005cdc:	40020400 	.word	0x40020400
 8005ce0:	40020800 	.word	0x40020800
 8005ce4:	40020c00 	.word	0x40020c00
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40021400 	.word	0x40021400
 8005cf0:	40021800 	.word	0x40021800
 8005cf4:	40013c00 	.word	0x40013c00

08005cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
 8005d04:	4613      	mov	r3, r2
 8005d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d08:	787b      	ldrb	r3, [r7, #1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d14:	e003      	b.n	8005d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	041a      	lsls	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	619a      	str	r2, [r3, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4b20      	ldr	r3, [pc, #128]	@ (8005dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d46:	4b1d      	ldr	r3, [pc, #116]	@ (8005dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d52:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d58:	f7fe fd66 	bl	8004828 <HAL_GetTick>
 8005d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d5e:	e009      	b.n	8005d74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d60:	f7fe fd62 	bl	8004828 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d6e:	d901      	bls.n	8005d74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e01f      	b.n	8005db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d74:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d80:	d1ee      	bne.n	8005d60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d82:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d88:	f7fe fd4e 	bl	8004828 <HAL_GetTick>
 8005d8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d8e:	e009      	b.n	8005da4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d90:	f7fe fd4a 	bl	8004828 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d9e:	d901      	bls.n	8005da4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e007      	b.n	8005db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005da4:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005db0:	d1ee      	bne.n	8005d90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	420e0040 	.word	0x420e0040
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	420e0044 	.word	0x420e0044

08005dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0cc      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005de0:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90c      	bls.n	8005e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b65      	ldr	r3, [pc, #404]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b63      	ldr	r3, [pc, #396]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0b8      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d020      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e20:	4b59      	ldr	r3, [pc, #356]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4a58      	ldr	r2, [pc, #352]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4a52      	ldr	r2, [pc, #328]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e44:	4b50      	ldr	r3, [pc, #320]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	494d      	ldr	r1, [pc, #308]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d044      	beq.n	8005eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d107      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	4b47      	ldr	r3, [pc, #284]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d119      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e07f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d003      	beq.n	8005e8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e06f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e067      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eaa:	4b37      	ldr	r3, [pc, #220]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f023 0203 	bic.w	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4934      	ldr	r1, [pc, #208]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ebc:	f7fe fcb4 	bl	8004828 <HAL_GetTick>
 8005ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	e00a      	b.n	8005eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec4:	f7fe fcb0 	bl	8004828 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e04f      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	4b2b      	ldr	r3, [pc, #172]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 020c 	and.w	r2, r3, #12
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d1eb      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eec:	4b25      	ldr	r3, [pc, #148]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d20c      	bcs.n	8005f14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b22      	ldr	r3, [pc, #136]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	4b20      	ldr	r3, [pc, #128]	@ (8005f84 <HAL_RCC_ClockConfig+0x1b8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e032      	b.n	8005f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4916      	ldr	r1, [pc, #88]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f3e:	4b12      	ldr	r3, [pc, #72]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	490e      	ldr	r1, [pc, #56]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f52:	f000 f855 	bl	8006000 <HAL_RCC_GetSysClockFreq>
 8005f56:	4602      	mov	r2, r0
 8005f58:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	490a      	ldr	r1, [pc, #40]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005f64:	5ccb      	ldrb	r3, [r1, r3]
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f6e:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <HAL_RCC_ClockConfig+0x1c8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fc14 	bl	80047a0 <HAL_InitTick>

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023c00 	.word	0x40023c00
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	0800b2b0 	.word	0x0800b2b0
 8005f90:	20000000 	.word	0x20000000
 8005f94:	20000004 	.word	0x20000004

08005f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000000 	.word	0x20000000

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	@ (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	0800b2c0 	.word	0x0800b2c0

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fdc:	f7ff ffdc 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0b5b      	lsrs	r3, r3, #13
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	@ (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0800b2c0 	.word	0x0800b2c0

08006000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006004:	b0ae      	sub	sp, #184	@ 0xb8
 8006006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006026:	4bcb      	ldr	r3, [pc, #812]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b0c      	cmp	r3, #12
 8006030:	f200 8206 	bhi.w	8006440 <HAL_RCC_GetSysClockFreq+0x440>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006071 	.word	0x08006071
 8006040:	08006441 	.word	0x08006441
 8006044:	08006441 	.word	0x08006441
 8006048:	08006441 	.word	0x08006441
 800604c:	08006079 	.word	0x08006079
 8006050:	08006441 	.word	0x08006441
 8006054:	08006441 	.word	0x08006441
 8006058:	08006441 	.word	0x08006441
 800605c:	08006081 	.word	0x08006081
 8006060:	08006441 	.word	0x08006441
 8006064:	08006441 	.word	0x08006441
 8006068:	08006441 	.word	0x08006441
 800606c:	08006271 	.word	0x08006271
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4bb9      	ldr	r3, [pc, #740]	@ (8006358 <HAL_RCC_GetSysClockFreq+0x358>)
 8006072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006076:	e1e7      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006078:	4bb8      	ldr	r3, [pc, #736]	@ (800635c <HAL_RCC_GetSysClockFreq+0x35c>)
 800607a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800607e:	e1e3      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006080:	4bb4      	ldr	r3, [pc, #720]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800608c:	4bb1      	ldr	r3, [pc, #708]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d071      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006098:	4bae      	ldr	r3, [pc, #696]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	099b      	lsrs	r3, r3, #6
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80060a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	0159      	lsls	r1, r3, #5
 80060cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060d0:	0150      	lsls	r0, r2, #5
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4621      	mov	r1, r4
 80060d8:	1a51      	subs	r1, r2, r1
 80060da:	6439      	str	r1, [r7, #64]	@ 0x40
 80060dc:	4629      	mov	r1, r5
 80060de:	eb63 0301 	sbc.w	r3, r3, r1
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80060f0:	4649      	mov	r1, r9
 80060f2:	018b      	lsls	r3, r1, #6
 80060f4:	4641      	mov	r1, r8
 80060f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060fa:	4641      	mov	r1, r8
 80060fc:	018a      	lsls	r2, r1, #6
 80060fe:	4641      	mov	r1, r8
 8006100:	1a51      	subs	r1, r2, r1
 8006102:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006104:	4649      	mov	r1, r9
 8006106:	eb63 0301 	sbc.w	r3, r3, r1
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006118:	4649      	mov	r1, r9
 800611a:	00cb      	lsls	r3, r1, #3
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006122:	4641      	mov	r1, r8
 8006124:	00ca      	lsls	r2, r1, #3
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	4603      	mov	r3, r0
 800612c:	4622      	mov	r2, r4
 800612e:	189b      	adds	r3, r3, r2
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30
 8006132:	462b      	mov	r3, r5
 8006134:	460a      	mov	r2, r1
 8006136:	eb42 0303 	adc.w	r3, r2, r3
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006148:	4629      	mov	r1, r5
 800614a:	024b      	lsls	r3, r1, #9
 800614c:	4621      	mov	r1, r4
 800614e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006152:	4621      	mov	r1, r4
 8006154:	024a      	lsls	r2, r1, #9
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006168:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800616c:	f7fa fd50 	bl	8000c10 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4613      	mov	r3, r2
 8006176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800617a:	e067      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617c:	4b75      	ldr	r3, [pc, #468]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	099b      	lsrs	r3, r3, #6
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006188:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800618c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006194:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006196:	2300      	movs	r3, #0
 8006198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800619a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800619e:	4622      	mov	r2, r4
 80061a0:	462b      	mov	r3, r5
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f04f 0100 	mov.w	r1, #0
 80061aa:	0159      	lsls	r1, r3, #5
 80061ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b0:	0150      	lsls	r0, r2, #5
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4621      	mov	r1, r4
 80061b8:	1a51      	subs	r1, r2, r1
 80061ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80061bc:	4629      	mov	r1, r5
 80061be:	eb63 0301 	sbc.w	r3, r3, r1
 80061c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80061d0:	4649      	mov	r1, r9
 80061d2:	018b      	lsls	r3, r1, #6
 80061d4:	4641      	mov	r1, r8
 80061d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061da:	4641      	mov	r1, r8
 80061dc:	018a      	lsls	r2, r1, #6
 80061de:	4641      	mov	r1, r8
 80061e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80061e4:	4649      	mov	r1, r9
 80061e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061fe:	4692      	mov	sl, r2
 8006200:	469b      	mov	fp, r3
 8006202:	4623      	mov	r3, r4
 8006204:	eb1a 0303 	adds.w	r3, sl, r3
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	462b      	mov	r3, r5
 800620c:	eb4b 0303 	adc.w	r3, fp, r3
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800621e:	4629      	mov	r1, r5
 8006220:	028b      	lsls	r3, r1, #10
 8006222:	4621      	mov	r1, r4
 8006224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006228:	4621      	mov	r1, r4
 800622a:	028a      	lsls	r2, r1, #10
 800622c:	4610      	mov	r0, r2
 800622e:	4619      	mov	r1, r3
 8006230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006234:	2200      	movs	r2, #0
 8006236:	673b      	str	r3, [r7, #112]	@ 0x70
 8006238:	677a      	str	r2, [r7, #116]	@ 0x74
 800623a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800623e:	f7fa fce7 	bl	8000c10 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4613      	mov	r3, r2
 8006248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800624c:	4b41      	ldr	r3, [pc, #260]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	3301      	adds	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800625e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800626e:	e0eb      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006270:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627c:	4b35      	ldr	r3, [pc, #212]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d06b      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006288:	4b32      	ldr	r3, [pc, #200]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x354>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	099b      	lsrs	r3, r3, #6
 800628e:	2200      	movs	r2, #0
 8006290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006292:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	663b      	str	r3, [r7, #96]	@ 0x60
 800629c:	2300      	movs	r3, #0
 800629e:	667b      	str	r3, [r7, #100]	@ 0x64
 80062a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80062a4:	4622      	mov	r2, r4
 80062a6:	462b      	mov	r3, r5
 80062a8:	f04f 0000 	mov.w	r0, #0
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	0159      	lsls	r1, r3, #5
 80062b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b6:	0150      	lsls	r0, r2, #5
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4621      	mov	r1, r4
 80062be:	1a51      	subs	r1, r2, r1
 80062c0:	61b9      	str	r1, [r7, #24]
 80062c2:	4629      	mov	r1, r5
 80062c4:	eb63 0301 	sbc.w	r3, r3, r1
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80062d6:	4659      	mov	r1, fp
 80062d8:	018b      	lsls	r3, r1, #6
 80062da:	4651      	mov	r1, sl
 80062dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062e0:	4651      	mov	r1, sl
 80062e2:	018a      	lsls	r2, r1, #6
 80062e4:	4651      	mov	r1, sl
 80062e6:	ebb2 0801 	subs.w	r8, r2, r1
 80062ea:	4659      	mov	r1, fp
 80062ec:	eb63 0901 	sbc.w	r9, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006300:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006304:	4690      	mov	r8, r2
 8006306:	4699      	mov	r9, r3
 8006308:	4623      	mov	r3, r4
 800630a:	eb18 0303 	adds.w	r3, r8, r3
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	462b      	mov	r3, r5
 8006312:	eb49 0303 	adc.w	r3, r9, r3
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006324:	4629      	mov	r1, r5
 8006326:	024b      	lsls	r3, r1, #9
 8006328:	4621      	mov	r1, r4
 800632a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800632e:	4621      	mov	r1, r4
 8006330:	024a      	lsls	r2, r1, #9
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800633a:	2200      	movs	r2, #0
 800633c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800633e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006344:	f7fa fc64 	bl	8000c10 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006352:	e065      	b.n	8006420 <HAL_RCC_GetSysClockFreq+0x420>
 8006354:	40023800 	.word	0x40023800
 8006358:	00f42400 	.word	0x00f42400
 800635c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006360:	4b3d      	ldr	r3, [pc, #244]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x458>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	2200      	movs	r2, #0
 8006368:	4618      	mov	r0, r3
 800636a:	4611      	mov	r1, r2
 800636c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006370:	653b      	str	r3, [r7, #80]	@ 0x50
 8006372:	2300      	movs	r3, #0
 8006374:	657b      	str	r3, [r7, #84]	@ 0x54
 8006376:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800637a:	4642      	mov	r2, r8
 800637c:	464b      	mov	r3, r9
 800637e:	f04f 0000 	mov.w	r0, #0
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	0159      	lsls	r1, r3, #5
 8006388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800638c:	0150      	lsls	r0, r2, #5
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4641      	mov	r1, r8
 8006394:	1a51      	subs	r1, r2, r1
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	4649      	mov	r1, r9
 800639a:	eb63 0301 	sbc.w	r3, r3, r1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80063ac:	4659      	mov	r1, fp
 80063ae:	018b      	lsls	r3, r1, #6
 80063b0:	4651      	mov	r1, sl
 80063b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063b6:	4651      	mov	r1, sl
 80063b8:	018a      	lsls	r2, r1, #6
 80063ba:	4651      	mov	r1, sl
 80063bc:	1a54      	subs	r4, r2, r1
 80063be:	4659      	mov	r1, fp
 80063c0:	eb63 0501 	sbc.w	r5, r3, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	00eb      	lsls	r3, r5, #3
 80063ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063d2:	00e2      	lsls	r2, r4, #3
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	4643      	mov	r3, r8
 80063da:	18e3      	adds	r3, r4, r3
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	464b      	mov	r3, r9
 80063e0:	eb45 0303 	adc.w	r3, r5, r3
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063f2:	4629      	mov	r1, r5
 80063f4:	028b      	lsls	r3, r1, #10
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063fc:	4621      	mov	r1, r4
 80063fe:	028a      	lsls	r2, r1, #10
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006408:	2200      	movs	r2, #0
 800640a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800640c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800640e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006412:	f7fa fbfd 	bl	8000c10 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4613      	mov	r3, r2
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006420:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x458>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	0f1b      	lsrs	r3, r3, #28
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800642e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800643e:	e003      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4b06      	ldr	r3, [pc, #24]	@ (800645c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006446:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800644c:	4618      	mov	r0, r3
 800644e:	37b8      	adds	r7, #184	@ 0xb8
 8006450:	46bd      	mov	sp, r7
 8006452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800
 800645c:	00f42400 	.word	0x00f42400

08006460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e28d      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8083 	beq.w	8006586 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006480:	4b94      	ldr	r3, [pc, #592]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b04      	cmp	r3, #4
 800648a:	d019      	beq.n	80064c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800648c:	4b91      	ldr	r3, [pc, #580]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 030c 	and.w	r3, r3, #12
        || \
 8006494:	2b08      	cmp	r3, #8
 8006496:	d106      	bne.n	80064a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006498:	4b8e      	ldr	r3, [pc, #568]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064a4:	d00c      	beq.n	80064c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064a6:	4b8b      	ldr	r3, [pc, #556]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80064ae:	2b0c      	cmp	r3, #12
 80064b0:	d112      	bne.n	80064d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064b2:	4b88      	ldr	r3, [pc, #544]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064be:	d10b      	bne.n	80064d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c0:	4b84      	ldr	r3, [pc, #528]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05b      	beq.n	8006584 <HAL_RCC_OscConfig+0x124>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d157      	bne.n	8006584 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e25a      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e0:	d106      	bne.n	80064f0 <HAL_RCC_OscConfig+0x90>
 80064e2:	4b7c      	ldr	r3, [pc, #496]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7b      	ldr	r2, [pc, #492]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e01d      	b.n	800652c <HAL_RCC_OscConfig+0xcc>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064f8:	d10c      	bne.n	8006514 <HAL_RCC_OscConfig+0xb4>
 80064fa:	4b76      	ldr	r3, [pc, #472]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a75      	ldr	r2, [pc, #468]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	4b73      	ldr	r3, [pc, #460]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a72      	ldr	r2, [pc, #456]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e00b      	b.n	800652c <HAL_RCC_OscConfig+0xcc>
 8006514:	4b6f      	ldr	r3, [pc, #444]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a6e      	ldr	r2, [pc, #440]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 800651a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	4b6c      	ldr	r3, [pc, #432]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a6b      	ldr	r2, [pc, #428]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800652a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d013      	beq.n	800655c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fe f978 	bl	8004828 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800653c:	f7fe f974 	bl	8004828 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b64      	cmp	r3, #100	@ 0x64
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e21f      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654e:	4b61      	ldr	r3, [pc, #388]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0xdc>
 800655a:	e014      	b.n	8006586 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fe f964 	bl	8004828 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006564:	f7fe f960 	bl	8004828 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b64      	cmp	r3, #100	@ 0x64
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e20b      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006576:	4b57      	ldr	r3, [pc, #348]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f0      	bne.n	8006564 <HAL_RCC_OscConfig+0x104>
 8006582:	e000      	b.n	8006586 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d06f      	beq.n	8006672 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006592:	4b50      	ldr	r3, [pc, #320]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	2b00      	cmp	r3, #0
 800659c:	d017      	beq.n	80065ce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800659e:	4b4d      	ldr	r3, [pc, #308]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
        || \
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d105      	bne.n	80065b6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80065aa:	4b4a      	ldr	r3, [pc, #296]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065b6:	4b47      	ldr	r3, [pc, #284]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d11c      	bne.n	80065fc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065c2:	4b44      	ldr	r3, [pc, #272]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d116      	bne.n	80065fc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ce:	4b41      	ldr	r3, [pc, #260]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_RCC_OscConfig+0x186>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e1d3      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e6:	4b3b      	ldr	r3, [pc, #236]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4937      	ldr	r1, [pc, #220]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fa:	e03a      	b.n	8006672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006604:	4b34      	ldr	r3, [pc, #208]	@ (80066d8 <HAL_RCC_OscConfig+0x278>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fe f90d 	bl	8004828 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006612:	f7fe f909 	bl	8004828 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e1b4      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006624:	4b2b      	ldr	r3, [pc, #172]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006630:	4b28      	ldr	r3, [pc, #160]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4925      	ldr	r1, [pc, #148]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
 8006644:	e015      	b.n	8006672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006646:	4b24      	ldr	r3, [pc, #144]	@ (80066d8 <HAL_RCC_OscConfig+0x278>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fe f8ec 	bl	8004828 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006654:	f7fe f8e8 	bl	8004828 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e193      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006666:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d036      	beq.n	80066ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006686:	4b15      	ldr	r3, [pc, #84]	@ (80066dc <HAL_RCC_OscConfig+0x27c>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fe f8cc 	bl	8004828 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006694:	f7fe f8c8 	bl	8004828 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e173      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <HAL_RCC_OscConfig+0x274>)
 80066a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x234>
 80066b2:	e01b      	b.n	80066ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b4:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <HAL_RCC_OscConfig+0x27c>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ba:	f7fe f8b5 	bl	8004828 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c0:	e00e      	b.n	80066e0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c2:	f7fe f8b1 	bl	8004828 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d907      	bls.n	80066e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e15c      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
 80066d4:	40023800 	.word	0x40023800
 80066d8:	42470000 	.word	0x42470000
 80066dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e0:	4b8a      	ldr	r3, [pc, #552]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ea      	bne.n	80066c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8097 	beq.w	8006828 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066fe:	4b83      	ldr	r3, [pc, #524]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	4b7f      	ldr	r3, [pc, #508]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	4a7e      	ldr	r2, [pc, #504]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006718:	6413      	str	r3, [r2, #64]	@ 0x40
 800671a:	4b7c      	ldr	r3, [pc, #496]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672a:	4b79      	ldr	r3, [pc, #484]	@ (8006910 <HAL_RCC_OscConfig+0x4b0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d118      	bne.n	8006768 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006736:	4b76      	ldr	r3, [pc, #472]	@ (8006910 <HAL_RCC_OscConfig+0x4b0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a75      	ldr	r2, [pc, #468]	@ (8006910 <HAL_RCC_OscConfig+0x4b0>)
 800673c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006742:	f7fe f871 	bl	8004828 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674a:	f7fe f86d 	bl	8004828 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e118      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675c:	4b6c      	ldr	r3, [pc, #432]	@ (8006910 <HAL_RCC_OscConfig+0x4b0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d106      	bne.n	800677e <HAL_RCC_OscConfig+0x31e>
 8006770:	4b66      	ldr	r3, [pc, #408]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006774:	4a65      	ldr	r2, [pc, #404]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	6713      	str	r3, [r2, #112]	@ 0x70
 800677c:	e01c      	b.n	80067b8 <HAL_RCC_OscConfig+0x358>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b05      	cmp	r3, #5
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x340>
 8006786:	4b61      	ldr	r3, [pc, #388]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678a:	4a60      	ldr	r2, [pc, #384]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 800678c:	f043 0304 	orr.w	r3, r3, #4
 8006790:	6713      	str	r3, [r2, #112]	@ 0x70
 8006792:	4b5e      	ldr	r3, [pc, #376]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006796:	4a5d      	ldr	r2, [pc, #372]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6713      	str	r3, [r2, #112]	@ 0x70
 800679e:	e00b      	b.n	80067b8 <HAL_RCC_OscConfig+0x358>
 80067a0:	4b5a      	ldr	r3, [pc, #360]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a4:	4a59      	ldr	r2, [pc, #356]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ac:	4b57      	ldr	r3, [pc, #348]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80067ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b0:	4a56      	ldr	r2, [pc, #344]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80067b2:	f023 0304 	bic.w	r3, r3, #4
 80067b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d015      	beq.n	80067ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c0:	f7fe f832 	bl	8004828 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c6:	e00a      	b.n	80067de <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f7fe f82e 	bl	8004828 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e0d7      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067de:	4b4b      	ldr	r3, [pc, #300]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0ee      	beq.n	80067c8 <HAL_RCC_OscConfig+0x368>
 80067ea:	e014      	b.n	8006816 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fe f81c 	bl	8004828 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f2:	e00a      	b.n	800680a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f4:	f7fe f818 	bl	8004828 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e0c1      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680a:	4b40      	ldr	r3, [pc, #256]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1ee      	bne.n	80067f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d105      	bne.n	8006828 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800681c:	4b3b      	ldr	r3, [pc, #236]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	4a3a      	ldr	r2, [pc, #232]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006826:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80ad 	beq.w	800698c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b08      	cmp	r3, #8
 800683c:	d060      	beq.n	8006900 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d145      	bne.n	80068d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006846:	4b33      	ldr	r3, [pc, #204]	@ (8006914 <HAL_RCC_OscConfig+0x4b4>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fd ffec 	bl	8004828 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006854:	f7fd ffe8 	bl	8004828 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e093      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006866:	4b29      	ldr	r3, [pc, #164]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	019b      	lsls	r3, r3, #6
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	3b01      	subs	r3, #1
 800688c:	041b      	lsls	r3, r3, #16
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	071b      	lsls	r3, r3, #28
 800689e:	491b      	ldr	r1, [pc, #108]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006914 <HAL_RCC_OscConfig+0x4b4>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068aa:	f7fd ffbd 	bl	8004828 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b2:	f7fd ffb9 	bl	8004828 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e064      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c4:	4b11      	ldr	r3, [pc, #68]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x452>
 80068d0:	e05c      	b.n	800698c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d2:	4b10      	ldr	r3, [pc, #64]	@ (8006914 <HAL_RCC_OscConfig+0x4b4>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fd ffa6 	bl	8004828 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fd ffa2 	bl	8004828 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e04d      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x480>
 80068fe:	e045      	b.n	800698c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e040      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
 800690c:	40023800 	.word	0x40023800
 8006910:	40007000 	.word	0x40007000
 8006914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006918:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <HAL_RCC_OscConfig+0x538>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d030      	beq.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006930:	429a      	cmp	r2, r3
 8006932:	d129      	bne.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d122      	bne.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006948:	4013      	ands	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800694e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006950:	4293      	cmp	r3, r2
 8006952:	d119      	bne.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	3b01      	subs	r3, #1
 8006962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d10f      	bne.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d107      	bne.n	8006988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800

0800699c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e041      	b.n	8006a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fd fd1c 	bl	8004400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f000 fad8 	bl	8006f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e041      	b.n	8006ad0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d106      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f839 	bl	8006ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f000 fa89 	bl	8006f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_TIM_PWM_Start+0x24>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	bf14      	ite	ne
 8006b08:	2301      	movne	r3, #1
 8006b0a:	2300      	moveq	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	e022      	b.n	8006b56 <HAL_TIM_PWM_Start+0x6a>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d109      	bne.n	8006b2a <HAL_TIM_PWM_Start+0x3e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e015      	b.n	8006b56 <HAL_TIM_PWM_Start+0x6a>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d109      	bne.n	8006b44 <HAL_TIM_PWM_Start+0x58>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	e008      	b.n	8006b56 <HAL_TIM_PWM_Start+0x6a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e07c      	b.n	8006c58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <HAL_TIM_PWM_Start+0x82>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b6c:	e013      	b.n	8006b96 <HAL_TIM_PWM_Start+0xaa>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Start+0x92>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b7c:	e00b      	b.n	8006b96 <HAL_TIM_PWM_Start+0xaa>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Start+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b8c:	e003      	b.n	8006b96 <HAL_TIM_PWM_Start+0xaa>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fcec 	bl	800757c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c60 <HAL_TIM_PWM_Start+0x174>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIM_PWM_Start+0xcc>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8006c64 <HAL_TIM_PWM_Start+0x178>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <HAL_TIM_PWM_Start+0xd0>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_TIM_PWM_Start+0xd2>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a22      	ldr	r2, [pc, #136]	@ (8006c60 <HAL_TIM_PWM_Start+0x174>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d022      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be4:	d01d      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1f      	ldr	r2, [pc, #124]	@ (8006c68 <HAL_TIM_PWM_Start+0x17c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d018      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c6c <HAL_TIM_PWM_Start+0x180>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8006c70 <HAL_TIM_PWM_Start+0x184>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a16      	ldr	r2, [pc, #88]	@ (8006c64 <HAL_TIM_PWM_Start+0x178>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a18      	ldr	r2, [pc, #96]	@ (8006c74 <HAL_TIM_PWM_Start+0x188>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x136>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <HAL_TIM_PWM_Start+0x18c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d111      	bne.n	8006c46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d010      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c44:	e007      	b.n	8006c56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40001800 	.word	0x40001800

08006c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e0ae      	b.n	8006df8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b0c      	cmp	r3, #12
 8006ca6:	f200 809f 	bhi.w	8006de8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006de9 	.word	0x08006de9
 8006cb8:	08006de9 	.word	0x08006de9
 8006cbc:	08006de9 	.word	0x08006de9
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006de9 	.word	0x08006de9
 8006cc8:	08006de9 	.word	0x08006de9
 8006ccc:	08006de9 	.word	0x08006de9
 8006cd0:	08006d67 	.word	0x08006d67
 8006cd4:	08006de9 	.word	0x08006de9
 8006cd8:	08006de9 	.word	0x08006de9
 8006cdc:	08006de9 	.word	0x08006de9
 8006ce0:	08006da7 	.word	0x08006da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f9fc 	bl	80070e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	619a      	str	r2, [r3, #24]
      break;
 8006d22:	e064      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fa4c 	bl	80071c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6999      	ldr	r1, [r3, #24]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	619a      	str	r2, [r3, #24]
      break;
 8006d64:	e043      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 faa1 	bl	80072b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0208 	orr.w	r2, r2, #8
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0204 	bic.w	r2, r2, #4
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	61da      	str	r2, [r3, #28]
      break;
 8006da4:	e023      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 faf5 	bl	800739c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	021a      	lsls	r2, r3, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	61da      	str	r2, [r3, #28]
      break;
 8006de6:	e002      	b.n	8006dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75fb      	strb	r3, [r7, #23]
      break;
 8006dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIM_ConfigClockSource+0x1c>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e0b4      	b.n	8006f86 <HAL_TIM_ConfigClockSource+0x186>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e54:	d03e      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e5a:	f200 8087 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e62:	f000 8086 	beq.w	8006f72 <HAL_TIM_ConfigClockSource+0x172>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6a:	d87f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e6c:	2b70      	cmp	r3, #112	@ 0x70
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8006e70:	2b70      	cmp	r3, #112	@ 0x70
 8006e72:	d87b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e74:	2b60      	cmp	r3, #96	@ 0x60
 8006e76:	d050      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x11a>
 8006e78:	2b60      	cmp	r3, #96	@ 0x60
 8006e7a:	d877      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b50      	cmp	r3, #80	@ 0x50
 8006e7e:	d03c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xfa>
 8006e80:	2b50      	cmp	r3, #80	@ 0x50
 8006e82:	d873      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b40      	cmp	r3, #64	@ 0x40
 8006e86:	d058      	beq.n	8006f3a <HAL_TIM_ConfigClockSource+0x13a>
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d86f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b30      	cmp	r3, #48	@ 0x30
 8006e8e:	d064      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006e90:	2b30      	cmp	r3, #48	@ 0x30
 8006e92:	d86b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d060      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d867      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d05c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d05a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea4:	e062      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb6:	f000 fb41 	bl	800753c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
      break;
 8006ed2:	e04f      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ee4:	f000 fb2a 	bl	800753c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ef6:	609a      	str	r2, [r3, #8]
      break;
 8006ef8:	e03c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 fa9e 	bl	8007448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2150      	movs	r1, #80	@ 0x50
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 faf7 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006f18:	e02c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f26:	461a      	mov	r2, r3
 8006f28:	f000 fabd 	bl	80074a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2160      	movs	r1, #96	@ 0x60
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fae7 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006f38:	e01c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 fa7e 	bl	8007448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2140      	movs	r1, #64	@ 0x40
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fad7 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006f58:	e00c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f000 face 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006f6a:	e003      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a46      	ldr	r2, [pc, #280]	@ (80070bc <TIM_Base_SetConfig+0x12c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fae:	d00f      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a43      	ldr	r2, [pc, #268]	@ (80070c0 <TIM_Base_SetConfig+0x130>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a42      	ldr	r2, [pc, #264]	@ (80070c4 <TIM_Base_SetConfig+0x134>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a41      	ldr	r2, [pc, #260]	@ (80070c8 <TIM_Base_SetConfig+0x138>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a40      	ldr	r2, [pc, #256]	@ (80070cc <TIM_Base_SetConfig+0x13c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a35      	ldr	r2, [pc, #212]	@ (80070bc <TIM_Base_SetConfig+0x12c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff0:	d027      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a32      	ldr	r2, [pc, #200]	@ (80070c0 <TIM_Base_SetConfig+0x130>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d023      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a31      	ldr	r2, [pc, #196]	@ (80070c4 <TIM_Base_SetConfig+0x134>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a30      	ldr	r2, [pc, #192]	@ (80070c8 <TIM_Base_SetConfig+0x138>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2f      	ldr	r2, [pc, #188]	@ (80070cc <TIM_Base_SetConfig+0x13c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d017      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2e      	ldr	r2, [pc, #184]	@ (80070d0 <TIM_Base_SetConfig+0x140>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2d      	ldr	r2, [pc, #180]	@ (80070d4 <TIM_Base_SetConfig+0x144>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2c      	ldr	r2, [pc, #176]	@ (80070d8 <TIM_Base_SetConfig+0x148>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a2b      	ldr	r2, [pc, #172]	@ (80070dc <TIM_Base_SetConfig+0x14c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2a      	ldr	r2, [pc, #168]	@ (80070e0 <TIM_Base_SetConfig+0x150>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a29      	ldr	r2, [pc, #164]	@ (80070e4 <TIM_Base_SetConfig+0x154>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d108      	bne.n	8007054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a10      	ldr	r2, [pc, #64]	@ (80070bc <TIM_Base_SetConfig+0x12c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a12      	ldr	r2, [pc, #72]	@ (80070cc <TIM_Base_SetConfig+0x13c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d103      	bne.n	8007090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d105      	bne.n	80070ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	611a      	str	r2, [r3, #16]
  }
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40000400 	.word	0x40000400
 80070c4:	40000800 	.word	0x40000800
 80070c8:	40000c00 	.word	0x40000c00
 80070cc:	40010400 	.word	0x40010400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800
 80070dc:	40001800 	.word	0x40001800
 80070e0:	40001c00 	.word	0x40001c00
 80070e4:	40002000 	.word	0x40002000

080070e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f023 0201 	bic.w	r2, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 0302 	bic.w	r3, r3, #2
 8007130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a20      	ldr	r2, [pc, #128]	@ (80071c0 <TIM_OC1_SetConfig+0xd8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC1_SetConfig+0x64>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a1f      	ldr	r2, [pc, #124]	@ (80071c4 <TIM_OC1_SetConfig+0xdc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10c      	bne.n	8007166 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0308 	bic.w	r3, r3, #8
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 0304 	bic.w	r3, r3, #4
 8007164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a15      	ldr	r2, [pc, #84]	@ (80071c0 <TIM_OC1_SetConfig+0xd8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC1_SetConfig+0x8e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a14      	ldr	r2, [pc, #80]	@ (80071c4 <TIM_OC1_SetConfig+0xdc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d111      	bne.n	800719a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800717c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	621a      	str	r2, [r3, #32]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40010400 	.word	0x40010400

080071c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f023 0210 	bic.w	r2, r3, #16
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 0320 	bic.w	r3, r3, #32
 8007212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a22      	ldr	r2, [pc, #136]	@ (80072ac <TIM_OC2_SetConfig+0xe4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC2_SetConfig+0x68>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a21      	ldr	r2, [pc, #132]	@ (80072b0 <TIM_OC2_SetConfig+0xe8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10d      	bne.n	800724c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a17      	ldr	r2, [pc, #92]	@ (80072ac <TIM_OC2_SetConfig+0xe4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC2_SetConfig+0x94>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a16      	ldr	r2, [pc, #88]	@ (80072b0 <TIM_OC2_SetConfig+0xe8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d113      	bne.n	8007284 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400

080072b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a21      	ldr	r2, [pc, #132]	@ (8007394 <TIM_OC3_SetConfig+0xe0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_OC3_SetConfig+0x66>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a20      	ldr	r2, [pc, #128]	@ (8007398 <TIM_OC3_SetConfig+0xe4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d10d      	bne.n	8007336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a16      	ldr	r2, [pc, #88]	@ (8007394 <TIM_OC3_SetConfig+0xe0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC3_SetConfig+0x92>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <TIM_OC3_SetConfig+0xe4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d113      	bne.n	800736e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800734c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	621a      	str	r2, [r3, #32]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	40010000 	.word	0x40010000
 8007398:	40010400 	.word	0x40010400

0800739c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	031b      	lsls	r3, r3, #12
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a12      	ldr	r2, [pc, #72]	@ (8007440 <TIM_OC4_SetConfig+0xa4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_OC4_SetConfig+0x68>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a11      	ldr	r2, [pc, #68]	@ (8007444 <TIM_OC4_SetConfig+0xa8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d109      	bne.n	8007418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800740a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	019b      	lsls	r3, r3, #6
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40010000 	.word	0x40010000
 8007444:	40010400 	.word	0x40010400

08007448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 030a 	bic.w	r3, r3, #10
 8007484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f023 0210 	bic.w	r2, r3, #16
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800751c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	f043 0307 	orr.w	r3, r3, #7
 8007528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	431a      	orrs	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2201      	movs	r2, #1
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1a      	ldr	r2, [r3, #32]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	43db      	mvns	r3, r3
 800759e:	401a      	ands	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075dc:	2302      	movs	r3, #2
 80075de:	e05a      	b.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a21      	ldr	r2, [pc, #132]	@ (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d022      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762c:	d01d      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d018      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1a      	ldr	r2, [pc, #104]	@ (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00e      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d009      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a17      	ldr	r2, [pc, #92]	@ (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a15      	ldr	r2, [pc, #84]	@ (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d10c      	bne.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	4313      	orrs	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40001800 	.word	0x40001800

080076c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e042      	b.n	8007758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fc ff90 	bl	800460c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2224      	movs	r2, #36	@ 0x24
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa09 	bl	8007b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695a      	ldr	r2, [r3, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	@ 0x28
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	d175      	bne.n	800786c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_UART_Transmit+0x2c>
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e06e      	b.n	800786e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2221      	movs	r2, #33	@ 0x21
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779e:	f7fd f843 	bl	8004828 <HAL_GetTick>
 80077a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b8:	d108      	bne.n	80077cc <HAL_UART_Transmit+0x6c>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e003      	b.n	80077d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077d4:	e02e      	b.n	8007834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2200      	movs	r2, #0
 80077de:	2180      	movs	r1, #128	@ 0x80
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f8df 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e03a      	b.n	800786e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3302      	adds	r3, #2
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e007      	b.n	8007826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3301      	adds	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1cb      	bne.n	80077d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	2140      	movs	r1, #64	@ 0x40
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f8ab 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e006      	b.n	800786e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	e000      	b.n	800786e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800786c:	2302      	movs	r3, #2
  }
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b08a      	sub	sp, #40	@ 0x28
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b20      	cmp	r3, #32
 8007894:	f040 8081 	bne.w	800799a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HAL_UART_Receive+0x2e>
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e079      	b.n	800799c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2222      	movs	r2, #34	@ 0x22
 80078b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078bc:	f7fc ffb4 	bl	8004828 <HAL_GetTick>
 80078c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d6:	d108      	bne.n	80078ea <HAL_UART_Receive+0x74>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	e003      	b.n	80078f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80078f2:	e047      	b.n	8007984 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2120      	movs	r1, #32
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f850 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e042      	b.n	800799c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007928:	b29a      	uxth	r2, r3
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	3302      	adds	r3, #2
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e01f      	b.n	8007976 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793e:	d007      	beq.n	8007950 <HAL_UART_Receive+0xda>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <HAL_UART_Receive+0xe8>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e008      	b.n	8007970 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796a:	b2da      	uxtb	r2, r3
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3301      	adds	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1b2      	bne.n	80078f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b4:	e03b      	b.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d037      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079be:	f7fc ff33 	bl	8004828 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e03a      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d023      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b80      	cmp	r3, #128	@ 0x80
 80079ea:	d020      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	d01d      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d116      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f81d 	bl	8007a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2208      	movs	r2, #8
 8007a20:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e00f      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4013      	ands	r3, r2
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d0b4      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b095      	sub	sp, #84	@ 0x54
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3314      	adds	r3, #20
 8007a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e5      	bne.n	8007a92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d119      	bne.n	8007b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f023 0310 	bic.w	r3, r3, #16
 8007ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aee:	61ba      	str	r2, [r7, #24]
 8007af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6979      	ldr	r1, [r7, #20]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	613b      	str	r3, [r7, #16]
   return(result);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e5      	bne.n	8007ace <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b10:	bf00      	nop
 8007b12:	3754      	adds	r7, #84	@ 0x54
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b20:	b0c0      	sub	sp, #256	@ 0x100
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	ea40 0301 	orr.w	r3, r0, r1
 8007b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b74:	f021 010c 	bic.w	r1, r1, #12
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b82:	430b      	orrs	r3, r1
 8007b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b96:	6999      	ldr	r1, [r3, #24]
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	ea40 0301 	orr.w	r3, r0, r1
 8007ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b8f      	ldr	r3, [pc, #572]	@ (8007de8 <UART_SetConfig+0x2cc>)
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d005      	beq.n	8007bbc <UART_SetConfig+0xa0>
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8007dec <UART_SetConfig+0x2d0>)
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d104      	bne.n	8007bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bbc:	f7fe fa0c 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8007bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007bc4:	e003      	b.n	8007bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bc6:	f7fe f9f3 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd8:	f040 810c 	bne.w	8007df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bee:	4622      	mov	r2, r4
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	1891      	adds	r1, r2, r2
 8007bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007bf6:	415b      	adcs	r3, r3
 8007bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007bfe:	4621      	mov	r1, r4
 8007c00:	eb12 0801 	adds.w	r8, r2, r1
 8007c04:	4629      	mov	r1, r5
 8007c06:	eb43 0901 	adc.w	r9, r3, r1
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c1e:	4690      	mov	r8, r2
 8007c20:	4699      	mov	r9, r3
 8007c22:	4623      	mov	r3, r4
 8007c24:	eb18 0303 	adds.w	r3, r8, r3
 8007c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	eb49 0303 	adc.w	r3, r9, r3
 8007c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	18db      	adds	r3, r3, r3
 8007c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c50:	4613      	mov	r3, r2
 8007c52:	eb42 0303 	adc.w	r3, r2, r3
 8007c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c60:	f7f8 ffd6 	bl	8000c10 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4b61      	ldr	r3, [pc, #388]	@ (8007df0 <UART_SetConfig+0x2d4>)
 8007c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	011c      	lsls	r4, r3, #4
 8007c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	1891      	adds	r1, r2, r2
 8007c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c8c:	415b      	adcs	r3, r3
 8007c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c94:	4641      	mov	r1, r8
 8007c96:	eb12 0a01 	adds.w	sl, r2, r1
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb4:	4692      	mov	sl, r2
 8007cb6:	469b      	mov	fp, r3
 8007cb8:	4643      	mov	r3, r8
 8007cba:	eb1a 0303 	adds.w	r3, sl, r3
 8007cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8007cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	18db      	adds	r3, r3, r3
 8007ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	eb42 0303 	adc.w	r3, r2, r3
 8007cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007cf6:	f7f8 ff8b 	bl	8000c10 <__aeabi_uldivmod>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4b3b      	ldr	r3, [pc, #236]	@ (8007df0 <UART_SetConfig+0x2d4>)
 8007d02:	fba3 2301 	umull	r2, r3, r3, r1
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	2264      	movs	r2, #100	@ 0x64
 8007d0a:	fb02 f303 	mul.w	r3, r2, r3
 8007d0e:	1acb      	subs	r3, r1, r3
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d16:	4b36      	ldr	r3, [pc, #216]	@ (8007df0 <UART_SetConfig+0x2d4>)
 8007d18:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d24:	441c      	add	r4, r3
 8007d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	1891      	adds	r1, r2, r2
 8007d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d40:	415b      	adcs	r3, r3
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d48:	4641      	mov	r1, r8
 8007d4a:	1851      	adds	r1, r2, r1
 8007d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d4e:	4649      	mov	r1, r9
 8007d50:	414b      	adcs	r3, r1
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d60:	4659      	mov	r1, fp
 8007d62:	00cb      	lsls	r3, r1, #3
 8007d64:	4651      	mov	r1, sl
 8007d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	00ca      	lsls	r2, r1, #3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	4603      	mov	r3, r0
 8007d74:	4642      	mov	r2, r8
 8007d76:	189b      	adds	r3, r3, r2
 8007d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	460a      	mov	r2, r1
 8007d80:	eb42 0303 	adc.w	r3, r2, r3
 8007d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	18db      	adds	r3, r3, r3
 8007da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007da2:	4613      	mov	r3, r2
 8007da4:	eb42 0303 	adc.w	r3, r2, r3
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007db2:	f7f8 ff2d 	bl	8000c10 <__aeabi_uldivmod>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <UART_SetConfig+0x2d4>)
 8007dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	2164      	movs	r1, #100	@ 0x64
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	3332      	adds	r3, #50	@ 0x32
 8007dce:	4a08      	ldr	r2, [pc, #32]	@ (8007df0 <UART_SetConfig+0x2d4>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f003 0207 	and.w	r2, r3, #7
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4422      	add	r2, r4
 8007de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007de4:	e106      	b.n	8007ff4 <UART_SetConfig+0x4d8>
 8007de6:	bf00      	nop
 8007de8:	40011000 	.word	0x40011000
 8007dec:	40011400 	.word	0x40011400
 8007df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	1891      	adds	r1, r2, r2
 8007e0c:	6239      	str	r1, [r7, #32]
 8007e0e:	415b      	adcs	r3, r3
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e16:	4641      	mov	r1, r8
 8007e18:	1854      	adds	r4, r2, r1
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	eb43 0501 	adc.w	r5, r3, r1
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	00eb      	lsls	r3, r5, #3
 8007e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e2e:	00e2      	lsls	r2, r4, #3
 8007e30:	4614      	mov	r4, r2
 8007e32:	461d      	mov	r5, r3
 8007e34:	4643      	mov	r3, r8
 8007e36:	18e3      	adds	r3, r4, r3
 8007e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	eb45 0303 	adc.w	r3, r5, r3
 8007e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e62:	4629      	mov	r1, r5
 8007e64:	008b      	lsls	r3, r1, #2
 8007e66:	4621      	mov	r1, r4
 8007e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	008a      	lsls	r2, r1, #2
 8007e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e74:	f7f8 fecc 	bl	8000c10 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4b60      	ldr	r3, [pc, #384]	@ (8008000 <UART_SetConfig+0x4e4>)
 8007e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	011c      	lsls	r4, r3, #4
 8007e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e98:	4642      	mov	r2, r8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	1891      	adds	r1, r2, r2
 8007e9e:	61b9      	str	r1, [r7, #24]
 8007ea0:	415b      	adcs	r3, r3
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	1851      	adds	r1, r2, r1
 8007eac:	6139      	str	r1, [r7, #16]
 8007eae:	4649      	mov	r1, r9
 8007eb0:	414b      	adcs	r3, r1
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	00cb      	lsls	r3, r1, #3
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eca:	4651      	mov	r1, sl
 8007ecc:	00ca      	lsls	r2, r1, #3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	189b      	adds	r3, r3, r2
 8007ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007edc:	464b      	mov	r3, r9
 8007ede:	460a      	mov	r2, r1
 8007ee0:	eb42 0303 	adc.w	r3, r2, r3
 8007ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f00:	4649      	mov	r1, r9
 8007f02:	008b      	lsls	r3, r1, #2
 8007f04:	4641      	mov	r1, r8
 8007f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	008a      	lsls	r2, r1, #2
 8007f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f12:	f7f8 fe7d 	bl	8000c10 <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4b38      	ldr	r3, [pc, #224]	@ (8008000 <UART_SetConfig+0x4e4>)
 8007f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2264      	movs	r2, #100	@ 0x64
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	1acb      	subs	r3, r1, r3
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	3332      	adds	r3, #50	@ 0x32
 8007f30:	4a33      	ldr	r2, [pc, #204]	@ (8008000 <UART_SetConfig+0x4e4>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f3c:	441c      	add	r4, r3
 8007f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f42:	2200      	movs	r2, #0
 8007f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	464b      	mov	r3, r9
 8007f50:	1891      	adds	r1, r2, r2
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	415b      	adcs	r3, r3
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	1851      	adds	r1, r2, r1
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	4649      	mov	r1, r9
 8007f64:	414b      	adcs	r3, r1
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f74:	4659      	mov	r1, fp
 8007f76:	00cb      	lsls	r3, r1, #3
 8007f78:	4651      	mov	r1, sl
 8007f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7e:	4651      	mov	r1, sl
 8007f80:	00ca      	lsls	r2, r1, #3
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	4642      	mov	r2, r8
 8007f8a:	189b      	adds	r3, r3, r2
 8007f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f8e:	464b      	mov	r3, r9
 8007f90:	460a      	mov	r2, r1
 8007f92:	eb42 0303 	adc.w	r3, r2, r3
 8007f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	008b      	lsls	r3, r1, #2
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fba:	4641      	mov	r1, r8
 8007fbc:	008a      	lsls	r2, r1, #2
 8007fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fc2:	f7f8 fe25 	bl	8000c10 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <UART_SetConfig+0x4e4>)
 8007fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	2164      	movs	r1, #100	@ 0x64
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	3332      	adds	r3, #50	@ 0x32
 8007fde:	4a08      	ldr	r2, [pc, #32]	@ (8008000 <UART_SetConfig+0x4e4>)
 8007fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	f003 020f 	and.w	r2, r3, #15
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4422      	add	r2, r4
 8007ff2:	609a      	str	r2, [r3, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008000:	51eb851f 	.word	0x51eb851f

08008004 <malloc>:
 8008004:	4b02      	ldr	r3, [pc, #8]	@ (8008010 <malloc+0xc>)
 8008006:	4601      	mov	r1, r0
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	f000 b825 	b.w	8008058 <_malloc_r>
 800800e:	bf00      	nop
 8008010:	20000018 	.word	0x20000018

08008014 <sbrk_aligned>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	4e0f      	ldr	r6, [pc, #60]	@ (8008054 <sbrk_aligned+0x40>)
 8008018:	460c      	mov	r4, r1
 800801a:	6831      	ldr	r1, [r6, #0]
 800801c:	4605      	mov	r5, r0
 800801e:	b911      	cbnz	r1, 8008026 <sbrk_aligned+0x12>
 8008020:	f000 fada 	bl	80085d8 <_sbrk_r>
 8008024:	6030      	str	r0, [r6, #0]
 8008026:	4621      	mov	r1, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f000 fad5 	bl	80085d8 <_sbrk_r>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d103      	bne.n	800803a <sbrk_aligned+0x26>
 8008032:	f04f 34ff 	mov.w	r4, #4294967295
 8008036:	4620      	mov	r0, r4
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	1cc4      	adds	r4, r0, #3
 800803c:	f024 0403 	bic.w	r4, r4, #3
 8008040:	42a0      	cmp	r0, r4
 8008042:	d0f8      	beq.n	8008036 <sbrk_aligned+0x22>
 8008044:	1a21      	subs	r1, r4, r0
 8008046:	4628      	mov	r0, r5
 8008048:	f000 fac6 	bl	80085d8 <_sbrk_r>
 800804c:	3001      	adds	r0, #1
 800804e:	d1f2      	bne.n	8008036 <sbrk_aligned+0x22>
 8008050:	e7ef      	b.n	8008032 <sbrk_aligned+0x1e>
 8008052:	bf00      	nop
 8008054:	200003b8 	.word	0x200003b8

08008058 <_malloc_r>:
 8008058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800805c:	1ccd      	adds	r5, r1, #3
 800805e:	f025 0503 	bic.w	r5, r5, #3
 8008062:	3508      	adds	r5, #8
 8008064:	2d0c      	cmp	r5, #12
 8008066:	bf38      	it	cc
 8008068:	250c      	movcc	r5, #12
 800806a:	2d00      	cmp	r5, #0
 800806c:	4606      	mov	r6, r0
 800806e:	db01      	blt.n	8008074 <_malloc_r+0x1c>
 8008070:	42a9      	cmp	r1, r5
 8008072:	d904      	bls.n	800807e <_malloc_r+0x26>
 8008074:	230c      	movs	r3, #12
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	2000      	movs	r0, #0
 800807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008154 <_malloc_r+0xfc>
 8008082:	f000 f869 	bl	8008158 <__malloc_lock>
 8008086:	f8d8 3000 	ldr.w	r3, [r8]
 800808a:	461c      	mov	r4, r3
 800808c:	bb44      	cbnz	r4, 80080e0 <_malloc_r+0x88>
 800808e:	4629      	mov	r1, r5
 8008090:	4630      	mov	r0, r6
 8008092:	f7ff ffbf 	bl	8008014 <sbrk_aligned>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	4604      	mov	r4, r0
 800809a:	d158      	bne.n	800814e <_malloc_r+0xf6>
 800809c:	f8d8 4000 	ldr.w	r4, [r8]
 80080a0:	4627      	mov	r7, r4
 80080a2:	2f00      	cmp	r7, #0
 80080a4:	d143      	bne.n	800812e <_malloc_r+0xd6>
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	d04b      	beq.n	8008142 <_malloc_r+0xea>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	4639      	mov	r1, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	eb04 0903 	add.w	r9, r4, r3
 80080b4:	f000 fa90 	bl	80085d8 <_sbrk_r>
 80080b8:	4581      	cmp	r9, r0
 80080ba:	d142      	bne.n	8008142 <_malloc_r+0xea>
 80080bc:	6821      	ldr	r1, [r4, #0]
 80080be:	1a6d      	subs	r5, r5, r1
 80080c0:	4629      	mov	r1, r5
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ffa6 	bl	8008014 <sbrk_aligned>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d03a      	beq.n	8008142 <_malloc_r+0xea>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	442b      	add	r3, r5
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	f8d8 3000 	ldr.w	r3, [r8]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	bb62      	cbnz	r2, 8008134 <_malloc_r+0xdc>
 80080da:	f8c8 7000 	str.w	r7, [r8]
 80080de:	e00f      	b.n	8008100 <_malloc_r+0xa8>
 80080e0:	6822      	ldr	r2, [r4, #0]
 80080e2:	1b52      	subs	r2, r2, r5
 80080e4:	d420      	bmi.n	8008128 <_malloc_r+0xd0>
 80080e6:	2a0b      	cmp	r2, #11
 80080e8:	d917      	bls.n	800811a <_malloc_r+0xc2>
 80080ea:	1961      	adds	r1, r4, r5
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	6025      	str	r5, [r4, #0]
 80080f0:	bf18      	it	ne
 80080f2:	6059      	strne	r1, [r3, #4]
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	bf08      	it	eq
 80080f8:	f8c8 1000 	streq.w	r1, [r8]
 80080fc:	5162      	str	r2, [r4, r5]
 80080fe:	604b      	str	r3, [r1, #4]
 8008100:	4630      	mov	r0, r6
 8008102:	f000 f82f 	bl	8008164 <__malloc_unlock>
 8008106:	f104 000b 	add.w	r0, r4, #11
 800810a:	1d23      	adds	r3, r4, #4
 800810c:	f020 0007 	bic.w	r0, r0, #7
 8008110:	1ac2      	subs	r2, r0, r3
 8008112:	bf1c      	itt	ne
 8008114:	1a1b      	subne	r3, r3, r0
 8008116:	50a3      	strne	r3, [r4, r2]
 8008118:	e7af      	b.n	800807a <_malloc_r+0x22>
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	42a3      	cmp	r3, r4
 800811e:	bf0c      	ite	eq
 8008120:	f8c8 2000 	streq.w	r2, [r8]
 8008124:	605a      	strne	r2, [r3, #4]
 8008126:	e7eb      	b.n	8008100 <_malloc_r+0xa8>
 8008128:	4623      	mov	r3, r4
 800812a:	6864      	ldr	r4, [r4, #4]
 800812c:	e7ae      	b.n	800808c <_malloc_r+0x34>
 800812e:	463c      	mov	r4, r7
 8008130:	687f      	ldr	r7, [r7, #4]
 8008132:	e7b6      	b.n	80080a2 <_malloc_r+0x4a>
 8008134:	461a      	mov	r2, r3
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	42a3      	cmp	r3, r4
 800813a:	d1fb      	bne.n	8008134 <_malloc_r+0xdc>
 800813c:	2300      	movs	r3, #0
 800813e:	6053      	str	r3, [r2, #4]
 8008140:	e7de      	b.n	8008100 <_malloc_r+0xa8>
 8008142:	230c      	movs	r3, #12
 8008144:	6033      	str	r3, [r6, #0]
 8008146:	4630      	mov	r0, r6
 8008148:	f000 f80c 	bl	8008164 <__malloc_unlock>
 800814c:	e794      	b.n	8008078 <_malloc_r+0x20>
 800814e:	6005      	str	r5, [r0, #0]
 8008150:	e7d6      	b.n	8008100 <_malloc_r+0xa8>
 8008152:	bf00      	nop
 8008154:	200003bc 	.word	0x200003bc

08008158 <__malloc_lock>:
 8008158:	4801      	ldr	r0, [pc, #4]	@ (8008160 <__malloc_lock+0x8>)
 800815a:	f000 ba8a 	b.w	8008672 <__retarget_lock_acquire_recursive>
 800815e:	bf00      	nop
 8008160:	20000500 	.word	0x20000500

08008164 <__malloc_unlock>:
 8008164:	4801      	ldr	r0, [pc, #4]	@ (800816c <__malloc_unlock+0x8>)
 8008166:	f000 ba85 	b.w	8008674 <__retarget_lock_release_recursive>
 800816a:	bf00      	nop
 800816c:	20000500 	.word	0x20000500

08008170 <std>:
 8008170:	2300      	movs	r3, #0
 8008172:	b510      	push	{r4, lr}
 8008174:	4604      	mov	r4, r0
 8008176:	e9c0 3300 	strd	r3, r3, [r0]
 800817a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800817e:	6083      	str	r3, [r0, #8]
 8008180:	8181      	strh	r1, [r0, #12]
 8008182:	6643      	str	r3, [r0, #100]	@ 0x64
 8008184:	81c2      	strh	r2, [r0, #14]
 8008186:	6183      	str	r3, [r0, #24]
 8008188:	4619      	mov	r1, r3
 800818a:	2208      	movs	r2, #8
 800818c:	305c      	adds	r0, #92	@ 0x5c
 800818e:	f000 f9e7 	bl	8008560 <memset>
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x58>)
 8008194:	6263      	str	r3, [r4, #36]	@ 0x24
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x5c>)
 8008198:	62a3      	str	r3, [r4, #40]	@ 0x28
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x60>)
 800819c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x64>)
 80081a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <std+0x68>)
 80081a4:	6224      	str	r4, [r4, #32]
 80081a6:	429c      	cmp	r4, r3
 80081a8:	d006      	beq.n	80081b8 <std+0x48>
 80081aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081ae:	4294      	cmp	r4, r2
 80081b0:	d002      	beq.n	80081b8 <std+0x48>
 80081b2:	33d0      	adds	r3, #208	@ 0xd0
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d105      	bne.n	80081c4 <std+0x54>
 80081b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c0:	f000 ba56 	b.w	8008670 <__retarget_lock_init_recursive>
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	bf00      	nop
 80081c8:	080083b1 	.word	0x080083b1
 80081cc:	080083d3 	.word	0x080083d3
 80081d0:	0800840b 	.word	0x0800840b
 80081d4:	0800842f 	.word	0x0800842f
 80081d8:	200003c0 	.word	0x200003c0

080081dc <stdio_exit_handler>:
 80081dc:	4a02      	ldr	r2, [pc, #8]	@ (80081e8 <stdio_exit_handler+0xc>)
 80081de:	4903      	ldr	r1, [pc, #12]	@ (80081ec <stdio_exit_handler+0x10>)
 80081e0:	4803      	ldr	r0, [pc, #12]	@ (80081f0 <stdio_exit_handler+0x14>)
 80081e2:	f000 b869 	b.w	80082b8 <_fwalk_sglue>
 80081e6:	bf00      	nop
 80081e8:	2000000c 	.word	0x2000000c
 80081ec:	08008815 	.word	0x08008815
 80081f0:	2000001c 	.word	0x2000001c

080081f4 <cleanup_stdio>:
 80081f4:	6841      	ldr	r1, [r0, #4]
 80081f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <cleanup_stdio+0x34>)
 80081f8:	4299      	cmp	r1, r3
 80081fa:	b510      	push	{r4, lr}
 80081fc:	4604      	mov	r4, r0
 80081fe:	d001      	beq.n	8008204 <cleanup_stdio+0x10>
 8008200:	f000 fb08 	bl	8008814 <_fflush_r>
 8008204:	68a1      	ldr	r1, [r4, #8]
 8008206:	4b09      	ldr	r3, [pc, #36]	@ (800822c <cleanup_stdio+0x38>)
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <cleanup_stdio+0x1e>
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fb01 	bl	8008814 <_fflush_r>
 8008212:	68e1      	ldr	r1, [r4, #12]
 8008214:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <cleanup_stdio+0x3c>)
 8008216:	4299      	cmp	r1, r3
 8008218:	d004      	beq.n	8008224 <cleanup_stdio+0x30>
 800821a:	4620      	mov	r0, r4
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f000 baf8 	b.w	8008814 <_fflush_r>
 8008224:	bd10      	pop	{r4, pc}
 8008226:	bf00      	nop
 8008228:	200003c0 	.word	0x200003c0
 800822c:	20000428 	.word	0x20000428
 8008230:	20000490 	.word	0x20000490

08008234 <global_stdio_init.part.0>:
 8008234:	b510      	push	{r4, lr}
 8008236:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <global_stdio_init.part.0+0x30>)
 8008238:	4c0b      	ldr	r4, [pc, #44]	@ (8008268 <global_stdio_init.part.0+0x34>)
 800823a:	4a0c      	ldr	r2, [pc, #48]	@ (800826c <global_stdio_init.part.0+0x38>)
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	4620      	mov	r0, r4
 8008240:	2200      	movs	r2, #0
 8008242:	2104      	movs	r1, #4
 8008244:	f7ff ff94 	bl	8008170 <std>
 8008248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800824c:	2201      	movs	r2, #1
 800824e:	2109      	movs	r1, #9
 8008250:	f7ff ff8e 	bl	8008170 <std>
 8008254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008258:	2202      	movs	r2, #2
 800825a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800825e:	2112      	movs	r1, #18
 8008260:	f7ff bf86 	b.w	8008170 <std>
 8008264:	200004f8 	.word	0x200004f8
 8008268:	200003c0 	.word	0x200003c0
 800826c:	080081dd 	.word	0x080081dd

08008270 <__sfp_lock_acquire>:
 8008270:	4801      	ldr	r0, [pc, #4]	@ (8008278 <__sfp_lock_acquire+0x8>)
 8008272:	f000 b9fe 	b.w	8008672 <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	20000501 	.word	0x20000501

0800827c <__sfp_lock_release>:
 800827c:	4801      	ldr	r0, [pc, #4]	@ (8008284 <__sfp_lock_release+0x8>)
 800827e:	f000 b9f9 	b.w	8008674 <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	20000501 	.word	0x20000501

08008288 <__sinit>:
 8008288:	b510      	push	{r4, lr}
 800828a:	4604      	mov	r4, r0
 800828c:	f7ff fff0 	bl	8008270 <__sfp_lock_acquire>
 8008290:	6a23      	ldr	r3, [r4, #32]
 8008292:	b11b      	cbz	r3, 800829c <__sinit+0x14>
 8008294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008298:	f7ff bff0 	b.w	800827c <__sfp_lock_release>
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <__sinit+0x28>)
 800829e:	6223      	str	r3, [r4, #32]
 80082a0:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <__sinit+0x2c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f5      	bne.n	8008294 <__sinit+0xc>
 80082a8:	f7ff ffc4 	bl	8008234 <global_stdio_init.part.0>
 80082ac:	e7f2      	b.n	8008294 <__sinit+0xc>
 80082ae:	bf00      	nop
 80082b0:	080081f5 	.word	0x080081f5
 80082b4:	200004f8 	.word	0x200004f8

080082b8 <_fwalk_sglue>:
 80082b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4607      	mov	r7, r0
 80082be:	4688      	mov	r8, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	2600      	movs	r6, #0
 80082c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c8:	f1b9 0901 	subs.w	r9, r9, #1
 80082cc:	d505      	bpl.n	80082da <_fwalk_sglue+0x22>
 80082ce:	6824      	ldr	r4, [r4, #0]
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	d1f7      	bne.n	80082c4 <_fwalk_sglue+0xc>
 80082d4:	4630      	mov	r0, r6
 80082d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d907      	bls.n	80082f0 <_fwalk_sglue+0x38>
 80082e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082e4:	3301      	adds	r3, #1
 80082e6:	d003      	beq.n	80082f0 <_fwalk_sglue+0x38>
 80082e8:	4629      	mov	r1, r5
 80082ea:	4638      	mov	r0, r7
 80082ec:	47c0      	blx	r8
 80082ee:	4306      	orrs	r6, r0
 80082f0:	3568      	adds	r5, #104	@ 0x68
 80082f2:	e7e9      	b.n	80082c8 <_fwalk_sglue+0x10>

080082f4 <_puts_r>:
 80082f4:	6a03      	ldr	r3, [r0, #32]
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	6884      	ldr	r4, [r0, #8]
 80082fa:	4605      	mov	r5, r0
 80082fc:	460e      	mov	r6, r1
 80082fe:	b90b      	cbnz	r3, 8008304 <_puts_r+0x10>
 8008300:	f7ff ffc2 	bl	8008288 <__sinit>
 8008304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d405      	bmi.n	8008316 <_puts_r+0x22>
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	0598      	lsls	r0, r3, #22
 800830e:	d402      	bmi.n	8008316 <_puts_r+0x22>
 8008310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008312:	f000 f9ae 	bl	8008672 <__retarget_lock_acquire_recursive>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	0719      	lsls	r1, r3, #28
 800831a:	d502      	bpl.n	8008322 <_puts_r+0x2e>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d135      	bne.n	800838e <_puts_r+0x9a>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f8c5 	bl	80084b4 <__swsetup_r>
 800832a:	b380      	cbz	r0, 800838e <_puts_r+0x9a>
 800832c:	f04f 35ff 	mov.w	r5, #4294967295
 8008330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008332:	07da      	lsls	r2, r3, #31
 8008334:	d405      	bmi.n	8008342 <_puts_r+0x4e>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	059b      	lsls	r3, r3, #22
 800833a:	d402      	bmi.n	8008342 <_puts_r+0x4e>
 800833c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800833e:	f000 f999 	bl	8008674 <__retarget_lock_release_recursive>
 8008342:	4628      	mov	r0, r5
 8008344:	bd70      	pop	{r4, r5, r6, pc}
 8008346:	2b00      	cmp	r3, #0
 8008348:	da04      	bge.n	8008354 <_puts_r+0x60>
 800834a:	69a2      	ldr	r2, [r4, #24]
 800834c:	429a      	cmp	r2, r3
 800834e:	dc17      	bgt.n	8008380 <_puts_r+0x8c>
 8008350:	290a      	cmp	r1, #10
 8008352:	d015      	beq.n	8008380 <_puts_r+0x8c>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	7019      	strb	r1, [r3, #0]
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008362:	3b01      	subs	r3, #1
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	2900      	cmp	r1, #0
 8008368:	d1ed      	bne.n	8008346 <_puts_r+0x52>
 800836a:	2b00      	cmp	r3, #0
 800836c:	da11      	bge.n	8008392 <_puts_r+0x9e>
 800836e:	4622      	mov	r2, r4
 8008370:	210a      	movs	r1, #10
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f85f 	bl	8008436 <__swbuf_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d0d7      	beq.n	800832c <_puts_r+0x38>
 800837c:	250a      	movs	r5, #10
 800837e:	e7d7      	b.n	8008330 <_puts_r+0x3c>
 8008380:	4622      	mov	r2, r4
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f857 	bl	8008436 <__swbuf_r>
 8008388:	3001      	adds	r0, #1
 800838a:	d1e7      	bne.n	800835c <_puts_r+0x68>
 800838c:	e7ce      	b.n	800832c <_puts_r+0x38>
 800838e:	3e01      	subs	r6, #1
 8008390:	e7e4      	b.n	800835c <_puts_r+0x68>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	6022      	str	r2, [r4, #0]
 8008398:	220a      	movs	r2, #10
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e7ee      	b.n	800837c <_puts_r+0x88>
	...

080083a0 <puts>:
 80083a0:	4b02      	ldr	r3, [pc, #8]	@ (80083ac <puts+0xc>)
 80083a2:	4601      	mov	r1, r0
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	f7ff bfa5 	b.w	80082f4 <_puts_r>
 80083aa:	bf00      	nop
 80083ac:	20000018 	.word	0x20000018

080083b0 <__sread>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	460c      	mov	r4, r1
 80083b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b8:	f000 f8fc 	bl	80085b4 <_read_r>
 80083bc:	2800      	cmp	r0, #0
 80083be:	bfab      	itete	ge
 80083c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083c2:	89a3      	ldrhlt	r3, [r4, #12]
 80083c4:	181b      	addge	r3, r3, r0
 80083c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ca:	bfac      	ite	ge
 80083cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ce:	81a3      	strhlt	r3, [r4, #12]
 80083d0:	bd10      	pop	{r4, pc}

080083d2 <__swrite>:
 80083d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d6:	461f      	mov	r7, r3
 80083d8:	898b      	ldrh	r3, [r1, #12]
 80083da:	05db      	lsls	r3, r3, #23
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	4616      	mov	r6, r2
 80083e2:	d505      	bpl.n	80083f0 <__swrite+0x1e>
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2302      	movs	r3, #2
 80083ea:	2200      	movs	r2, #0
 80083ec:	f000 f8d0 	bl	8008590 <_lseek_r>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	4632      	mov	r2, r6
 80083fe:	463b      	mov	r3, r7
 8008400:	4628      	mov	r0, r5
 8008402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008406:	f000 b8f7 	b.w	80085f8 <_write_r>

0800840a <__sseek>:
 800840a:	b510      	push	{r4, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008412:	f000 f8bd 	bl	8008590 <_lseek_r>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	bf15      	itete	ne
 800841c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800841e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008426:	81a3      	strheq	r3, [r4, #12]
 8008428:	bf18      	it	ne
 800842a:	81a3      	strhne	r3, [r4, #12]
 800842c:	bd10      	pop	{r4, pc}

0800842e <__sclose>:
 800842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008432:	f000 b89d 	b.w	8008570 <_close_r>

08008436 <__swbuf_r>:
 8008436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008438:	460e      	mov	r6, r1
 800843a:	4614      	mov	r4, r2
 800843c:	4605      	mov	r5, r0
 800843e:	b118      	cbz	r0, 8008448 <__swbuf_r+0x12>
 8008440:	6a03      	ldr	r3, [r0, #32]
 8008442:	b90b      	cbnz	r3, 8008448 <__swbuf_r+0x12>
 8008444:	f7ff ff20 	bl	8008288 <__sinit>
 8008448:	69a3      	ldr	r3, [r4, #24]
 800844a:	60a3      	str	r3, [r4, #8]
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	071a      	lsls	r2, r3, #28
 8008450:	d501      	bpl.n	8008456 <__swbuf_r+0x20>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	b943      	cbnz	r3, 8008468 <__swbuf_r+0x32>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 f82b 	bl	80084b4 <__swsetup_r>
 800845e:	b118      	cbz	r0, 8008468 <__swbuf_r+0x32>
 8008460:	f04f 37ff 	mov.w	r7, #4294967295
 8008464:	4638      	mov	r0, r7
 8008466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	6922      	ldr	r2, [r4, #16]
 800846c:	1a98      	subs	r0, r3, r2
 800846e:	6963      	ldr	r3, [r4, #20]
 8008470:	b2f6      	uxtb	r6, r6
 8008472:	4283      	cmp	r3, r0
 8008474:	4637      	mov	r7, r6
 8008476:	dc05      	bgt.n	8008484 <__swbuf_r+0x4e>
 8008478:	4621      	mov	r1, r4
 800847a:	4628      	mov	r0, r5
 800847c:	f000 f9ca 	bl	8008814 <_fflush_r>
 8008480:	2800      	cmp	r0, #0
 8008482:	d1ed      	bne.n	8008460 <__swbuf_r+0x2a>
 8008484:	68a3      	ldr	r3, [r4, #8]
 8008486:	3b01      	subs	r3, #1
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	6022      	str	r2, [r4, #0]
 8008490:	701e      	strb	r6, [r3, #0]
 8008492:	6962      	ldr	r2, [r4, #20]
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	429a      	cmp	r2, r3
 8008498:	d004      	beq.n	80084a4 <__swbuf_r+0x6e>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	07db      	lsls	r3, r3, #31
 800849e:	d5e1      	bpl.n	8008464 <__swbuf_r+0x2e>
 80084a0:	2e0a      	cmp	r6, #10
 80084a2:	d1df      	bne.n	8008464 <__swbuf_r+0x2e>
 80084a4:	4621      	mov	r1, r4
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f9b4 	bl	8008814 <_fflush_r>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d0d9      	beq.n	8008464 <__swbuf_r+0x2e>
 80084b0:	e7d6      	b.n	8008460 <__swbuf_r+0x2a>
	...

080084b4 <__swsetup_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4b29      	ldr	r3, [pc, #164]	@ (800855c <__swsetup_r+0xa8>)
 80084b8:	4605      	mov	r5, r0
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	460c      	mov	r4, r1
 80084be:	b118      	cbz	r0, 80084c8 <__swsetup_r+0x14>
 80084c0:	6a03      	ldr	r3, [r0, #32]
 80084c2:	b90b      	cbnz	r3, 80084c8 <__swsetup_r+0x14>
 80084c4:	f7ff fee0 	bl	8008288 <__sinit>
 80084c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084cc:	0719      	lsls	r1, r3, #28
 80084ce:	d422      	bmi.n	8008516 <__swsetup_r+0x62>
 80084d0:	06da      	lsls	r2, r3, #27
 80084d2:	d407      	bmi.n	80084e4 <__swsetup_r+0x30>
 80084d4:	2209      	movs	r2, #9
 80084d6:	602a      	str	r2, [r5, #0]
 80084d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	e033      	b.n	800854c <__swsetup_r+0x98>
 80084e4:	0758      	lsls	r0, r3, #29
 80084e6:	d512      	bpl.n	800850e <__swsetup_r+0x5a>
 80084e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ea:	b141      	cbz	r1, 80084fe <__swsetup_r+0x4a>
 80084ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <__swsetup_r+0x46>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f8bf 	bl	8008678 <_free_r>
 80084fa:	2300      	movs	r3, #0
 80084fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	2300      	movs	r3, #0
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f043 0308 	orr.w	r3, r3, #8
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	b94b      	cbnz	r3, 800852e <__swsetup_r+0x7a>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d003      	beq.n	800852e <__swsetup_r+0x7a>
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f000 f9c1 	bl	80088b0 <__smakebuf_r>
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	f013 0201 	ands.w	r2, r3, #1
 8008536:	d00a      	beq.n	800854e <__swsetup_r+0x9a>
 8008538:	2200      	movs	r2, #0
 800853a:	60a2      	str	r2, [r4, #8]
 800853c:	6962      	ldr	r2, [r4, #20]
 800853e:	4252      	negs	r2, r2
 8008540:	61a2      	str	r2, [r4, #24]
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	b942      	cbnz	r2, 8008558 <__swsetup_r+0xa4>
 8008546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800854a:	d1c5      	bne.n	80084d8 <__swsetup_r+0x24>
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	0799      	lsls	r1, r3, #30
 8008550:	bf58      	it	pl
 8008552:	6962      	ldrpl	r2, [r4, #20]
 8008554:	60a2      	str	r2, [r4, #8]
 8008556:	e7f4      	b.n	8008542 <__swsetup_r+0x8e>
 8008558:	2000      	movs	r0, #0
 800855a:	e7f7      	b.n	800854c <__swsetup_r+0x98>
 800855c:	20000018 	.word	0x20000018

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_close_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d06      	ldr	r5, [pc, #24]	@ (800858c <_close_r+0x1c>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	f7fb fdcd 	bl	800411a <_close>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_close_r+0x1a>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_close_r+0x1a>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	200004fc 	.word	0x200004fc

08008590 <_lseek_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	@ (80085b0 <_lseek_r+0x20>)
 8008594:	4604      	mov	r4, r0
 8008596:	4608      	mov	r0, r1
 8008598:	4611      	mov	r1, r2
 800859a:	2200      	movs	r2, #0
 800859c:	602a      	str	r2, [r5, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	f7fb fde2 	bl	8004168 <_lseek>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_lseek_r+0x1e>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_lseek_r+0x1e>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	200004fc 	.word	0x200004fc

080085b4 <_read_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	@ (80085d4 <_read_r+0x20>)
 80085b8:	4604      	mov	r4, r0
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f7fb fd70 	bl	80040a8 <_read>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_read_r+0x1e>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_read_r+0x1e>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	200004fc 	.word	0x200004fc

080085d8 <_sbrk_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d06      	ldr	r5, [pc, #24]	@ (80085f4 <_sbrk_r+0x1c>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7fb fdce 	bl	8004184 <_sbrk>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_sbrk_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_sbrk_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	200004fc 	.word	0x200004fc

080085f8 <_write_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d07      	ldr	r5, [pc, #28]	@ (8008618 <_write_r+0x20>)
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
 8008600:	4611      	mov	r1, r2
 8008602:	2200      	movs	r2, #0
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f7fb fd6b 	bl	80040e2 <_write>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_write_r+0x1e>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_write_r+0x1e>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	200004fc 	.word	0x200004fc

0800861c <__errno>:
 800861c:	4b01      	ldr	r3, [pc, #4]	@ (8008624 <__errno+0x8>)
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000018 	.word	0x20000018

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4d0d      	ldr	r5, [pc, #52]	@ (8008660 <__libc_init_array+0x38>)
 800862c:	4c0d      	ldr	r4, [pc, #52]	@ (8008664 <__libc_init_array+0x3c>)
 800862e:	1b64      	subs	r4, r4, r5
 8008630:	10a4      	asrs	r4, r4, #2
 8008632:	2600      	movs	r6, #0
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	4d0b      	ldr	r5, [pc, #44]	@ (8008668 <__libc_init_array+0x40>)
 800863a:	4c0c      	ldr	r4, [pc, #48]	@ (800866c <__libc_init_array+0x44>)
 800863c:	f002 fe18 	bl	800b270 <_init>
 8008640:	1b64      	subs	r4, r4, r5
 8008642:	10a4      	asrs	r4, r4, #2
 8008644:	2600      	movs	r6, #0
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	0800b558 	.word	0x0800b558
 8008664:	0800b558 	.word	0x0800b558
 8008668:	0800b558 	.word	0x0800b558
 800866c:	0800b55c 	.word	0x0800b55c

08008670 <__retarget_lock_init_recursive>:
 8008670:	4770      	bx	lr

08008672 <__retarget_lock_acquire_recursive>:
 8008672:	4770      	bx	lr

08008674 <__retarget_lock_release_recursive>:
 8008674:	4770      	bx	lr
	...

08008678 <_free_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4605      	mov	r5, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	d041      	beq.n	8008704 <_free_r+0x8c>
 8008680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008684:	1f0c      	subs	r4, r1, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb8      	it	lt
 800868a:	18e4      	addlt	r4, r4, r3
 800868c:	f7ff fd64 	bl	8008158 <__malloc_lock>
 8008690:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <_free_r+0x90>)
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x2c>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	4628      	mov	r0, r5
 800869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a0:	f7ff bd60 	b.w	8008164 <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x42>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1809      	addeq	r1, r1, r0
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x1e>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x4c>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x42>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1850      	adds	r0, r2, r1
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x6c>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	4401      	add	r1, r0
 80086d0:	1850      	adds	r0, r2, r1
 80086d2:	4283      	cmp	r3, r0
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x22>
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6053      	str	r3, [r2, #4]
 80086de:	4408      	add	r0, r1
 80086e0:	6010      	str	r0, [r2, #0]
 80086e2:	e7da      	b.n	800869a <_free_r+0x22>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x74>
 80086e6:	230c      	movs	r3, #12
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x22>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	1821      	adds	r1, r4, r0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf04      	itt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	bf04      	itt	eq
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7ca      	b.n	800869a <_free_r+0x22>
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	bf00      	nop
 8008708:	200003bc 	.word	0x200003bc

0800870c <__sflush_r>:
 800870c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008714:	0716      	lsls	r6, r2, #28
 8008716:	4605      	mov	r5, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d454      	bmi.n	80087c6 <__sflush_r+0xba>
 800871c:	684b      	ldr	r3, [r1, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dc02      	bgt.n	8008728 <__sflush_r+0x1c>
 8008722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd48      	ble.n	80087ba <__sflush_r+0xae>
 8008728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800872a:	2e00      	cmp	r6, #0
 800872c:	d045      	beq.n	80087ba <__sflush_r+0xae>
 800872e:	2300      	movs	r3, #0
 8008730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008734:	682f      	ldr	r7, [r5, #0]
 8008736:	6a21      	ldr	r1, [r4, #32]
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	d030      	beq.n	800879e <__sflush_r+0x92>
 800873c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	0759      	lsls	r1, r3, #29
 8008742:	d505      	bpl.n	8008750 <__sflush_r+0x44>
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800874a:	b10b      	cbz	r3, 8008750 <__sflush_r+0x44>
 800874c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	2300      	movs	r3, #0
 8008752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	4628      	mov	r0, r5
 8008758:	47b0      	blx	r6
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	d106      	bne.n	800876e <__sflush_r+0x62>
 8008760:	6829      	ldr	r1, [r5, #0]
 8008762:	291d      	cmp	r1, #29
 8008764:	d82b      	bhi.n	80087be <__sflush_r+0xb2>
 8008766:	4a2a      	ldr	r2, [pc, #168]	@ (8008810 <__sflush_r+0x104>)
 8008768:	410a      	asrs	r2, r1
 800876a:	07d6      	lsls	r6, r2, #31
 800876c:	d427      	bmi.n	80087be <__sflush_r+0xb2>
 800876e:	2200      	movs	r2, #0
 8008770:	6062      	str	r2, [r4, #4]
 8008772:	04d9      	lsls	r1, r3, #19
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	6022      	str	r2, [r4, #0]
 8008778:	d504      	bpl.n	8008784 <__sflush_r+0x78>
 800877a:	1c42      	adds	r2, r0, #1
 800877c:	d101      	bne.n	8008782 <__sflush_r+0x76>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b903      	cbnz	r3, 8008784 <__sflush_r+0x78>
 8008782:	6560      	str	r0, [r4, #84]	@ 0x54
 8008784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008786:	602f      	str	r7, [r5, #0]
 8008788:	b1b9      	cbz	r1, 80087ba <__sflush_r+0xae>
 800878a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800878e:	4299      	cmp	r1, r3
 8008790:	d002      	beq.n	8008798 <__sflush_r+0x8c>
 8008792:	4628      	mov	r0, r5
 8008794:	f7ff ff70 	bl	8008678 <_free_r>
 8008798:	2300      	movs	r3, #0
 800879a:	6363      	str	r3, [r4, #52]	@ 0x34
 800879c:	e00d      	b.n	80087ba <__sflush_r+0xae>
 800879e:	2301      	movs	r3, #1
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b0      	blx	r6
 80087a4:	4602      	mov	r2, r0
 80087a6:	1c50      	adds	r0, r2, #1
 80087a8:	d1c9      	bne.n	800873e <__sflush_r+0x32>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0c6      	beq.n	800873e <__sflush_r+0x32>
 80087b0:	2b1d      	cmp	r3, #29
 80087b2:	d001      	beq.n	80087b8 <__sflush_r+0xac>
 80087b4:	2b16      	cmp	r3, #22
 80087b6:	d11e      	bne.n	80087f6 <__sflush_r+0xea>
 80087b8:	602f      	str	r7, [r5, #0]
 80087ba:	2000      	movs	r0, #0
 80087bc:	e022      	b.n	8008804 <__sflush_r+0xf8>
 80087be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	e01b      	b.n	80087fe <__sflush_r+0xf2>
 80087c6:	690f      	ldr	r7, [r1, #16]
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	d0f6      	beq.n	80087ba <__sflush_r+0xae>
 80087cc:	0793      	lsls	r3, r2, #30
 80087ce:	680e      	ldr	r6, [r1, #0]
 80087d0:	bf08      	it	eq
 80087d2:	694b      	ldreq	r3, [r1, #20]
 80087d4:	600f      	str	r7, [r1, #0]
 80087d6:	bf18      	it	ne
 80087d8:	2300      	movne	r3, #0
 80087da:	eba6 0807 	sub.w	r8, r6, r7
 80087de:	608b      	str	r3, [r1, #8]
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	dde9      	ble.n	80087ba <__sflush_r+0xae>
 80087e6:	6a21      	ldr	r1, [r4, #32]
 80087e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087ea:	4643      	mov	r3, r8
 80087ec:	463a      	mov	r2, r7
 80087ee:	4628      	mov	r0, r5
 80087f0:	47b0      	blx	r6
 80087f2:	2800      	cmp	r0, #0
 80087f4:	dc08      	bgt.n	8008808 <__sflush_r+0xfc>
 80087f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	4407      	add	r7, r0
 800880a:	eba8 0800 	sub.w	r8, r8, r0
 800880e:	e7e7      	b.n	80087e0 <__sflush_r+0xd4>
 8008810:	dfbffffe 	.word	0xdfbffffe

08008814 <_fflush_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	690b      	ldr	r3, [r1, #16]
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
 800881c:	b913      	cbnz	r3, 8008824 <_fflush_r+0x10>
 800881e:	2500      	movs	r5, #0
 8008820:	4628      	mov	r0, r5
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	b118      	cbz	r0, 800882e <_fflush_r+0x1a>
 8008826:	6a03      	ldr	r3, [r0, #32]
 8008828:	b90b      	cbnz	r3, 800882e <_fflush_r+0x1a>
 800882a:	f7ff fd2d 	bl	8008288 <__sinit>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f3      	beq.n	800881e <_fflush_r+0xa>
 8008836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008838:	07d0      	lsls	r0, r2, #31
 800883a:	d404      	bmi.n	8008846 <_fflush_r+0x32>
 800883c:	0599      	lsls	r1, r3, #22
 800883e:	d402      	bmi.n	8008846 <_fflush_r+0x32>
 8008840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008842:	f7ff ff16 	bl	8008672 <__retarget_lock_acquire_recursive>
 8008846:	4628      	mov	r0, r5
 8008848:	4621      	mov	r1, r4
 800884a:	f7ff ff5f 	bl	800870c <__sflush_r>
 800884e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008850:	07da      	lsls	r2, r3, #31
 8008852:	4605      	mov	r5, r0
 8008854:	d4e4      	bmi.n	8008820 <_fflush_r+0xc>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	059b      	lsls	r3, r3, #22
 800885a:	d4e1      	bmi.n	8008820 <_fflush_r+0xc>
 800885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885e:	f7ff ff09 	bl	8008674 <__retarget_lock_release_recursive>
 8008862:	e7dd      	b.n	8008820 <_fflush_r+0xc>

08008864 <__swhatbuf_r>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	2900      	cmp	r1, #0
 800886e:	b096      	sub	sp, #88	@ 0x58
 8008870:	4615      	mov	r5, r2
 8008872:	461e      	mov	r6, r3
 8008874:	da0d      	bge.n	8008892 <__swhatbuf_r+0x2e>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800887c:	f04f 0100 	mov.w	r1, #0
 8008880:	bf14      	ite	ne
 8008882:	2340      	movne	r3, #64	@ 0x40
 8008884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008888:	2000      	movs	r0, #0
 800888a:	6031      	str	r1, [r6, #0]
 800888c:	602b      	str	r3, [r5, #0]
 800888e:	b016      	add	sp, #88	@ 0x58
 8008890:	bd70      	pop	{r4, r5, r6, pc}
 8008892:	466a      	mov	r2, sp
 8008894:	f000 f848 	bl	8008928 <_fstat_r>
 8008898:	2800      	cmp	r0, #0
 800889a:	dbec      	blt.n	8008876 <__swhatbuf_r+0x12>
 800889c:	9901      	ldr	r1, [sp, #4]
 800889e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088a6:	4259      	negs	r1, r3
 80088a8:	4159      	adcs	r1, r3
 80088aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088ae:	e7eb      	b.n	8008888 <__swhatbuf_r+0x24>

080088b0 <__smakebuf_r>:
 80088b0:	898b      	ldrh	r3, [r1, #12]
 80088b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b4:	079d      	lsls	r5, r3, #30
 80088b6:	4606      	mov	r6, r0
 80088b8:	460c      	mov	r4, r1
 80088ba:	d507      	bpl.n	80088cc <__smakebuf_r+0x1c>
 80088bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	2301      	movs	r3, #1
 80088c6:	6163      	str	r3, [r4, #20]
 80088c8:	b003      	add	sp, #12
 80088ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088cc:	ab01      	add	r3, sp, #4
 80088ce:	466a      	mov	r2, sp
 80088d0:	f7ff ffc8 	bl	8008864 <__swhatbuf_r>
 80088d4:	9f00      	ldr	r7, [sp, #0]
 80088d6:	4605      	mov	r5, r0
 80088d8:	4639      	mov	r1, r7
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff fbbc 	bl	8008058 <_malloc_r>
 80088e0:	b948      	cbnz	r0, 80088f6 <__smakebuf_r+0x46>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	059a      	lsls	r2, r3, #22
 80088e8:	d4ee      	bmi.n	80088c8 <__smakebuf_r+0x18>
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	f043 0302 	orr.w	r3, r3, #2
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	e7e2      	b.n	80088bc <__smakebuf_r+0xc>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	6020      	str	r0, [r4, #0]
 80088fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008906:	b15b      	cbz	r3, 8008920 <__smakebuf_r+0x70>
 8008908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800890c:	4630      	mov	r0, r6
 800890e:	f000 f81d 	bl	800894c <_isatty_r>
 8008912:	b128      	cbz	r0, 8008920 <__smakebuf_r+0x70>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	431d      	orrs	r5, r3
 8008924:	81a5      	strh	r5, [r4, #12]
 8008926:	e7cf      	b.n	80088c8 <__smakebuf_r+0x18>

08008928 <_fstat_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d07      	ldr	r5, [pc, #28]	@ (8008948 <_fstat_r+0x20>)
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	4611      	mov	r1, r2
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f7fb fbfc 	bl	8004132 <_fstat>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d102      	bne.n	8008944 <_fstat_r+0x1c>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b103      	cbz	r3, 8008944 <_fstat_r+0x1c>
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	bf00      	nop
 8008948:	200004fc 	.word	0x200004fc

0800894c <_isatty_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	@ (8008968 <_isatty_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7fb fbfb 	bl	8004152 <_isatty>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_isatty_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_isatty_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	200004fc 	.word	0x200004fc

0800896c <acos>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	ed2d 8b02 	vpush	{d8}
 8008972:	ec55 4b10 	vmov	r4, r5, d0
 8008976:	f000 fbef 	bl	8009158 <__ieee754_acos>
 800897a:	4622      	mov	r2, r4
 800897c:	462b      	mov	r3, r5
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	eeb0 8a40 	vmov.f32	s16, s0
 8008986:	eef0 8a60 	vmov.f32	s17, s1
 800898a:	f7f8 f893 	bl	8000ab4 <__aeabi_dcmpun>
 800898e:	b9a8      	cbnz	r0, 80089bc <acos+0x50>
 8008990:	ec45 4b10 	vmov	d0, r4, r5
 8008994:	f000 f910 	bl	8008bb8 <fabs>
 8008998:	4b0c      	ldr	r3, [pc, #48]	@ (80089cc <acos+0x60>)
 800899a:	ec51 0b10 	vmov	r0, r1, d0
 800899e:	2200      	movs	r2, #0
 80089a0:	f7f8 f87e 	bl	8000aa0 <__aeabi_dcmpgt>
 80089a4:	b150      	cbz	r0, 80089bc <acos+0x50>
 80089a6:	f7ff fe39 	bl	800861c <__errno>
 80089aa:	ecbd 8b02 	vpop	{d8}
 80089ae:	2321      	movs	r3, #33	@ 0x21
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089b6:	4806      	ldr	r0, [pc, #24]	@ (80089d0 <acos+0x64>)
 80089b8:	f000 b966 	b.w	8008c88 <nan>
 80089bc:	eeb0 0a48 	vmov.f32	s0, s16
 80089c0:	eef0 0a68 	vmov.f32	s1, s17
 80089c4:	ecbd 8b02 	vpop	{d8}
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	3ff00000 	.word	0x3ff00000
 80089d0:	0800b2d0 	.word	0x0800b2d0

080089d4 <atan2>:
 80089d4:	f000 be1c 	b.w	8009610 <__ieee754_atan2>

080089d8 <pow>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	ed2d 8b02 	vpush	{d8}
 80089de:	eeb0 8a40 	vmov.f32	s16, s0
 80089e2:	eef0 8a60 	vmov.f32	s17, s1
 80089e6:	ec55 4b11 	vmov	r4, r5, d1
 80089ea:	f000 fed9 	bl	80097a0 <__ieee754_pow>
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	4620      	mov	r0, r4
 80089f4:	4629      	mov	r1, r5
 80089f6:	ec57 6b10 	vmov	r6, r7, d0
 80089fa:	f7f8 f85b 	bl	8000ab4 <__aeabi_dcmpun>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d13b      	bne.n	8008a7a <pow+0xa2>
 8008a02:	ec51 0b18 	vmov	r0, r1, d8
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f7f8 f821 	bl	8000a50 <__aeabi_dcmpeq>
 8008a0e:	b1b8      	cbz	r0, 8008a40 <pow+0x68>
 8008a10:	2200      	movs	r2, #0
 8008a12:	2300      	movs	r3, #0
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f8 f81a 	bl	8000a50 <__aeabi_dcmpeq>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d146      	bne.n	8008aae <pow+0xd6>
 8008a20:	ec45 4b10 	vmov	d0, r4, r5
 8008a24:	f000 f924 	bl	8008c70 <finite>
 8008a28:	b338      	cbz	r0, 8008a7a <pow+0xa2>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f8 f817 	bl	8000a64 <__aeabi_dcmplt>
 8008a36:	b300      	cbz	r0, 8008a7a <pow+0xa2>
 8008a38:	f7ff fdf0 	bl	800861c <__errno>
 8008a3c:	2322      	movs	r3, #34	@ 0x22
 8008a3e:	e01b      	b.n	8008a78 <pow+0xa0>
 8008a40:	ec47 6b10 	vmov	d0, r6, r7
 8008a44:	f000 f914 	bl	8008c70 <finite>
 8008a48:	b9e0      	cbnz	r0, 8008a84 <pow+0xac>
 8008a4a:	eeb0 0a48 	vmov.f32	s0, s16
 8008a4e:	eef0 0a68 	vmov.f32	s1, s17
 8008a52:	f000 f90d 	bl	8008c70 <finite>
 8008a56:	b1a8      	cbz	r0, 8008a84 <pow+0xac>
 8008a58:	ec45 4b10 	vmov	d0, r4, r5
 8008a5c:	f000 f908 	bl	8008c70 <finite>
 8008a60:	b180      	cbz	r0, 8008a84 <pow+0xac>
 8008a62:	4632      	mov	r2, r6
 8008a64:	463b      	mov	r3, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f8 f823 	bl	8000ab4 <__aeabi_dcmpun>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d0e2      	beq.n	8008a38 <pow+0x60>
 8008a72:	f7ff fdd3 	bl	800861c <__errno>
 8008a76:	2321      	movs	r3, #33	@ 0x21
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	ecbd 8b02 	vpop	{d8}
 8008a7e:	ec47 6b10 	vmov	d0, r6, r7
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f7 ffe0 	bl	8000a50 <__aeabi_dcmpeq>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0f2      	beq.n	8008a7a <pow+0xa2>
 8008a94:	eeb0 0a48 	vmov.f32	s0, s16
 8008a98:	eef0 0a68 	vmov.f32	s1, s17
 8008a9c:	f000 f8e8 	bl	8008c70 <finite>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0ea      	beq.n	8008a7a <pow+0xa2>
 8008aa4:	ec45 4b10 	vmov	d0, r4, r5
 8008aa8:	f000 f8e2 	bl	8008c70 <finite>
 8008aac:	e7c3      	b.n	8008a36 <pow+0x5e>
 8008aae:	4f01      	ldr	r7, [pc, #4]	@ (8008ab4 <pow+0xdc>)
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	e7e2      	b.n	8008a7a <pow+0xa2>
 8008ab4:	3ff00000 	.word	0x3ff00000

08008ab8 <sqrt>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	ed2d 8b02 	vpush	{d8}
 8008abe:	ec55 4b10 	vmov	r4, r5, d0
 8008ac2:	f000 f8e9 	bl	8008c98 <__ieee754_sqrt>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	eeb0 8a40 	vmov.f32	s16, s0
 8008ad2:	eef0 8a60 	vmov.f32	s17, s1
 8008ad6:	f7f7 ffed 	bl	8000ab4 <__aeabi_dcmpun>
 8008ada:	b990      	cbnz	r0, 8008b02 <sqrt+0x4a>
 8008adc:	2200      	movs	r2, #0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 ffbe 	bl	8000a64 <__aeabi_dcmplt>
 8008ae8:	b158      	cbz	r0, 8008b02 <sqrt+0x4a>
 8008aea:	f7ff fd97 	bl	800861c <__errno>
 8008aee:	2321      	movs	r3, #33	@ 0x21
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	2200      	movs	r2, #0
 8008af4:	2300      	movs	r3, #0
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7f7 fe6b 	bl	80007d4 <__aeabi_ddiv>
 8008afe:	ec41 0b18 	vmov	d8, r0, r1
 8008b02:	eeb0 0a48 	vmov.f32	s0, s16
 8008b06:	eef0 0a68 	vmov.f32	s1, s17
 8008b0a:	ecbd 8b02 	vpop	{d8}
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}

08008b10 <cos>:
 8008b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b12:	ec53 2b10 	vmov	r2, r3, d0
 8008b16:	4826      	ldr	r0, [pc, #152]	@ (8008bb0 <cos+0xa0>)
 8008b18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b1c:	4281      	cmp	r1, r0
 8008b1e:	d806      	bhi.n	8008b2e <cos+0x1e>
 8008b20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ba8 <cos+0x98>
 8008b24:	b005      	add	sp, #20
 8008b26:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b2a:	f000 b991 	b.w	8008e50 <__kernel_cos>
 8008b2e:	4821      	ldr	r0, [pc, #132]	@ (8008bb4 <cos+0xa4>)
 8008b30:	4281      	cmp	r1, r0
 8008b32:	d908      	bls.n	8008b46 <cos+0x36>
 8008b34:	4610      	mov	r0, r2
 8008b36:	4619      	mov	r1, r3
 8008b38:	f7f7 fb6a 	bl	8000210 <__aeabi_dsub>
 8008b3c:	ec41 0b10 	vmov	d0, r0, r1
 8008b40:	b005      	add	sp, #20
 8008b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b46:	4668      	mov	r0, sp
 8008b48:	f001 fb6e 	bl	800a228 <__ieee754_rem_pio2>
 8008b4c:	f000 0003 	and.w	r0, r0, #3
 8008b50:	2801      	cmp	r0, #1
 8008b52:	d00b      	beq.n	8008b6c <cos+0x5c>
 8008b54:	2802      	cmp	r0, #2
 8008b56:	d015      	beq.n	8008b84 <cos+0x74>
 8008b58:	b9d8      	cbnz	r0, 8008b92 <cos+0x82>
 8008b5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b5e:	ed9d 0b00 	vldr	d0, [sp]
 8008b62:	f000 f975 	bl	8008e50 <__kernel_cos>
 8008b66:	ec51 0b10 	vmov	r0, r1, d0
 8008b6a:	e7e7      	b.n	8008b3c <cos+0x2c>
 8008b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b70:	ed9d 0b00 	vldr	d0, [sp]
 8008b74:	f000 fa34 	bl	8008fe0 <__kernel_sin>
 8008b78:	ec53 2b10 	vmov	r2, r3, d0
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008b82:	e7db      	b.n	8008b3c <cos+0x2c>
 8008b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b88:	ed9d 0b00 	vldr	d0, [sp]
 8008b8c:	f000 f960 	bl	8008e50 <__kernel_cos>
 8008b90:	e7f2      	b.n	8008b78 <cos+0x68>
 8008b92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b96:	ed9d 0b00 	vldr	d0, [sp]
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	f000 fa20 	bl	8008fe0 <__kernel_sin>
 8008ba0:	e7e1      	b.n	8008b66 <cos+0x56>
 8008ba2:	bf00      	nop
 8008ba4:	f3af 8000 	nop.w
	...
 8008bb0:	3fe921fb 	.word	0x3fe921fb
 8008bb4:	7fefffff 	.word	0x7fefffff

08008bb8 <fabs>:
 8008bb8:	ec51 0b10 	vmov	r0, r1, d0
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008bc2:	ec43 2b10 	vmov	d0, r2, r3
 8008bc6:	4770      	bx	lr

08008bc8 <sin>:
 8008bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bca:	ec53 2b10 	vmov	r2, r3, d0
 8008bce:	4826      	ldr	r0, [pc, #152]	@ (8008c68 <sin+0xa0>)
 8008bd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008bd4:	4281      	cmp	r1, r0
 8008bd6:	d807      	bhi.n	8008be8 <sin+0x20>
 8008bd8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008c60 <sin+0x98>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	b005      	add	sp, #20
 8008be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be4:	f000 b9fc 	b.w	8008fe0 <__kernel_sin>
 8008be8:	4820      	ldr	r0, [pc, #128]	@ (8008c6c <sin+0xa4>)
 8008bea:	4281      	cmp	r1, r0
 8008bec:	d908      	bls.n	8008c00 <sin+0x38>
 8008bee:	4610      	mov	r0, r2
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f7f7 fb0d 	bl	8000210 <__aeabi_dsub>
 8008bf6:	ec41 0b10 	vmov	d0, r0, r1
 8008bfa:	b005      	add	sp, #20
 8008bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c00:	4668      	mov	r0, sp
 8008c02:	f001 fb11 	bl	800a228 <__ieee754_rem_pio2>
 8008c06:	f000 0003 	and.w	r0, r0, #3
 8008c0a:	2801      	cmp	r0, #1
 8008c0c:	d00c      	beq.n	8008c28 <sin+0x60>
 8008c0e:	2802      	cmp	r0, #2
 8008c10:	d011      	beq.n	8008c36 <sin+0x6e>
 8008c12:	b9e8      	cbnz	r0, 8008c50 <sin+0x88>
 8008c14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c18:	ed9d 0b00 	vldr	d0, [sp]
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	f000 f9df 	bl	8008fe0 <__kernel_sin>
 8008c22:	ec51 0b10 	vmov	r0, r1, d0
 8008c26:	e7e6      	b.n	8008bf6 <sin+0x2e>
 8008c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c2c:	ed9d 0b00 	vldr	d0, [sp]
 8008c30:	f000 f90e 	bl	8008e50 <__kernel_cos>
 8008c34:	e7f5      	b.n	8008c22 <sin+0x5a>
 8008c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c3a:	ed9d 0b00 	vldr	d0, [sp]
 8008c3e:	2001      	movs	r0, #1
 8008c40:	f000 f9ce 	bl	8008fe0 <__kernel_sin>
 8008c44:	ec53 2b10 	vmov	r2, r3, d0
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c4e:	e7d2      	b.n	8008bf6 <sin+0x2e>
 8008c50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c54:	ed9d 0b00 	vldr	d0, [sp]
 8008c58:	f000 f8fa 	bl	8008e50 <__kernel_cos>
 8008c5c:	e7f2      	b.n	8008c44 <sin+0x7c>
 8008c5e:	bf00      	nop
	...
 8008c68:	3fe921fb 	.word	0x3fe921fb
 8008c6c:	7fefffff 	.word	0x7fefffff

08008c70 <finite>:
 8008c70:	b082      	sub	sp, #8
 8008c72:	ed8d 0b00 	vstr	d0, [sp]
 8008c76:	9801      	ldr	r0, [sp, #4]
 8008c78:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008c7c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008c80:	0fc0      	lsrs	r0, r0, #31
 8008c82:	b002      	add	sp, #8
 8008c84:	4770      	bx	lr
	...

08008c88 <nan>:
 8008c88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c90 <nan+0x8>
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	00000000 	.word	0x00000000
 8008c94:	7ff80000 	.word	0x7ff80000

08008c98 <__ieee754_sqrt>:
 8008c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4a68      	ldr	r2, [pc, #416]	@ (8008e40 <__ieee754_sqrt+0x1a8>)
 8008c9e:	ec55 4b10 	vmov	r4, r5, d0
 8008ca2:	43aa      	bics	r2, r5
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	d110      	bne.n	8008ccc <__ieee754_sqrt+0x34>
 8008caa:	4622      	mov	r2, r4
 8008cac:	4620      	mov	r0, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7f7 fc66 	bl	8000580 <__aeabi_dmul>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	4629      	mov	r1, r5
 8008cbc:	f7f7 faaa 	bl	8000214 <__adddf3>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	ec45 4b10 	vmov	d0, r4, r5
 8008cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	dc0e      	bgt.n	8008cee <__ieee754_sqrt+0x56>
 8008cd0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008cd4:	4322      	orrs	r2, r4
 8008cd6:	d0f5      	beq.n	8008cc4 <__ieee754_sqrt+0x2c>
 8008cd8:	b19d      	cbz	r5, 8008d02 <__ieee754_sqrt+0x6a>
 8008cda:	4622      	mov	r2, r4
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7f7 fa96 	bl	8000210 <__aeabi_dsub>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	f7f7 fd74 	bl	80007d4 <__aeabi_ddiv>
 8008cec:	e7e8      	b.n	8008cc0 <__ieee754_sqrt+0x28>
 8008cee:	152a      	asrs	r2, r5, #20
 8008cf0:	d115      	bne.n	8008d1e <__ieee754_sqrt+0x86>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e009      	b.n	8008d0a <__ieee754_sqrt+0x72>
 8008cf6:	0acb      	lsrs	r3, r1, #11
 8008cf8:	3a15      	subs	r2, #21
 8008cfa:	0549      	lsls	r1, r1, #21
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0fa      	beq.n	8008cf6 <__ieee754_sqrt+0x5e>
 8008d00:	e7f7      	b.n	8008cf2 <__ieee754_sqrt+0x5a>
 8008d02:	462a      	mov	r2, r5
 8008d04:	e7fa      	b.n	8008cfc <__ieee754_sqrt+0x64>
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	3001      	adds	r0, #1
 8008d0a:	02dc      	lsls	r4, r3, #11
 8008d0c:	d5fb      	bpl.n	8008d06 <__ieee754_sqrt+0x6e>
 8008d0e:	1e44      	subs	r4, r0, #1
 8008d10:	1b12      	subs	r2, r2, r4
 8008d12:	f1c0 0420 	rsb	r4, r0, #32
 8008d16:	fa21 f404 	lsr.w	r4, r1, r4
 8008d1a:	4323      	orrs	r3, r4
 8008d1c:	4081      	lsls	r1, r0
 8008d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d2a:	07d2      	lsls	r2, r2, #31
 8008d2c:	bf5c      	itt	pl
 8008d2e:	005b      	lslpl	r3, r3, #1
 8008d30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d38:	bf58      	it	pl
 8008d3a:	0049      	lslpl	r1, r1, #1
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008d42:	106d      	asrs	r5, r5, #1
 8008d44:	0049      	lsls	r1, r1, #1
 8008d46:	2016      	movs	r0, #22
 8008d48:	4632      	mov	r2, r6
 8008d4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008d4e:	1917      	adds	r7, r2, r4
 8008d50:	429f      	cmp	r7, r3
 8008d52:	bfde      	ittt	le
 8008d54:	193a      	addle	r2, r7, r4
 8008d56:	1bdb      	suble	r3, r3, r7
 8008d58:	1936      	addle	r6, r6, r4
 8008d5a:	0fcf      	lsrs	r7, r1, #31
 8008d5c:	3801      	subs	r0, #1
 8008d5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008d62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d6a:	d1f0      	bne.n	8008d4e <__ieee754_sqrt+0xb6>
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	2720      	movs	r7, #32
 8008d70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008d74:	429a      	cmp	r2, r3
 8008d76:	eb00 0e0c 	add.w	lr, r0, ip
 8008d7a:	db02      	blt.n	8008d82 <__ieee754_sqrt+0xea>
 8008d7c:	d113      	bne.n	8008da6 <__ieee754_sqrt+0x10e>
 8008d7e:	458e      	cmp	lr, r1
 8008d80:	d811      	bhi.n	8008da6 <__ieee754_sqrt+0x10e>
 8008d82:	f1be 0f00 	cmp.w	lr, #0
 8008d86:	eb0e 000c 	add.w	r0, lr, ip
 8008d8a:	da42      	bge.n	8008e12 <__ieee754_sqrt+0x17a>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	db40      	blt.n	8008e12 <__ieee754_sqrt+0x17a>
 8008d90:	f102 0801 	add.w	r8, r2, #1
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	458e      	cmp	lr, r1
 8008d98:	bf88      	it	hi
 8008d9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008d9e:	eba1 010e 	sub.w	r1, r1, lr
 8008da2:	4464      	add	r4, ip
 8008da4:	4642      	mov	r2, r8
 8008da6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008daa:	3f01      	subs	r7, #1
 8008dac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008db0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008db4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008db8:	d1dc      	bne.n	8008d74 <__ieee754_sqrt+0xdc>
 8008dba:	4319      	orrs	r1, r3
 8008dbc:	d01b      	beq.n	8008df6 <__ieee754_sqrt+0x15e>
 8008dbe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008e44 <__ieee754_sqrt+0x1ac>
 8008dc2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008e48 <__ieee754_sqrt+0x1b0>
 8008dc6:	e9da 0100 	ldrd	r0, r1, [sl]
 8008dca:	e9db 2300 	ldrd	r2, r3, [fp]
 8008dce:	f7f7 fa1f 	bl	8000210 <__aeabi_dsub>
 8008dd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fe4b 	bl	8000a78 <__aeabi_dcmple>
 8008de2:	b140      	cbz	r0, 8008df6 <__ieee754_sqrt+0x15e>
 8008de4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008de8:	e9da 0100 	ldrd	r0, r1, [sl]
 8008dec:	e9db 2300 	ldrd	r2, r3, [fp]
 8008df0:	d111      	bne.n	8008e16 <__ieee754_sqrt+0x17e>
 8008df2:	3601      	adds	r6, #1
 8008df4:	463c      	mov	r4, r7
 8008df6:	1072      	asrs	r2, r6, #1
 8008df8:	0863      	lsrs	r3, r4, #1
 8008dfa:	07f1      	lsls	r1, r6, #31
 8008dfc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008e00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008e04:	bf48      	it	mi
 8008e06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008e0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008e0e:	4618      	mov	r0, r3
 8008e10:	e756      	b.n	8008cc0 <__ieee754_sqrt+0x28>
 8008e12:	4690      	mov	r8, r2
 8008e14:	e7be      	b.n	8008d94 <__ieee754_sqrt+0xfc>
 8008e16:	f7f7 f9fd 	bl	8000214 <__adddf3>
 8008e1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	f7f7 fe1d 	bl	8000a64 <__aeabi_dcmplt>
 8008e2a:	b120      	cbz	r0, 8008e36 <__ieee754_sqrt+0x19e>
 8008e2c:	1ca0      	adds	r0, r4, #2
 8008e2e:	bf08      	it	eq
 8008e30:	3601      	addeq	r6, #1
 8008e32:	3402      	adds	r4, #2
 8008e34:	e7df      	b.n	8008df6 <__ieee754_sqrt+0x15e>
 8008e36:	1c63      	adds	r3, r4, #1
 8008e38:	f023 0401 	bic.w	r4, r3, #1
 8008e3c:	e7db      	b.n	8008df6 <__ieee754_sqrt+0x15e>
 8008e3e:	bf00      	nop
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	20000070 	.word	0x20000070
 8008e48:	20000068 	.word	0x20000068
 8008e4c:	00000000 	.word	0x00000000

08008e50 <__kernel_cos>:
 8008e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ec57 6b10 	vmov	r6, r7, d0
 8008e58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008e5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008e60:	ed8d 1b00 	vstr	d1, [sp]
 8008e64:	d206      	bcs.n	8008e74 <__kernel_cos+0x24>
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fe39 	bl	8000ae0 <__aeabi_d2iz>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f000 8088 	beq.w	8008f84 <__kernel_cos+0x134>
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fb80 	bl	8000580 <__aeabi_dmul>
 8008e80:	4b51      	ldr	r3, [pc, #324]	@ (8008fc8 <__kernel_cos+0x178>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	f7f7 fb7a 	bl	8000580 <__aeabi_dmul>
 8008e8c:	a340      	add	r3, pc, #256	@ (adr r3, 8008f90 <__kernel_cos+0x140>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	4682      	mov	sl, r0
 8008e94:	468b      	mov	fp, r1
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fb71 	bl	8000580 <__aeabi_dmul>
 8008e9e:	a33e      	add	r3, pc, #248	@ (adr r3, 8008f98 <__kernel_cos+0x148>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 f9b6 	bl	8000214 <__adddf3>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	462b      	mov	r3, r5
 8008eac:	f7f7 fb68 	bl	8000580 <__aeabi_dmul>
 8008eb0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008fa0 <__kernel_cos+0x150>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f7f7 f9ab 	bl	8000210 <__aeabi_dsub>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	f7f7 fb5f 	bl	8000580 <__aeabi_dmul>
 8008ec2:	a339      	add	r3, pc, #228	@ (adr r3, 8008fa8 <__kernel_cos+0x158>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f9a4 	bl	8000214 <__adddf3>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	f7f7 fb56 	bl	8000580 <__aeabi_dmul>
 8008ed4:	a336      	add	r3, pc, #216	@ (adr r3, 8008fb0 <__kernel_cos+0x160>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f999 	bl	8000210 <__aeabi_dsub>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	f7f7 fb4d 	bl	8000580 <__aeabi_dmul>
 8008ee6:	a334      	add	r3, pc, #208	@ (adr r3, 8008fb8 <__kernel_cos+0x168>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 f992 	bl	8000214 <__adddf3>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	f7f7 fb44 	bl	8000580 <__aeabi_dmul>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	f7f7 fb40 	bl	8000580 <__aeabi_dmul>
 8008f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f04:	4604      	mov	r4, r0
 8008f06:	460d      	mov	r5, r1
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fb38 	bl	8000580 <__aeabi_dmul>
 8008f10:	460b      	mov	r3, r1
 8008f12:	4602      	mov	r2, r0
 8008f14:	4629      	mov	r1, r5
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7f7 f97a 	bl	8000210 <__aeabi_dsub>
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fcc <__kernel_cos+0x17c>)
 8008f1e:	4598      	cmp	r8, r3
 8008f20:	4606      	mov	r6, r0
 8008f22:	460f      	mov	r7, r1
 8008f24:	d810      	bhi.n	8008f48 <__kernel_cos+0xf8>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	f7f7 f96f 	bl	8000210 <__aeabi_dsub>
 8008f32:	460b      	mov	r3, r1
 8008f34:	4926      	ldr	r1, [pc, #152]	@ (8008fd0 <__kernel_cos+0x180>)
 8008f36:	4602      	mov	r2, r0
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f7f7 f969 	bl	8000210 <__aeabi_dsub>
 8008f3e:	ec41 0b10 	vmov	d0, r0, r1
 8008f42:	b003      	add	sp, #12
 8008f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f48:	4b22      	ldr	r3, [pc, #136]	@ (8008fd4 <__kernel_cos+0x184>)
 8008f4a:	4921      	ldr	r1, [pc, #132]	@ (8008fd0 <__kernel_cos+0x180>)
 8008f4c:	4598      	cmp	r8, r3
 8008f4e:	bf8c      	ite	hi
 8008f50:	4d21      	ldrhi	r5, [pc, #132]	@ (8008fd8 <__kernel_cos+0x188>)
 8008f52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008f56:	2400      	movs	r4, #0
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f7f7 f957 	bl	8000210 <__aeabi_dsub>
 8008f62:	4622      	mov	r2, r4
 8008f64:	4680      	mov	r8, r0
 8008f66:	4689      	mov	r9, r1
 8008f68:	462b      	mov	r3, r5
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	f7f7 f94f 	bl	8000210 <__aeabi_dsub>
 8008f72:	4632      	mov	r2, r6
 8008f74:	463b      	mov	r3, r7
 8008f76:	f7f7 f94b 	bl	8000210 <__aeabi_dsub>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	e7da      	b.n	8008f3a <__kernel_cos+0xea>
 8008f84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008fc0 <__kernel_cos+0x170>
 8008f88:	e7db      	b.n	8008f42 <__kernel_cos+0xf2>
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	be8838d4 	.word	0xbe8838d4
 8008f94:	bda8fae9 	.word	0xbda8fae9
 8008f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8008f9c:	3e21ee9e 	.word	0x3e21ee9e
 8008fa0:	809c52ad 	.word	0x809c52ad
 8008fa4:	3e927e4f 	.word	0x3e927e4f
 8008fa8:	19cb1590 	.word	0x19cb1590
 8008fac:	3efa01a0 	.word	0x3efa01a0
 8008fb0:	16c15177 	.word	0x16c15177
 8008fb4:	3f56c16c 	.word	0x3f56c16c
 8008fb8:	5555554c 	.word	0x5555554c
 8008fbc:	3fa55555 	.word	0x3fa55555
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	3fe00000 	.word	0x3fe00000
 8008fcc:	3fd33332 	.word	0x3fd33332
 8008fd0:	3ff00000 	.word	0x3ff00000
 8008fd4:	3fe90000 	.word	0x3fe90000
 8008fd8:	3fd20000 	.word	0x3fd20000
 8008fdc:	00000000 	.word	0x00000000

08008fe0 <__kernel_sin>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ec55 4b10 	vmov	r4, r5, d0
 8008fe8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008fec:	b085      	sub	sp, #20
 8008fee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008ff2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	d205      	bcs.n	8009006 <__kernel_sin+0x26>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7f7 fd6f 	bl	8000ae0 <__aeabi_d2iz>
 8009002:	2800      	cmp	r0, #0
 8009004:	d052      	beq.n	80090ac <__kernel_sin+0xcc>
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 fab7 	bl	8000580 <__aeabi_dmul>
 8009012:	4682      	mov	sl, r0
 8009014:	468b      	mov	fp, r1
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4620      	mov	r0, r4
 800901c:	4629      	mov	r1, r5
 800901e:	f7f7 faaf 	bl	8000580 <__aeabi_dmul>
 8009022:	a342      	add	r3, pc, #264	@ (adr r3, 800912c <__kernel_sin+0x14c>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	e9cd 0100 	strd	r0, r1, [sp]
 800902c:	4650      	mov	r0, sl
 800902e:	4659      	mov	r1, fp
 8009030:	f7f7 faa6 	bl	8000580 <__aeabi_dmul>
 8009034:	a33f      	add	r3, pc, #252	@ (adr r3, 8009134 <__kernel_sin+0x154>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f8e9 	bl	8000210 <__aeabi_dsub>
 800903e:	4652      	mov	r2, sl
 8009040:	465b      	mov	r3, fp
 8009042:	f7f7 fa9d 	bl	8000580 <__aeabi_dmul>
 8009046:	a33d      	add	r3, pc, #244	@ (adr r3, 800913c <__kernel_sin+0x15c>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 f8e2 	bl	8000214 <__adddf3>
 8009050:	4652      	mov	r2, sl
 8009052:	465b      	mov	r3, fp
 8009054:	f7f7 fa94 	bl	8000580 <__aeabi_dmul>
 8009058:	a33a      	add	r3, pc, #232	@ (adr r3, 8009144 <__kernel_sin+0x164>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 f8d7 	bl	8000210 <__aeabi_dsub>
 8009062:	4652      	mov	r2, sl
 8009064:	465b      	mov	r3, fp
 8009066:	f7f7 fa8b 	bl	8000580 <__aeabi_dmul>
 800906a:	a338      	add	r3, pc, #224	@ (adr r3, 800914c <__kernel_sin+0x16c>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 f8d0 	bl	8000214 <__adddf3>
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	f1b8 0f00 	cmp.w	r8, #0
 800907c:	d11b      	bne.n	80090b6 <__kernel_sin+0xd6>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4650      	mov	r0, sl
 8009084:	4659      	mov	r1, fp
 8009086:	f7f7 fa7b 	bl	8000580 <__aeabi_dmul>
 800908a:	a325      	add	r3, pc, #148	@ (adr r3, 8009120 <__kernel_sin+0x140>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f8be 	bl	8000210 <__aeabi_dsub>
 8009094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009098:	f7f7 fa72 	bl	8000580 <__aeabi_dmul>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 f8b6 	bl	8000214 <__adddf3>
 80090a8:	4604      	mov	r4, r0
 80090aa:	460d      	mov	r5, r1
 80090ac:	ec45 4b10 	vmov	d0, r4, r5
 80090b0:	b005      	add	sp, #20
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009128 <__kernel_sin+0x148>)
 80090bc:	2200      	movs	r2, #0
 80090be:	f7f7 fa5f 	bl	8000580 <__aeabi_dmul>
 80090c2:	4632      	mov	r2, r6
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	463b      	mov	r3, r7
 80090ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090ce:	f7f7 fa57 	bl	8000580 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4640      	mov	r0, r8
 80090d8:	4649      	mov	r1, r9
 80090da:	f7f7 f899 	bl	8000210 <__aeabi_dsub>
 80090de:	4652      	mov	r2, sl
 80090e0:	465b      	mov	r3, fp
 80090e2:	f7f7 fa4d 	bl	8000580 <__aeabi_dmul>
 80090e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ea:	f7f7 f891 	bl	8000210 <__aeabi_dsub>
 80090ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8009120 <__kernel_sin+0x140>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090fc:	f7f7 fa40 	bl	8000580 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 f884 	bl	8000214 <__adddf3>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 f87c 	bl	8000210 <__aeabi_dsub>
 8009118:	e7c6      	b.n	80090a8 <__kernel_sin+0xc8>
 800911a:	bf00      	nop
 800911c:	f3af 8000 	nop.w
 8009120:	55555549 	.word	0x55555549
 8009124:	3fc55555 	.word	0x3fc55555
 8009128:	3fe00000 	.word	0x3fe00000
 800912c:	5acfd57c 	.word	0x5acfd57c
 8009130:	3de5d93a 	.word	0x3de5d93a
 8009134:	8a2b9ceb 	.word	0x8a2b9ceb
 8009138:	3e5ae5e6 	.word	0x3e5ae5e6
 800913c:	57b1fe7d 	.word	0x57b1fe7d
 8009140:	3ec71de3 	.word	0x3ec71de3
 8009144:	19c161d5 	.word	0x19c161d5
 8009148:	3f2a01a0 	.word	0x3f2a01a0
 800914c:	1110f8a6 	.word	0x1110f8a6
 8009150:	3f811111 	.word	0x3f811111
 8009154:	00000000 	.word	0x00000000

08009158 <__ieee754_acos>:
 8009158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	ec55 4b10 	vmov	r4, r5, d0
 8009160:	49b7      	ldr	r1, [pc, #732]	@ (8009440 <__ieee754_acos+0x2e8>)
 8009162:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009166:	428b      	cmp	r3, r1
 8009168:	d919      	bls.n	800919e <__ieee754_acos+0x46>
 800916a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800916e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009172:	4323      	orrs	r3, r4
 8009174:	d106      	bne.n	8009184 <__ieee754_acos+0x2c>
 8009176:	2d00      	cmp	r5, #0
 8009178:	f340 8210 	ble.w	800959c <__ieee754_acos+0x444>
 800917c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80093d0 <__ieee754_acos+0x278>
 8009180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	4622      	mov	r2, r4
 8009186:	462b      	mov	r3, r5
 8009188:	4620      	mov	r0, r4
 800918a:	4629      	mov	r1, r5
 800918c:	f7f7 f840 	bl	8000210 <__aeabi_dsub>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	f7f7 fb1e 	bl	80007d4 <__aeabi_ddiv>
 8009198:	ec41 0b10 	vmov	d0, r0, r1
 800919c:	e7f0      	b.n	8009180 <__ieee754_acos+0x28>
 800919e:	49a9      	ldr	r1, [pc, #676]	@ (8009444 <__ieee754_acos+0x2ec>)
 80091a0:	428b      	cmp	r3, r1
 80091a2:	f200 8085 	bhi.w	80092b0 <__ieee754_acos+0x158>
 80091a6:	4aa8      	ldr	r2, [pc, #672]	@ (8009448 <__ieee754_acos+0x2f0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	f240 81fa 	bls.w	80095a2 <__ieee754_acos+0x44a>
 80091ae:	4622      	mov	r2, r4
 80091b0:	462b      	mov	r3, r5
 80091b2:	4620      	mov	r0, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7f7 f9e3 	bl	8000580 <__aeabi_dmul>
 80091ba:	a387      	add	r3, pc, #540	@ (adr r3, 80093d8 <__ieee754_acos+0x280>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	f7f7 f9dc 	bl	8000580 <__aeabi_dmul>
 80091c8:	a385      	add	r3, pc, #532	@ (adr r3, 80093e0 <__ieee754_acos+0x288>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 f821 	bl	8000214 <__adddf3>
 80091d2:	4632      	mov	r2, r6
 80091d4:	463b      	mov	r3, r7
 80091d6:	f7f7 f9d3 	bl	8000580 <__aeabi_dmul>
 80091da:	a383      	add	r3, pc, #524	@ (adr r3, 80093e8 <__ieee754_acos+0x290>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 f816 	bl	8000210 <__aeabi_dsub>
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	f7f7 f9ca 	bl	8000580 <__aeabi_dmul>
 80091ec:	a380      	add	r3, pc, #512	@ (adr r3, 80093f0 <__ieee754_acos+0x298>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f80f 	bl	8000214 <__adddf3>
 80091f6:	4632      	mov	r2, r6
 80091f8:	463b      	mov	r3, r7
 80091fa:	f7f7 f9c1 	bl	8000580 <__aeabi_dmul>
 80091fe:	a37e      	add	r3, pc, #504	@ (adr r3, 80093f8 <__ieee754_acos+0x2a0>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f804 	bl	8000210 <__aeabi_dsub>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f7 f9b8 	bl	8000580 <__aeabi_dmul>
 8009210:	a37b      	add	r3, pc, #492	@ (adr r3, 8009400 <__ieee754_acos+0x2a8>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f6 fffd 	bl	8000214 <__adddf3>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 f9af 	bl	8000580 <__aeabi_dmul>
 8009222:	a379      	add	r3, pc, #484	@ (adr r3, 8009408 <__ieee754_acos+0x2b0>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	4680      	mov	r8, r0
 800922a:	4689      	mov	r9, r1
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f7f7 f9a6 	bl	8000580 <__aeabi_dmul>
 8009234:	a376      	add	r3, pc, #472	@ (adr r3, 8009410 <__ieee754_acos+0x2b8>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f6 ffe9 	bl	8000210 <__aeabi_dsub>
 800923e:	4632      	mov	r2, r6
 8009240:	463b      	mov	r3, r7
 8009242:	f7f7 f99d 	bl	8000580 <__aeabi_dmul>
 8009246:	a374      	add	r3, pc, #464	@ (adr r3, 8009418 <__ieee754_acos+0x2c0>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f6 ffe2 	bl	8000214 <__adddf3>
 8009250:	4632      	mov	r2, r6
 8009252:	463b      	mov	r3, r7
 8009254:	f7f7 f994 	bl	8000580 <__aeabi_dmul>
 8009258:	a371      	add	r3, pc, #452	@ (adr r3, 8009420 <__ieee754_acos+0x2c8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f6 ffd7 	bl	8000210 <__aeabi_dsub>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f98b 	bl	8000580 <__aeabi_dmul>
 800926a:	4b78      	ldr	r3, [pc, #480]	@ (800944c <__ieee754_acos+0x2f4>)
 800926c:	2200      	movs	r2, #0
 800926e:	f7f6 ffd1 	bl	8000214 <__adddf3>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 faab 	bl	80007d4 <__aeabi_ddiv>
 800927e:	4622      	mov	r2, r4
 8009280:	462b      	mov	r3, r5
 8009282:	f7f7 f97d 	bl	8000580 <__aeabi_dmul>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	a167      	add	r1, pc, #412	@ (adr r1, 8009428 <__ieee754_acos+0x2d0>)
 800928c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009290:	f7f6 ffbe 	bl	8000210 <__aeabi_dsub>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f6 ffb8 	bl	8000210 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	a162      	add	r1, pc, #392	@ (adr r1, 8009430 <__ieee754_acos+0x2d8>)
 80092a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092aa:	f7f6 ffb1 	bl	8000210 <__aeabi_dsub>
 80092ae:	e773      	b.n	8009198 <__ieee754_acos+0x40>
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	f280 80cf 	bge.w	8009454 <__ieee754_acos+0x2fc>
 80092b6:	4b65      	ldr	r3, [pc, #404]	@ (800944c <__ieee754_acos+0x2f4>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f6 ffa9 	bl	8000214 <__adddf3>
 80092c2:	4b63      	ldr	r3, [pc, #396]	@ (8009450 <__ieee754_acos+0x2f8>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	f7f7 f95b 	bl	8000580 <__aeabi_dmul>
 80092ca:	a343      	add	r3, pc, #268	@ (adr r3, 80093d8 <__ieee754_acos+0x280>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	f7f7 f954 	bl	8000580 <__aeabi_dmul>
 80092d8:	a341      	add	r3, pc, #260	@ (adr r3, 80093e0 <__ieee754_acos+0x288>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f6 ff99 	bl	8000214 <__adddf3>
 80092e2:	4622      	mov	r2, r4
 80092e4:	462b      	mov	r3, r5
 80092e6:	f7f7 f94b 	bl	8000580 <__aeabi_dmul>
 80092ea:	a33f      	add	r3, pc, #252	@ (adr r3, 80093e8 <__ieee754_acos+0x290>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f7f6 ff8e 	bl	8000210 <__aeabi_dsub>
 80092f4:	4622      	mov	r2, r4
 80092f6:	462b      	mov	r3, r5
 80092f8:	f7f7 f942 	bl	8000580 <__aeabi_dmul>
 80092fc:	a33c      	add	r3, pc, #240	@ (adr r3, 80093f0 <__ieee754_acos+0x298>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ff87 	bl	8000214 <__adddf3>
 8009306:	4622      	mov	r2, r4
 8009308:	462b      	mov	r3, r5
 800930a:	f7f7 f939 	bl	8000580 <__aeabi_dmul>
 800930e:	a33a      	add	r3, pc, #232	@ (adr r3, 80093f8 <__ieee754_acos+0x2a0>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ff7c 	bl	8000210 <__aeabi_dsub>
 8009318:	4622      	mov	r2, r4
 800931a:	462b      	mov	r3, r5
 800931c:	f7f7 f930 	bl	8000580 <__aeabi_dmul>
 8009320:	a337      	add	r3, pc, #220	@ (adr r3, 8009400 <__ieee754_acos+0x2a8>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ff75 	bl	8000214 <__adddf3>
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	f7f7 f927 	bl	8000580 <__aeabi_dmul>
 8009332:	a335      	add	r3, pc, #212	@ (adr r3, 8009408 <__ieee754_acos+0x2b0>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	4606      	mov	r6, r0
 800933a:	460f      	mov	r7, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7f7 f91e 	bl	8000580 <__aeabi_dmul>
 8009344:	a332      	add	r3, pc, #200	@ (adr r3, 8009410 <__ieee754_acos+0x2b8>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ff61 	bl	8000210 <__aeabi_dsub>
 800934e:	4622      	mov	r2, r4
 8009350:	462b      	mov	r3, r5
 8009352:	f7f7 f915 	bl	8000580 <__aeabi_dmul>
 8009356:	a330      	add	r3, pc, #192	@ (adr r3, 8009418 <__ieee754_acos+0x2c0>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f6 ff5a 	bl	8000214 <__adddf3>
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	f7f7 f90c 	bl	8000580 <__aeabi_dmul>
 8009368:	a32d      	add	r3, pc, #180	@ (adr r3, 8009420 <__ieee754_acos+0x2c8>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 ff4f 	bl	8000210 <__aeabi_dsub>
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	f7f7 f903 	bl	8000580 <__aeabi_dmul>
 800937a:	4b34      	ldr	r3, [pc, #208]	@ (800944c <__ieee754_acos+0x2f4>)
 800937c:	2200      	movs	r2, #0
 800937e:	f7f6 ff49 	bl	8000214 <__adddf3>
 8009382:	ec45 4b10 	vmov	d0, r4, r5
 8009386:	4680      	mov	r8, r0
 8009388:	4689      	mov	r9, r1
 800938a:	f7ff fc85 	bl	8008c98 <__ieee754_sqrt>
 800938e:	ec55 4b10 	vmov	r4, r5, d0
 8009392:	4642      	mov	r2, r8
 8009394:	464b      	mov	r3, r9
 8009396:	4630      	mov	r0, r6
 8009398:	4639      	mov	r1, r7
 800939a:	f7f7 fa1b 	bl	80007d4 <__aeabi_ddiv>
 800939e:	4622      	mov	r2, r4
 80093a0:	462b      	mov	r3, r5
 80093a2:	f7f7 f8ed 	bl	8000580 <__aeabi_dmul>
 80093a6:	a320      	add	r3, pc, #128	@ (adr r3, 8009428 <__ieee754_acos+0x2d0>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 ff30 	bl	8000210 <__aeabi_dsub>
 80093b0:	4622      	mov	r2, r4
 80093b2:	462b      	mov	r3, r5
 80093b4:	f7f6 ff2e 	bl	8000214 <__adddf3>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	f7f6 ff2a 	bl	8000214 <__adddf3>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	a11c      	add	r1, pc, #112	@ (adr r1, 8009438 <__ieee754_acos+0x2e0>)
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	e76e      	b.n	80092aa <__ieee754_acos+0x152>
 80093cc:	f3af 8000 	nop.w
	...
 80093d8:	0dfdf709 	.word	0x0dfdf709
 80093dc:	3f023de1 	.word	0x3f023de1
 80093e0:	7501b288 	.word	0x7501b288
 80093e4:	3f49efe0 	.word	0x3f49efe0
 80093e8:	b5688f3b 	.word	0xb5688f3b
 80093ec:	3fa48228 	.word	0x3fa48228
 80093f0:	0e884455 	.word	0x0e884455
 80093f4:	3fc9c155 	.word	0x3fc9c155
 80093f8:	03eb6f7d 	.word	0x03eb6f7d
 80093fc:	3fd4d612 	.word	0x3fd4d612
 8009400:	55555555 	.word	0x55555555
 8009404:	3fc55555 	.word	0x3fc55555
 8009408:	b12e9282 	.word	0xb12e9282
 800940c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009410:	1b8d0159 	.word	0x1b8d0159
 8009414:	3fe6066c 	.word	0x3fe6066c
 8009418:	9c598ac8 	.word	0x9c598ac8
 800941c:	40002ae5 	.word	0x40002ae5
 8009420:	1c8a2d4b 	.word	0x1c8a2d4b
 8009424:	40033a27 	.word	0x40033a27
 8009428:	33145c07 	.word	0x33145c07
 800942c:	3c91a626 	.word	0x3c91a626
 8009430:	54442d18 	.word	0x54442d18
 8009434:	3ff921fb 	.word	0x3ff921fb
 8009438:	54442d18 	.word	0x54442d18
 800943c:	400921fb 	.word	0x400921fb
 8009440:	3fefffff 	.word	0x3fefffff
 8009444:	3fdfffff 	.word	0x3fdfffff
 8009448:	3c600000 	.word	0x3c600000
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	3fe00000 	.word	0x3fe00000
 8009454:	4622      	mov	r2, r4
 8009456:	462b      	mov	r3, r5
 8009458:	496b      	ldr	r1, [pc, #428]	@ (8009608 <__ieee754_acos+0x4b0>)
 800945a:	2000      	movs	r0, #0
 800945c:	f7f6 fed8 	bl	8000210 <__aeabi_dsub>
 8009460:	4b6a      	ldr	r3, [pc, #424]	@ (800960c <__ieee754_acos+0x4b4>)
 8009462:	2200      	movs	r2, #0
 8009464:	f7f7 f88c 	bl	8000580 <__aeabi_dmul>
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	ec45 4b10 	vmov	d0, r4, r5
 8009470:	f7ff fc12 	bl	8008c98 <__ieee754_sqrt>
 8009474:	a34c      	add	r3, pc, #304	@ (adr r3, 80095a8 <__ieee754_acos+0x450>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	ec59 8b10 	vmov	r8, r9, d0
 8009482:	f7f7 f87d 	bl	8000580 <__aeabi_dmul>
 8009486:	a34a      	add	r3, pc, #296	@ (adr r3, 80095b0 <__ieee754_acos+0x458>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f6 fec2 	bl	8000214 <__adddf3>
 8009490:	4622      	mov	r2, r4
 8009492:	462b      	mov	r3, r5
 8009494:	f7f7 f874 	bl	8000580 <__aeabi_dmul>
 8009498:	a347      	add	r3, pc, #284	@ (adr r3, 80095b8 <__ieee754_acos+0x460>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 feb7 	bl	8000210 <__aeabi_dsub>
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	f7f7 f86b 	bl	8000580 <__aeabi_dmul>
 80094aa:	a345      	add	r3, pc, #276	@ (adr r3, 80095c0 <__ieee754_acos+0x468>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 feb0 	bl	8000214 <__adddf3>
 80094b4:	4622      	mov	r2, r4
 80094b6:	462b      	mov	r3, r5
 80094b8:	f7f7 f862 	bl	8000580 <__aeabi_dmul>
 80094bc:	a342      	add	r3, pc, #264	@ (adr r3, 80095c8 <__ieee754_acos+0x470>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f6 fea5 	bl	8000210 <__aeabi_dsub>
 80094c6:	4622      	mov	r2, r4
 80094c8:	462b      	mov	r3, r5
 80094ca:	f7f7 f859 	bl	8000580 <__aeabi_dmul>
 80094ce:	a340      	add	r3, pc, #256	@ (adr r3, 80095d0 <__ieee754_acos+0x478>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f6 fe9e 	bl	8000214 <__adddf3>
 80094d8:	4622      	mov	r2, r4
 80094da:	462b      	mov	r3, r5
 80094dc:	f7f7 f850 	bl	8000580 <__aeabi_dmul>
 80094e0:	a33d      	add	r3, pc, #244	@ (adr r3, 80095d8 <__ieee754_acos+0x480>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	4682      	mov	sl, r0
 80094e8:	468b      	mov	fp, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f7 f847 	bl	8000580 <__aeabi_dmul>
 80094f2:	a33b      	add	r3, pc, #236	@ (adr r3, 80095e0 <__ieee754_acos+0x488>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f7f6 fe8a 	bl	8000210 <__aeabi_dsub>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f7 f83e 	bl	8000580 <__aeabi_dmul>
 8009504:	a338      	add	r3, pc, #224	@ (adr r3, 80095e8 <__ieee754_acos+0x490>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fe83 	bl	8000214 <__adddf3>
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	f7f7 f835 	bl	8000580 <__aeabi_dmul>
 8009516:	a336      	add	r3, pc, #216	@ (adr r3, 80095f0 <__ieee754_acos+0x498>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f6 fe78 	bl	8000210 <__aeabi_dsub>
 8009520:	4622      	mov	r2, r4
 8009522:	462b      	mov	r3, r5
 8009524:	f7f7 f82c 	bl	8000580 <__aeabi_dmul>
 8009528:	4b37      	ldr	r3, [pc, #220]	@ (8009608 <__ieee754_acos+0x4b0>)
 800952a:	2200      	movs	r2, #0
 800952c:	f7f6 fe72 	bl	8000214 <__adddf3>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4650      	mov	r0, sl
 8009536:	4659      	mov	r1, fp
 8009538:	f7f7 f94c 	bl	80007d4 <__aeabi_ddiv>
 800953c:	4642      	mov	r2, r8
 800953e:	464b      	mov	r3, r9
 8009540:	f7f7 f81e 	bl	8000580 <__aeabi_dmul>
 8009544:	2600      	movs	r6, #0
 8009546:	4682      	mov	sl, r0
 8009548:	468b      	mov	fp, r1
 800954a:	4632      	mov	r2, r6
 800954c:	464b      	mov	r3, r9
 800954e:	4630      	mov	r0, r6
 8009550:	4649      	mov	r1, r9
 8009552:	f7f7 f815 	bl	8000580 <__aeabi_dmul>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f7f6 fe57 	bl	8000210 <__aeabi_dsub>
 8009562:	4632      	mov	r2, r6
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	464b      	mov	r3, r9
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f6 fe51 	bl	8000214 <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f7 f92b 	bl	80007d4 <__aeabi_ddiv>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4650      	mov	r0, sl
 8009584:	4659      	mov	r1, fp
 8009586:	f7f6 fe45 	bl	8000214 <__adddf3>
 800958a:	4632      	mov	r2, r6
 800958c:	464b      	mov	r3, r9
 800958e:	f7f6 fe41 	bl	8000214 <__adddf3>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	f7f6 fe3d 	bl	8000214 <__adddf3>
 800959a:	e5fd      	b.n	8009198 <__ieee754_acos+0x40>
 800959c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80095f8 <__ieee754_acos+0x4a0>
 80095a0:	e5ee      	b.n	8009180 <__ieee754_acos+0x28>
 80095a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009600 <__ieee754_acos+0x4a8>
 80095a6:	e5eb      	b.n	8009180 <__ieee754_acos+0x28>
 80095a8:	0dfdf709 	.word	0x0dfdf709
 80095ac:	3f023de1 	.word	0x3f023de1
 80095b0:	7501b288 	.word	0x7501b288
 80095b4:	3f49efe0 	.word	0x3f49efe0
 80095b8:	b5688f3b 	.word	0xb5688f3b
 80095bc:	3fa48228 	.word	0x3fa48228
 80095c0:	0e884455 	.word	0x0e884455
 80095c4:	3fc9c155 	.word	0x3fc9c155
 80095c8:	03eb6f7d 	.word	0x03eb6f7d
 80095cc:	3fd4d612 	.word	0x3fd4d612
 80095d0:	55555555 	.word	0x55555555
 80095d4:	3fc55555 	.word	0x3fc55555
 80095d8:	b12e9282 	.word	0xb12e9282
 80095dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80095e0:	1b8d0159 	.word	0x1b8d0159
 80095e4:	3fe6066c 	.word	0x3fe6066c
 80095e8:	9c598ac8 	.word	0x9c598ac8
 80095ec:	40002ae5 	.word	0x40002ae5
 80095f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80095f4:	40033a27 	.word	0x40033a27
 80095f8:	54442d18 	.word	0x54442d18
 80095fc:	400921fb 	.word	0x400921fb
 8009600:	54442d18 	.word	0x54442d18
 8009604:	3ff921fb 	.word	0x3ff921fb
 8009608:	3ff00000 	.word	0x3ff00000
 800960c:	3fe00000 	.word	0x3fe00000

08009610 <__ieee754_atan2>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	ec57 6b11 	vmov	r6, r7, d1
 8009618:	4273      	negs	r3, r6
 800961a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009798 <__ieee754_atan2+0x188>
 800961e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009622:	4333      	orrs	r3, r6
 8009624:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009628:	4543      	cmp	r3, r8
 800962a:	ec51 0b10 	vmov	r0, r1, d0
 800962e:	4635      	mov	r5, r6
 8009630:	d809      	bhi.n	8009646 <__ieee754_atan2+0x36>
 8009632:	4244      	negs	r4, r0
 8009634:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009638:	4304      	orrs	r4, r0
 800963a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800963e:	4544      	cmp	r4, r8
 8009640:	468e      	mov	lr, r1
 8009642:	4681      	mov	r9, r0
 8009644:	d907      	bls.n	8009656 <__ieee754_atan2+0x46>
 8009646:	4632      	mov	r2, r6
 8009648:	463b      	mov	r3, r7
 800964a:	f7f6 fde3 	bl	8000214 <__adddf3>
 800964e:	ec41 0b10 	vmov	d0, r0, r1
 8009652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009656:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800965a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800965e:	4334      	orrs	r4, r6
 8009660:	d103      	bne.n	800966a <__ieee754_atan2+0x5a>
 8009662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009666:	f000 bfdb 	b.w	800a620 <atan>
 800966a:	17bc      	asrs	r4, r7, #30
 800966c:	f004 0402 	and.w	r4, r4, #2
 8009670:	ea53 0909 	orrs.w	r9, r3, r9
 8009674:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009678:	d107      	bne.n	800968a <__ieee754_atan2+0x7a>
 800967a:	2c02      	cmp	r4, #2
 800967c:	d05f      	beq.n	800973e <__ieee754_atan2+0x12e>
 800967e:	2c03      	cmp	r4, #3
 8009680:	d1e5      	bne.n	800964e <__ieee754_atan2+0x3e>
 8009682:	a141      	add	r1, pc, #260	@ (adr r1, 8009788 <__ieee754_atan2+0x178>)
 8009684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009688:	e7e1      	b.n	800964e <__ieee754_atan2+0x3e>
 800968a:	4315      	orrs	r5, r2
 800968c:	d106      	bne.n	800969c <__ieee754_atan2+0x8c>
 800968e:	f1be 0f00 	cmp.w	lr, #0
 8009692:	da5f      	bge.n	8009754 <__ieee754_atan2+0x144>
 8009694:	a13e      	add	r1, pc, #248	@ (adr r1, 8009790 <__ieee754_atan2+0x180>)
 8009696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969a:	e7d8      	b.n	800964e <__ieee754_atan2+0x3e>
 800969c:	4542      	cmp	r2, r8
 800969e:	d10f      	bne.n	80096c0 <__ieee754_atan2+0xb0>
 80096a0:	4293      	cmp	r3, r2
 80096a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80096a6:	d107      	bne.n	80096b8 <__ieee754_atan2+0xa8>
 80096a8:	2c02      	cmp	r4, #2
 80096aa:	d84c      	bhi.n	8009746 <__ieee754_atan2+0x136>
 80096ac:	4b34      	ldr	r3, [pc, #208]	@ (8009780 <__ieee754_atan2+0x170>)
 80096ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096b6:	e7ca      	b.n	800964e <__ieee754_atan2+0x3e>
 80096b8:	2c02      	cmp	r4, #2
 80096ba:	d848      	bhi.n	800974e <__ieee754_atan2+0x13e>
 80096bc:	4b31      	ldr	r3, [pc, #196]	@ (8009784 <__ieee754_atan2+0x174>)
 80096be:	e7f6      	b.n	80096ae <__ieee754_atan2+0x9e>
 80096c0:	4543      	cmp	r3, r8
 80096c2:	d0e4      	beq.n	800968e <__ieee754_atan2+0x7e>
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80096ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096ce:	da1e      	bge.n	800970e <__ieee754_atan2+0xfe>
 80096d0:	2f00      	cmp	r7, #0
 80096d2:	da01      	bge.n	80096d8 <__ieee754_atan2+0xc8>
 80096d4:	323c      	adds	r2, #60	@ 0x3c
 80096d6:	db1e      	blt.n	8009716 <__ieee754_atan2+0x106>
 80096d8:	4632      	mov	r2, r6
 80096da:	463b      	mov	r3, r7
 80096dc:	f7f7 f87a 	bl	80007d4 <__aeabi_ddiv>
 80096e0:	ec41 0b10 	vmov	d0, r0, r1
 80096e4:	f7ff fa68 	bl	8008bb8 <fabs>
 80096e8:	f000 ff9a 	bl	800a620 <atan>
 80096ec:	ec51 0b10 	vmov	r0, r1, d0
 80096f0:	2c01      	cmp	r4, #1
 80096f2:	d013      	beq.n	800971c <__ieee754_atan2+0x10c>
 80096f4:	2c02      	cmp	r4, #2
 80096f6:	d015      	beq.n	8009724 <__ieee754_atan2+0x114>
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	d0a8      	beq.n	800964e <__ieee754_atan2+0x3e>
 80096fc:	a318      	add	r3, pc, #96	@ (adr r3, 8009760 <__ieee754_atan2+0x150>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 fd85 	bl	8000210 <__aeabi_dsub>
 8009706:	a318      	add	r3, pc, #96	@ (adr r3, 8009768 <__ieee754_atan2+0x158>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	e014      	b.n	8009738 <__ieee754_atan2+0x128>
 800970e:	a118      	add	r1, pc, #96	@ (adr r1, 8009770 <__ieee754_atan2+0x160>)
 8009710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009714:	e7ec      	b.n	80096f0 <__ieee754_atan2+0xe0>
 8009716:	2000      	movs	r0, #0
 8009718:	2100      	movs	r1, #0
 800971a:	e7e9      	b.n	80096f0 <__ieee754_atan2+0xe0>
 800971c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009720:	4619      	mov	r1, r3
 8009722:	e794      	b.n	800964e <__ieee754_atan2+0x3e>
 8009724:	a30e      	add	r3, pc, #56	@ (adr r3, 8009760 <__ieee754_atan2+0x150>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fd71 	bl	8000210 <__aeabi_dsub>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	a10d      	add	r1, pc, #52	@ (adr r1, 8009768 <__ieee754_atan2+0x158>)
 8009734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009738:	f7f6 fd6a 	bl	8000210 <__aeabi_dsub>
 800973c:	e787      	b.n	800964e <__ieee754_atan2+0x3e>
 800973e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009768 <__ieee754_atan2+0x158>)
 8009740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009744:	e783      	b.n	800964e <__ieee754_atan2+0x3e>
 8009746:	a10c      	add	r1, pc, #48	@ (adr r1, 8009778 <__ieee754_atan2+0x168>)
 8009748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974c:	e77f      	b.n	800964e <__ieee754_atan2+0x3e>
 800974e:	2000      	movs	r0, #0
 8009750:	2100      	movs	r1, #0
 8009752:	e77c      	b.n	800964e <__ieee754_atan2+0x3e>
 8009754:	a106      	add	r1, pc, #24	@ (adr r1, 8009770 <__ieee754_atan2+0x160>)
 8009756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800975a:	e778      	b.n	800964e <__ieee754_atan2+0x3e>
 800975c:	f3af 8000 	nop.w
 8009760:	33145c07 	.word	0x33145c07
 8009764:	3ca1a626 	.word	0x3ca1a626
 8009768:	54442d18 	.word	0x54442d18
 800976c:	400921fb 	.word	0x400921fb
 8009770:	54442d18 	.word	0x54442d18
 8009774:	3ff921fb 	.word	0x3ff921fb
 8009778:	54442d18 	.word	0x54442d18
 800977c:	3fe921fb 	.word	0x3fe921fb
 8009780:	0800b2f0 	.word	0x0800b2f0
 8009784:	0800b2d8 	.word	0x0800b2d8
 8009788:	54442d18 	.word	0x54442d18
 800978c:	c00921fb 	.word	0xc00921fb
 8009790:	54442d18 	.word	0x54442d18
 8009794:	bff921fb 	.word	0xbff921fb
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	00000000 	.word	0x00000000

080097a0 <__ieee754_pow>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	b091      	sub	sp, #68	@ 0x44
 80097a6:	ed8d 1b00 	vstr	d1, [sp]
 80097aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80097ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80097b2:	ea5a 0001 	orrs.w	r0, sl, r1
 80097b6:	ec57 6b10 	vmov	r6, r7, d0
 80097ba:	d113      	bne.n	80097e4 <__ieee754_pow+0x44>
 80097bc:	19b3      	adds	r3, r6, r6
 80097be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80097c2:	4152      	adcs	r2, r2
 80097c4:	4298      	cmp	r0, r3
 80097c6:	4b98      	ldr	r3, [pc, #608]	@ (8009a28 <__ieee754_pow+0x288>)
 80097c8:	4193      	sbcs	r3, r2
 80097ca:	f080 84ea 	bcs.w	800a1a2 <__ieee754_pow+0xa02>
 80097ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d2:	4630      	mov	r0, r6
 80097d4:	4639      	mov	r1, r7
 80097d6:	f7f6 fd1d 	bl	8000214 <__adddf3>
 80097da:	ec41 0b10 	vmov	d0, r0, r1
 80097de:	b011      	add	sp, #68	@ 0x44
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	4a91      	ldr	r2, [pc, #580]	@ (8009a2c <__ieee754_pow+0x28c>)
 80097e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80097ea:	4590      	cmp	r8, r2
 80097ec:	463d      	mov	r5, r7
 80097ee:	4633      	mov	r3, r6
 80097f0:	d806      	bhi.n	8009800 <__ieee754_pow+0x60>
 80097f2:	d101      	bne.n	80097f8 <__ieee754_pow+0x58>
 80097f4:	2e00      	cmp	r6, #0
 80097f6:	d1ea      	bne.n	80097ce <__ieee754_pow+0x2e>
 80097f8:	4592      	cmp	sl, r2
 80097fa:	d801      	bhi.n	8009800 <__ieee754_pow+0x60>
 80097fc:	d10e      	bne.n	800981c <__ieee754_pow+0x7c>
 80097fe:	b169      	cbz	r1, 800981c <__ieee754_pow+0x7c>
 8009800:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009804:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009808:	431d      	orrs	r5, r3
 800980a:	d1e0      	bne.n	80097ce <__ieee754_pow+0x2e>
 800980c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009810:	18db      	adds	r3, r3, r3
 8009812:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009816:	4152      	adcs	r2, r2
 8009818:	429d      	cmp	r5, r3
 800981a:	e7d4      	b.n	80097c6 <__ieee754_pow+0x26>
 800981c:	2d00      	cmp	r5, #0
 800981e:	46c3      	mov	fp, r8
 8009820:	da3a      	bge.n	8009898 <__ieee754_pow+0xf8>
 8009822:	4a83      	ldr	r2, [pc, #524]	@ (8009a30 <__ieee754_pow+0x290>)
 8009824:	4592      	cmp	sl, r2
 8009826:	d84d      	bhi.n	80098c4 <__ieee754_pow+0x124>
 8009828:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800982c:	4592      	cmp	sl, r2
 800982e:	f240 84c7 	bls.w	800a1c0 <__ieee754_pow+0xa20>
 8009832:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009836:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800983a:	2a14      	cmp	r2, #20
 800983c:	dd0f      	ble.n	800985e <__ieee754_pow+0xbe>
 800983e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009842:	fa21 f402 	lsr.w	r4, r1, r2
 8009846:	fa04 f202 	lsl.w	r2, r4, r2
 800984a:	428a      	cmp	r2, r1
 800984c:	f040 84b8 	bne.w	800a1c0 <__ieee754_pow+0xa20>
 8009850:	f004 0401 	and.w	r4, r4, #1
 8009854:	f1c4 0402 	rsb	r4, r4, #2
 8009858:	2900      	cmp	r1, #0
 800985a:	d158      	bne.n	800990e <__ieee754_pow+0x16e>
 800985c:	e00e      	b.n	800987c <__ieee754_pow+0xdc>
 800985e:	2900      	cmp	r1, #0
 8009860:	d154      	bne.n	800990c <__ieee754_pow+0x16c>
 8009862:	f1c2 0214 	rsb	r2, r2, #20
 8009866:	fa4a f402 	asr.w	r4, sl, r2
 800986a:	fa04 f202 	lsl.w	r2, r4, r2
 800986e:	4552      	cmp	r2, sl
 8009870:	f040 84a3 	bne.w	800a1ba <__ieee754_pow+0xa1a>
 8009874:	f004 0401 	and.w	r4, r4, #1
 8009878:	f1c4 0402 	rsb	r4, r4, #2
 800987c:	4a6d      	ldr	r2, [pc, #436]	@ (8009a34 <__ieee754_pow+0x294>)
 800987e:	4592      	cmp	sl, r2
 8009880:	d12e      	bne.n	80098e0 <__ieee754_pow+0x140>
 8009882:	f1b9 0f00 	cmp.w	r9, #0
 8009886:	f280 8494 	bge.w	800a1b2 <__ieee754_pow+0xa12>
 800988a:	496a      	ldr	r1, [pc, #424]	@ (8009a34 <__ieee754_pow+0x294>)
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	2000      	movs	r0, #0
 8009892:	f7f6 ff9f 	bl	80007d4 <__aeabi_ddiv>
 8009896:	e7a0      	b.n	80097da <__ieee754_pow+0x3a>
 8009898:	2400      	movs	r4, #0
 800989a:	bbc1      	cbnz	r1, 800990e <__ieee754_pow+0x16e>
 800989c:	4a63      	ldr	r2, [pc, #396]	@ (8009a2c <__ieee754_pow+0x28c>)
 800989e:	4592      	cmp	sl, r2
 80098a0:	d1ec      	bne.n	800987c <__ieee754_pow+0xdc>
 80098a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80098a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80098aa:	431a      	orrs	r2, r3
 80098ac:	f000 8479 	beq.w	800a1a2 <__ieee754_pow+0xa02>
 80098b0:	4b61      	ldr	r3, [pc, #388]	@ (8009a38 <__ieee754_pow+0x298>)
 80098b2:	4598      	cmp	r8, r3
 80098b4:	d908      	bls.n	80098c8 <__ieee754_pow+0x128>
 80098b6:	f1b9 0f00 	cmp.w	r9, #0
 80098ba:	f2c0 8476 	blt.w	800a1aa <__ieee754_pow+0xa0a>
 80098be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c2:	e78a      	b.n	80097da <__ieee754_pow+0x3a>
 80098c4:	2402      	movs	r4, #2
 80098c6:	e7e8      	b.n	800989a <__ieee754_pow+0xfa>
 80098c8:	f1b9 0f00 	cmp.w	r9, #0
 80098cc:	f04f 0000 	mov.w	r0, #0
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	da81      	bge.n	80097da <__ieee754_pow+0x3a>
 80098d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80098da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80098de:	e77c      	b.n	80097da <__ieee754_pow+0x3a>
 80098e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80098e4:	d106      	bne.n	80098f4 <__ieee754_pow+0x154>
 80098e6:	4632      	mov	r2, r6
 80098e8:	463b      	mov	r3, r7
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fe47 	bl	8000580 <__aeabi_dmul>
 80098f2:	e772      	b.n	80097da <__ieee754_pow+0x3a>
 80098f4:	4a51      	ldr	r2, [pc, #324]	@ (8009a3c <__ieee754_pow+0x29c>)
 80098f6:	4591      	cmp	r9, r2
 80098f8:	d109      	bne.n	800990e <__ieee754_pow+0x16e>
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	db07      	blt.n	800990e <__ieee754_pow+0x16e>
 80098fe:	ec47 6b10 	vmov	d0, r6, r7
 8009902:	b011      	add	sp, #68	@ 0x44
 8009904:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	f7ff b9c6 	b.w	8008c98 <__ieee754_sqrt>
 800990c:	2400      	movs	r4, #0
 800990e:	ec47 6b10 	vmov	d0, r6, r7
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	f7ff f950 	bl	8008bb8 <fabs>
 8009918:	9b02      	ldr	r3, [sp, #8]
 800991a:	ec51 0b10 	vmov	r0, r1, d0
 800991e:	bb53      	cbnz	r3, 8009976 <__ieee754_pow+0x1d6>
 8009920:	4b44      	ldr	r3, [pc, #272]	@ (8009a34 <__ieee754_pow+0x294>)
 8009922:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009926:	429a      	cmp	r2, r3
 8009928:	d002      	beq.n	8009930 <__ieee754_pow+0x190>
 800992a:	f1b8 0f00 	cmp.w	r8, #0
 800992e:	d122      	bne.n	8009976 <__ieee754_pow+0x1d6>
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	da05      	bge.n	8009942 <__ieee754_pow+0x1a2>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	2000      	movs	r0, #0
 800993c:	493d      	ldr	r1, [pc, #244]	@ (8009a34 <__ieee754_pow+0x294>)
 800993e:	f7f6 ff49 	bl	80007d4 <__aeabi_ddiv>
 8009942:	2d00      	cmp	r5, #0
 8009944:	f6bf af49 	bge.w	80097da <__ieee754_pow+0x3a>
 8009948:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800994c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009950:	ea58 0804 	orrs.w	r8, r8, r4
 8009954:	d108      	bne.n	8009968 <__ieee754_pow+0x1c8>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4610      	mov	r0, r2
 800995c:	4619      	mov	r1, r3
 800995e:	f7f6 fc57 	bl	8000210 <__aeabi_dsub>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	e794      	b.n	8009892 <__ieee754_pow+0xf2>
 8009968:	2c01      	cmp	r4, #1
 800996a:	f47f af36 	bne.w	80097da <__ieee754_pow+0x3a>
 800996e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009972:	4619      	mov	r1, r3
 8009974:	e731      	b.n	80097da <__ieee754_pow+0x3a>
 8009976:	0feb      	lsrs	r3, r5, #31
 8009978:	3b01      	subs	r3, #1
 800997a:	ea53 0204 	orrs.w	r2, r3, r4
 800997e:	d102      	bne.n	8009986 <__ieee754_pow+0x1e6>
 8009980:	4632      	mov	r2, r6
 8009982:	463b      	mov	r3, r7
 8009984:	e7e9      	b.n	800995a <__ieee754_pow+0x1ba>
 8009986:	3c01      	subs	r4, #1
 8009988:	431c      	orrs	r4, r3
 800998a:	d016      	beq.n	80099ba <__ieee754_pow+0x21a>
 800998c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009a18 <__ieee754_pow+0x278>
 8009990:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009994:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009998:	f240 8112 	bls.w	8009bc0 <__ieee754_pow+0x420>
 800999c:	4b28      	ldr	r3, [pc, #160]	@ (8009a40 <__ieee754_pow+0x2a0>)
 800999e:	459a      	cmp	sl, r3
 80099a0:	4b25      	ldr	r3, [pc, #148]	@ (8009a38 <__ieee754_pow+0x298>)
 80099a2:	d916      	bls.n	80099d2 <__ieee754_pow+0x232>
 80099a4:	4598      	cmp	r8, r3
 80099a6:	d80b      	bhi.n	80099c0 <__ieee754_pow+0x220>
 80099a8:	f1b9 0f00 	cmp.w	r9, #0
 80099ac:	da0b      	bge.n	80099c6 <__ieee754_pow+0x226>
 80099ae:	2000      	movs	r0, #0
 80099b0:	b011      	add	sp, #68	@ 0x44
 80099b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b6:	f001 b87f 	b.w	800aab8 <__math_oflow>
 80099ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009a20 <__ieee754_pow+0x280>
 80099be:	e7e7      	b.n	8009990 <__ieee754_pow+0x1f0>
 80099c0:	f1b9 0f00 	cmp.w	r9, #0
 80099c4:	dcf3      	bgt.n	80099ae <__ieee754_pow+0x20e>
 80099c6:	2000      	movs	r0, #0
 80099c8:	b011      	add	sp, #68	@ 0x44
 80099ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ce:	f001 b86b 	b.w	800aaa8 <__math_uflow>
 80099d2:	4598      	cmp	r8, r3
 80099d4:	d20c      	bcs.n	80099f0 <__ieee754_pow+0x250>
 80099d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	f7f7 f841 	bl	8000a64 <__aeabi_dcmplt>
 80099e2:	3800      	subs	r0, #0
 80099e4:	bf18      	it	ne
 80099e6:	2001      	movne	r0, #1
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	daec      	bge.n	80099c8 <__ieee754_pow+0x228>
 80099ee:	e7df      	b.n	80099b0 <__ieee754_pow+0x210>
 80099f0:	4b10      	ldr	r3, [pc, #64]	@ (8009a34 <__ieee754_pow+0x294>)
 80099f2:	4598      	cmp	r8, r3
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	d924      	bls.n	8009a44 <__ieee754_pow+0x2a4>
 80099fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fe:	2300      	movs	r3, #0
 8009a00:	f7f7 f830 	bl	8000a64 <__aeabi_dcmplt>
 8009a04:	3800      	subs	r0, #0
 8009a06:	bf18      	it	ne
 8009a08:	2001      	movne	r0, #1
 8009a0a:	f1b9 0f00 	cmp.w	r9, #0
 8009a0e:	dccf      	bgt.n	80099b0 <__ieee754_pow+0x210>
 8009a10:	e7da      	b.n	80099c8 <__ieee754_pow+0x228>
 8009a12:	bf00      	nop
 8009a14:	f3af 8000 	nop.w
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	00000000 	.word	0x00000000
 8009a24:	bff00000 	.word	0xbff00000
 8009a28:	fff00000 	.word	0xfff00000
 8009a2c:	7ff00000 	.word	0x7ff00000
 8009a30:	433fffff 	.word	0x433fffff
 8009a34:	3ff00000 	.word	0x3ff00000
 8009a38:	3fefffff 	.word	0x3fefffff
 8009a3c:	3fe00000 	.word	0x3fe00000
 8009a40:	43f00000 	.word	0x43f00000
 8009a44:	4b5a      	ldr	r3, [pc, #360]	@ (8009bb0 <__ieee754_pow+0x410>)
 8009a46:	f7f6 fbe3 	bl	8000210 <__aeabi_dsub>
 8009a4a:	a351      	add	r3, pc, #324	@ (adr r3, 8009b90 <__ieee754_pow+0x3f0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	f7f6 fd94 	bl	8000580 <__aeabi_dmul>
 8009a58:	a34f      	add	r3, pc, #316	@ (adr r3, 8009b98 <__ieee754_pow+0x3f8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7f6 fd8b 	bl	8000580 <__aeabi_dmul>
 8009a6a:	4b52      	ldr	r3, [pc, #328]	@ (8009bb4 <__ieee754_pow+0x414>)
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	468b      	mov	fp, r1
 8009a70:	2200      	movs	r2, #0
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 fd83 	bl	8000580 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	a148      	add	r1, pc, #288	@ (adr r1, 8009ba0 <__ieee754_pow+0x400>)
 8009a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a84:	f7f6 fbc4 	bl	8000210 <__aeabi_dsub>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fd78 	bl	8000580 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	2000      	movs	r0, #0
 8009a96:	4948      	ldr	r1, [pc, #288]	@ (8009bb8 <__ieee754_pow+0x418>)
 8009a98:	f7f6 fbba 	bl	8000210 <__aeabi_dsub>
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fd6a 	bl	8000580 <__aeabi_dmul>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fd64 	bl	8000580 <__aeabi_dmul>
 8009ab8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ba8 <__ieee754_pow+0x408>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fd5f 	bl	8000580 <__aeabi_dmul>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	4659      	mov	r1, fp
 8009aca:	f7f6 fba1 	bl	8000210 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fb9b 	bl	8000214 <__adddf3>
 8009ade:	2400      	movs	r4, #0
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	f7f6 fb92 	bl	8000210 <__aeabi_dsub>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4640      	mov	r0, r8
 8009af2:	4649      	mov	r1, r9
 8009af4:	f7f6 fb8c 	bl	8000210 <__aeabi_dsub>
 8009af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b00:	2300      	movs	r3, #0
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460f      	mov	r7, r1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	465b      	mov	r3, fp
 8009b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b14:	f7f6 fb7c 	bl	8000210 <__aeabi_dsub>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	f7f6 fd30 	bl	8000580 <__aeabi_dmul>
 8009b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 fd28 	bl	8000580 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fb6c 	bl	8000214 <__adddf3>
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	465b      	mov	r3, fp
 8009b40:	4606      	mov	r6, r0
 8009b42:	460f      	mov	r7, r1
 8009b44:	4620      	mov	r0, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 fd1a 	bl	8000580 <__aeabi_dmul>
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4680      	mov	r8, r0
 8009b52:	4689      	mov	r9, r1
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fb5c 	bl	8000214 <__adddf3>
 8009b5c:	4b17      	ldr	r3, [pc, #92]	@ (8009bbc <__ieee754_pow+0x41c>)
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	468a      	mov	sl, r1
 8009b66:	468b      	mov	fp, r1
 8009b68:	f340 82ef 	ble.w	800a14a <__ieee754_pow+0x9aa>
 8009b6c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009b70:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009b74:	4303      	orrs	r3, r0
 8009b76:	f000 81e8 	beq.w	8009f4a <__ieee754_pow+0x7aa>
 8009b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	f7f6 ff6f 	bl	8000a64 <__aeabi_dcmplt>
 8009b86:	3800      	subs	r0, #0
 8009b88:	bf18      	it	ne
 8009b8a:	2001      	movne	r0, #1
 8009b8c:	e710      	b.n	80099b0 <__ieee754_pow+0x210>
 8009b8e:	bf00      	nop
 8009b90:	60000000 	.word	0x60000000
 8009b94:	3ff71547 	.word	0x3ff71547
 8009b98:	f85ddf44 	.word	0xf85ddf44
 8009b9c:	3e54ae0b 	.word	0x3e54ae0b
 8009ba0:	55555555 	.word	0x55555555
 8009ba4:	3fd55555 	.word	0x3fd55555
 8009ba8:	652b82fe 	.word	0x652b82fe
 8009bac:	3ff71547 	.word	0x3ff71547
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	3fd00000 	.word	0x3fd00000
 8009bb8:	3fe00000 	.word	0x3fe00000
 8009bbc:	408fffff 	.word	0x408fffff
 8009bc0:	4bd5      	ldr	r3, [pc, #852]	@ (8009f18 <__ieee754_pow+0x778>)
 8009bc2:	402b      	ands	r3, r5
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	b92b      	cbnz	r3, 8009bd4 <__ieee754_pow+0x434>
 8009bc8:	4bd4      	ldr	r3, [pc, #848]	@ (8009f1c <__ieee754_pow+0x77c>)
 8009bca:	f7f6 fcd9 	bl	8000580 <__aeabi_dmul>
 8009bce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009bd2:	468b      	mov	fp, r1
 8009bd4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009bd8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009bdc:	4413      	add	r3, r2
 8009bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be0:	4bcf      	ldr	r3, [pc, #828]	@ (8009f20 <__ieee754_pow+0x780>)
 8009be2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009be6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009bea:	459b      	cmp	fp, r3
 8009bec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bf0:	dd08      	ble.n	8009c04 <__ieee754_pow+0x464>
 8009bf2:	4bcc      	ldr	r3, [pc, #816]	@ (8009f24 <__ieee754_pow+0x784>)
 8009bf4:	459b      	cmp	fp, r3
 8009bf6:	f340 81a5 	ble.w	8009f44 <__ieee754_pow+0x7a4>
 8009bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c00:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009c04:	f04f 0a00 	mov.w	sl, #0
 8009c08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009c0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c0e:	4bc6      	ldr	r3, [pc, #792]	@ (8009f28 <__ieee754_pow+0x788>)
 8009c10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c14:	ed93 7b00 	vldr	d7, [r3]
 8009c18:	4629      	mov	r1, r5
 8009c1a:	ec53 2b17 	vmov	r2, r3, d7
 8009c1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c26:	f7f6 faf3 	bl	8000210 <__aeabi_dsub>
 8009c2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460f      	mov	r7, r1
 8009c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c36:	f7f6 faed 	bl	8000214 <__adddf3>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	2000      	movs	r0, #0
 8009c40:	49ba      	ldr	r1, [pc, #744]	@ (8009f2c <__ieee754_pow+0x78c>)
 8009c42:	f7f6 fdc7 	bl	80007d4 <__aeabi_ddiv>
 8009c46:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fc95 	bl	8000580 <__aeabi_dmul>
 8009c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009c5e:	106d      	asrs	r5, r5, #1
 8009c60:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009c64:	f04f 0b00 	mov.w	fp, #0
 8009c68:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009c6c:	4661      	mov	r1, ip
 8009c6e:	2200      	movs	r2, #0
 8009c70:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009c74:	4658      	mov	r0, fp
 8009c76:	46e1      	mov	r9, ip
 8009c78:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	461d      	mov	r5, r3
 8009c80:	f7f6 fc7e 	bl	8000580 <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4630      	mov	r0, r6
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	f7f6 fac0 	bl	8000210 <__aeabi_dsub>
 8009c90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c94:	4606      	mov	r6, r0
 8009c96:	460f      	mov	r7, r1
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fab8 	bl	8000210 <__aeabi_dsub>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ca8:	f7f6 fab2 	bl	8000210 <__aeabi_dsub>
 8009cac:	465a      	mov	r2, fp
 8009cae:	464b      	mov	r3, r9
 8009cb0:	f7f6 fc66 	bl	8000580 <__aeabi_dmul>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4630      	mov	r0, r6
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f6 faa8 	bl	8000210 <__aeabi_dsub>
 8009cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009cc4:	f7f6 fc5c 	bl	8000580 <__aeabi_dmul>
 8009cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ccc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f7f6 fc54 	bl	8000580 <__aeabi_dmul>
 8009cd8:	a37d      	add	r3, pc, #500	@ (adr r3, 8009ed0 <__ieee754_pow+0x730>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	f7f6 fc4d 	bl	8000580 <__aeabi_dmul>
 8009ce6:	a37c      	add	r3, pc, #496	@ (adr r3, 8009ed8 <__ieee754_pow+0x738>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fa92 	bl	8000214 <__adddf3>
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	462b      	mov	r3, r5
 8009cf4:	f7f6 fc44 	bl	8000580 <__aeabi_dmul>
 8009cf8:	a379      	add	r3, pc, #484	@ (adr r3, 8009ee0 <__ieee754_pow+0x740>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fa89 	bl	8000214 <__adddf3>
 8009d02:	4622      	mov	r2, r4
 8009d04:	462b      	mov	r3, r5
 8009d06:	f7f6 fc3b 	bl	8000580 <__aeabi_dmul>
 8009d0a:	a377      	add	r3, pc, #476	@ (adr r3, 8009ee8 <__ieee754_pow+0x748>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fa80 	bl	8000214 <__adddf3>
 8009d14:	4622      	mov	r2, r4
 8009d16:	462b      	mov	r3, r5
 8009d18:	f7f6 fc32 	bl	8000580 <__aeabi_dmul>
 8009d1c:	a374      	add	r3, pc, #464	@ (adr r3, 8009ef0 <__ieee754_pow+0x750>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fa77 	bl	8000214 <__adddf3>
 8009d26:	4622      	mov	r2, r4
 8009d28:	462b      	mov	r3, r5
 8009d2a:	f7f6 fc29 	bl	8000580 <__aeabi_dmul>
 8009d2e:	a372      	add	r3, pc, #456	@ (adr r3, 8009ef8 <__ieee754_pow+0x758>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fa6e 	bl	8000214 <__adddf3>
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	462b      	mov	r3, r5
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 fc1c 	bl	8000580 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 fc16 	bl	8000580 <__aeabi_dmul>
 8009d54:	465a      	mov	r2, fp
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d60:	f7f6 fa58 	bl	8000214 <__adddf3>
 8009d64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d68:	f7f6 fc0a 	bl	8000580 <__aeabi_dmul>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	462b      	mov	r3, r5
 8009d70:	f7f6 fa50 	bl	8000214 <__adddf3>
 8009d74:	465a      	mov	r2, fp
 8009d76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	4649      	mov	r1, r9
 8009d80:	f7f6 fbfe 	bl	8000580 <__aeabi_dmul>
 8009d84:	4b6a      	ldr	r3, [pc, #424]	@ (8009f30 <__ieee754_pow+0x790>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	4606      	mov	r6, r0
 8009d8a:	460f      	mov	r7, r1
 8009d8c:	f7f6 fa42 	bl	8000214 <__adddf3>
 8009d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d94:	f7f6 fa3e 	bl	8000214 <__adddf3>
 8009d98:	46d8      	mov	r8, fp
 8009d9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009d9e:	460d      	mov	r5, r1
 8009da0:	465a      	mov	r2, fp
 8009da2:	460b      	mov	r3, r1
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009dac:	f7f6 fbe8 	bl	8000580 <__aeabi_dmul>
 8009db0:	465c      	mov	r4, fp
 8009db2:	4680      	mov	r8, r0
 8009db4:	4689      	mov	r9, r1
 8009db6:	4b5e      	ldr	r3, [pc, #376]	@ (8009f30 <__ieee754_pow+0x790>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 fa27 	bl	8000210 <__aeabi_dsub>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	f7f6 fa23 	bl	8000210 <__aeabi_dsub>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dd2:	f7f6 fa1d 	bl	8000210 <__aeabi_dsub>
 8009dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dda:	f7f6 fbd1 	bl	8000580 <__aeabi_dmul>
 8009dde:	4622      	mov	r2, r4
 8009de0:	4606      	mov	r6, r0
 8009de2:	460f      	mov	r7, r1
 8009de4:	462b      	mov	r3, r5
 8009de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dea:	f7f6 fbc9 	bl	8000580 <__aeabi_dmul>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4630      	mov	r0, r6
 8009df4:	4639      	mov	r1, r7
 8009df6:	f7f6 fa0d 	bl	8000214 <__adddf3>
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fa05 	bl	8000214 <__adddf3>
 8009e0a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009e0e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009f00 <__ieee754_pow+0x760>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	4658      	mov	r0, fp
 8009e16:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	f7f6 fbb0 	bl	8000580 <__aeabi_dmul>
 8009e20:	465c      	mov	r4, fp
 8009e22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e26:	4642      	mov	r2, r8
 8009e28:	464b      	mov	r3, r9
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	f7f6 f9ef 	bl	8000210 <__aeabi_dsub>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 f9e9 	bl	8000210 <__aeabi_dsub>
 8009e3e:	a332      	add	r3, pc, #200	@ (adr r3, 8009f08 <__ieee754_pow+0x768>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 fb9c 	bl	8000580 <__aeabi_dmul>
 8009e48:	a331      	add	r3, pc, #196	@ (adr r3, 8009f10 <__ieee754_pow+0x770>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 fb93 	bl	8000580 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7f6 f9d7 	bl	8000214 <__adddf3>
 8009e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e68:	4b32      	ldr	r3, [pc, #200]	@ (8009f34 <__ieee754_pow+0x794>)
 8009e6a:	4413      	add	r3, r2
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 f9d0 	bl	8000214 <__adddf3>
 8009e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e7a:	f7f6 fb17 	bl	80004ac <__aeabi_i2d>
 8009e7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e80:	4b2d      	ldr	r3, [pc, #180]	@ (8009f38 <__ieee754_pow+0x798>)
 8009e82:	4413      	add	r3, r2
 8009e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e88:	4606      	mov	r6, r0
 8009e8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e8e:	460f      	mov	r7, r1
 8009e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e94:	f7f6 f9be 	bl	8000214 <__adddf3>
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	f7f6 f9ba 	bl	8000214 <__adddf3>
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	f7f6 f9b6 	bl	8000214 <__adddf3>
 8009ea8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009eac:	4632      	mov	r2, r6
 8009eae:	463b      	mov	r3, r7
 8009eb0:	4658      	mov	r0, fp
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	f7f6 f9ac 	bl	8000210 <__aeabi_dsub>
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	f7f6 f9a8 	bl	8000210 <__aeabi_dsub>
 8009ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec4:	f7f6 f9a4 	bl	8000210 <__aeabi_dsub>
 8009ec8:	465c      	mov	r4, fp
 8009eca:	4602      	mov	r2, r0
 8009ecc:	e036      	b.n	8009f3c <__ieee754_pow+0x79c>
 8009ece:	bf00      	nop
 8009ed0:	4a454eef 	.word	0x4a454eef
 8009ed4:	3fca7e28 	.word	0x3fca7e28
 8009ed8:	93c9db65 	.word	0x93c9db65
 8009edc:	3fcd864a 	.word	0x3fcd864a
 8009ee0:	a91d4101 	.word	0xa91d4101
 8009ee4:	3fd17460 	.word	0x3fd17460
 8009ee8:	518f264d 	.word	0x518f264d
 8009eec:	3fd55555 	.word	0x3fd55555
 8009ef0:	db6fabff 	.word	0xdb6fabff
 8009ef4:	3fdb6db6 	.word	0x3fdb6db6
 8009ef8:	33333303 	.word	0x33333303
 8009efc:	3fe33333 	.word	0x3fe33333
 8009f00:	e0000000 	.word	0xe0000000
 8009f04:	3feec709 	.word	0x3feec709
 8009f08:	dc3a03fd 	.word	0xdc3a03fd
 8009f0c:	3feec709 	.word	0x3feec709
 8009f10:	145b01f5 	.word	0x145b01f5
 8009f14:	be3e2fe0 	.word	0xbe3e2fe0
 8009f18:	7ff00000 	.word	0x7ff00000
 8009f1c:	43400000 	.word	0x43400000
 8009f20:	0003988e 	.word	0x0003988e
 8009f24:	000bb679 	.word	0x000bb679
 8009f28:	0800b328 	.word	0x0800b328
 8009f2c:	3ff00000 	.word	0x3ff00000
 8009f30:	40080000 	.word	0x40080000
 8009f34:	0800b308 	.word	0x0800b308
 8009f38:	0800b318 	.word	0x0800b318
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f42:	e5d7      	b.n	8009af4 <__ieee754_pow+0x354>
 8009f44:	f04f 0a01 	mov.w	sl, #1
 8009f48:	e65e      	b.n	8009c08 <__ieee754_pow+0x468>
 8009f4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a21c <__ieee754_pow+0xa7c>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 f95e 	bl	8000214 <__adddf3>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f5e:	464b      	mov	r3, r9
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 f954 	bl	8000210 <__aeabi_dsub>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f70:	f7f6 fd96 	bl	8000aa0 <__aeabi_dcmpgt>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f47f ae00 	bne.w	8009b7a <__ieee754_pow+0x3da>
 8009f7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009f7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f82:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009f86:	fa43 fa0a 	asr.w	sl, r3, sl
 8009f8a:	44da      	add	sl, fp
 8009f8c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009f90:	489d      	ldr	r0, [pc, #628]	@ (800a208 <__ieee754_pow+0xa68>)
 8009f92:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009f96:	4108      	asrs	r0, r1
 8009f98:	ea00 030a 	and.w	r3, r0, sl
 8009f9c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009fa0:	f1c1 0114 	rsb	r1, r1, #20
 8009fa4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009fa8:	fa4a fa01 	asr.w	sl, sl, r1
 8009fac:	f1bb 0f00 	cmp.w	fp, #0
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	bfb8      	it	lt
 8009fba:	f1ca 0a00 	rsblt	sl, sl, #0
 8009fbe:	f7f6 f927 	bl	8000210 <__aeabi_dsub>
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	4689      	mov	r9, r1
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	463b      	mov	r3, r7
 8009fca:	4640      	mov	r0, r8
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 f921 	bl	8000214 <__adddf3>
 8009fd2:	2400      	movs	r4, #0
 8009fd4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a1c8 <__ieee754_pow+0xa28>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	460d      	mov	r5, r1
 8009fde:	f7f6 facf 	bl	8000580 <__aeabi_dmul>
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8009fe8:	464b      	mov	r3, r9
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 f90f 	bl	8000210 <__aeabi_dsub>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 f909 	bl	8000210 <__aeabi_dsub>
 8009ffe:	a374      	add	r3, pc, #464	@ (adr r3, 800a1d0 <__ieee754_pow+0xa30>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fabc 	bl	8000580 <__aeabi_dmul>
 800a008:	a373      	add	r3, pc, #460	@ (adr r3, 800a1d8 <__ieee754_pow+0xa38>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 fab3 	bl	8000580 <__aeabi_dmul>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 f8f7 	bl	8000214 <__adddf3>
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a032:	f7f6 f8ef 	bl	8000214 <__adddf3>
 800a036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a03a:	4680      	mov	r8, r0
 800a03c:	4689      	mov	r9, r1
 800a03e:	f7f6 f8e7 	bl	8000210 <__aeabi_dsub>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 f8e1 	bl	8000210 <__aeabi_dsub>
 800a04e:	4642      	mov	r2, r8
 800a050:	4606      	mov	r6, r0
 800a052:	460f      	mov	r7, r1
 800a054:	464b      	mov	r3, r9
 800a056:	4640      	mov	r0, r8
 800a058:	4649      	mov	r1, r9
 800a05a:	f7f6 fa91 	bl	8000580 <__aeabi_dmul>
 800a05e:	a360      	add	r3, pc, #384	@ (adr r3, 800a1e0 <__ieee754_pow+0xa40>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	4604      	mov	r4, r0
 800a066:	460d      	mov	r5, r1
 800a068:	f7f6 fa8a 	bl	8000580 <__aeabi_dmul>
 800a06c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a1e8 <__ieee754_pow+0xa48>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f8cd 	bl	8000210 <__aeabi_dsub>
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	f7f6 fa81 	bl	8000580 <__aeabi_dmul>
 800a07e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a1f0 <__ieee754_pow+0xa50>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f7f6 f8c6 	bl	8000214 <__adddf3>
 800a088:	4622      	mov	r2, r4
 800a08a:	462b      	mov	r3, r5
 800a08c:	f7f6 fa78 	bl	8000580 <__aeabi_dmul>
 800a090:	a359      	add	r3, pc, #356	@ (adr r3, 800a1f8 <__ieee754_pow+0xa58>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 f8bb 	bl	8000210 <__aeabi_dsub>
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 fa6f 	bl	8000580 <__aeabi_dmul>
 800a0a2:	a357      	add	r3, pc, #348	@ (adr r3, 800a200 <__ieee754_pow+0xa60>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7f6 f8b4 	bl	8000214 <__adddf3>
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	462b      	mov	r3, r5
 800a0b0:	f7f6 fa66 	bl	8000580 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 f8a8 	bl	8000210 <__aeabi_dsub>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 fa58 	bl	8000580 <__aeabi_dmul>
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 f897 	bl	8000210 <__aeabi_dsub>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ea:	f7f6 fb73 	bl	80007d4 <__aeabi_ddiv>
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	f7f6 fa41 	bl	8000580 <__aeabi_dmul>
 800a0fe:	4632      	mov	r2, r6
 800a100:	463b      	mov	r3, r7
 800a102:	f7f6 f887 	bl	8000214 <__adddf3>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 f87f 	bl	8000210 <__aeabi_dsub>
 800a112:	4642      	mov	r2, r8
 800a114:	464b      	mov	r3, r9
 800a116:	f7f6 f87b 	bl	8000210 <__aeabi_dsub>
 800a11a:	460b      	mov	r3, r1
 800a11c:	4602      	mov	r2, r0
 800a11e:	493b      	ldr	r1, [pc, #236]	@ (800a20c <__ieee754_pow+0xa6c>)
 800a120:	2000      	movs	r0, #0
 800a122:	f7f6 f875 	bl	8000210 <__aeabi_dsub>
 800a126:	ec41 0b10 	vmov	d0, r0, r1
 800a12a:	ee10 3a90 	vmov	r3, s1
 800a12e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a136:	da30      	bge.n	800a19a <__ieee754_pow+0x9fa>
 800a138:	4650      	mov	r0, sl
 800a13a:	f000 fc09 	bl	800a950 <scalbn>
 800a13e:	ec51 0b10 	vmov	r0, r1, d0
 800a142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a146:	f7ff bbd2 	b.w	80098ee <__ieee754_pow+0x14e>
 800a14a:	4c31      	ldr	r4, [pc, #196]	@ (800a210 <__ieee754_pow+0xa70>)
 800a14c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a150:	42a3      	cmp	r3, r4
 800a152:	d91a      	bls.n	800a18a <__ieee754_pow+0x9ea>
 800a154:	4b2f      	ldr	r3, [pc, #188]	@ (800a214 <__ieee754_pow+0xa74>)
 800a156:	440b      	add	r3, r1
 800a158:	4303      	orrs	r3, r0
 800a15a:	d009      	beq.n	800a170 <__ieee754_pow+0x9d0>
 800a15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	f7f6 fc7e 	bl	8000a64 <__aeabi_dcmplt>
 800a168:	3800      	subs	r0, #0
 800a16a:	bf18      	it	ne
 800a16c:	2001      	movne	r0, #1
 800a16e:	e42b      	b.n	80099c8 <__ieee754_pow+0x228>
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	f7f6 f84c 	bl	8000210 <__aeabi_dsub>
 800a178:	4632      	mov	r2, r6
 800a17a:	463b      	mov	r3, r7
 800a17c:	f7f6 fc86 	bl	8000a8c <__aeabi_dcmpge>
 800a180:	2800      	cmp	r0, #0
 800a182:	d1eb      	bne.n	800a15c <__ieee754_pow+0x9bc>
 800a184:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a224 <__ieee754_pow+0xa84>
 800a188:	e6f7      	b.n	8009f7a <__ieee754_pow+0x7da>
 800a18a:	469a      	mov	sl, r3
 800a18c:	4b22      	ldr	r3, [pc, #136]	@ (800a218 <__ieee754_pow+0xa78>)
 800a18e:	459a      	cmp	sl, r3
 800a190:	f63f aef3 	bhi.w	8009f7a <__ieee754_pow+0x7da>
 800a194:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a198:	e715      	b.n	8009fc6 <__ieee754_pow+0x826>
 800a19a:	ec51 0b10 	vmov	r0, r1, d0
 800a19e:	4619      	mov	r1, r3
 800a1a0:	e7cf      	b.n	800a142 <__ieee754_pow+0x9a2>
 800a1a2:	491a      	ldr	r1, [pc, #104]	@ (800a20c <__ieee754_pow+0xa6c>)
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f7ff bb18 	b.w	80097da <__ieee754_pow+0x3a>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f7ff bb14 	b.w	80097da <__ieee754_pow+0x3a>
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	f7ff bb10 	b.w	80097da <__ieee754_pow+0x3a>
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f7ff bb5e 	b.w	800987c <__ieee754_pow+0xdc>
 800a1c0:	2400      	movs	r4, #0
 800a1c2:	f7ff bb49 	b.w	8009858 <__ieee754_pow+0xb8>
 800a1c6:	bf00      	nop
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	3fe62e43 	.word	0x3fe62e43
 800a1d0:	fefa39ef 	.word	0xfefa39ef
 800a1d4:	3fe62e42 	.word	0x3fe62e42
 800a1d8:	0ca86c39 	.word	0x0ca86c39
 800a1dc:	be205c61 	.word	0xbe205c61
 800a1e0:	72bea4d0 	.word	0x72bea4d0
 800a1e4:	3e663769 	.word	0x3e663769
 800a1e8:	c5d26bf1 	.word	0xc5d26bf1
 800a1ec:	3ebbbd41 	.word	0x3ebbbd41
 800a1f0:	af25de2c 	.word	0xaf25de2c
 800a1f4:	3f11566a 	.word	0x3f11566a
 800a1f8:	16bebd93 	.word	0x16bebd93
 800a1fc:	3f66c16c 	.word	0x3f66c16c
 800a200:	5555553e 	.word	0x5555553e
 800a204:	3fc55555 	.word	0x3fc55555
 800a208:	fff00000 	.word	0xfff00000
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	4090cbff 	.word	0x4090cbff
 800a214:	3f6f3400 	.word	0x3f6f3400
 800a218:	3fe00000 	.word	0x3fe00000
 800a21c:	652b82fe 	.word	0x652b82fe
 800a220:	3c971547 	.word	0x3c971547
 800a224:	4090cc00 	.word	0x4090cc00

0800a228 <__ieee754_rem_pio2>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ec57 6b10 	vmov	r6, r7, d0
 800a230:	4bc5      	ldr	r3, [pc, #788]	@ (800a548 <__ieee754_rem_pio2+0x320>)
 800a232:	b08d      	sub	sp, #52	@ 0x34
 800a234:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a238:	4598      	cmp	r8, r3
 800a23a:	4604      	mov	r4, r0
 800a23c:	9704      	str	r7, [sp, #16]
 800a23e:	d807      	bhi.n	800a250 <__ieee754_rem_pio2+0x28>
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	ed80 0b00 	vstr	d0, [r0]
 800a248:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a24c:	2500      	movs	r5, #0
 800a24e:	e028      	b.n	800a2a2 <__ieee754_rem_pio2+0x7a>
 800a250:	4bbe      	ldr	r3, [pc, #760]	@ (800a54c <__ieee754_rem_pio2+0x324>)
 800a252:	4598      	cmp	r8, r3
 800a254:	d878      	bhi.n	800a348 <__ieee754_rem_pio2+0x120>
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	4dbd      	ldr	r5, [pc, #756]	@ (800a550 <__ieee754_rem_pio2+0x328>)
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	4630      	mov	r0, r6
 800a25e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a510 <__ieee754_rem_pio2+0x2e8>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	4639      	mov	r1, r7
 800a266:	dd38      	ble.n	800a2da <__ieee754_rem_pio2+0xb2>
 800a268:	f7f5 ffd2 	bl	8000210 <__aeabi_dsub>
 800a26c:	45a8      	cmp	r8, r5
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	d01a      	beq.n	800a2aa <__ieee754_rem_pio2+0x82>
 800a274:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a518 <__ieee754_rem_pio2+0x2f0>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ffc9 	bl	8000210 <__aeabi_dsub>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f5 ffc1 	bl	8000210 <__aeabi_dsub>
 800a28e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a518 <__ieee754_rem_pio2+0x2f0>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f7f5 ffbc 	bl	8000210 <__aeabi_dsub>
 800a298:	e9c4 8900 	strd	r8, r9, [r4]
 800a29c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2a0:	2501      	movs	r5, #1
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	b00d      	add	sp, #52	@ 0x34
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	a39d      	add	r3, pc, #628	@ (adr r3, 800a520 <__ieee754_rem_pio2+0x2f8>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 ffae 	bl	8000210 <__aeabi_dsub>
 800a2b4:	a39c      	add	r3, pc, #624	@ (adr r3, 800a528 <__ieee754_rem_pio2+0x300>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	f7f5 ffa7 	bl	8000210 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4680      	mov	r8, r0
 800a2c8:	4689      	mov	r9, r1
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f5 ff9f 	bl	8000210 <__aeabi_dsub>
 800a2d2:	a395      	add	r3, pc, #596	@ (adr r3, 800a528 <__ieee754_rem_pio2+0x300>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	e7dc      	b.n	800a294 <__ieee754_rem_pio2+0x6c>
 800a2da:	f7f5 ff9b 	bl	8000214 <__adddf3>
 800a2de:	45a8      	cmp	r8, r5
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	d018      	beq.n	800a318 <__ieee754_rem_pio2+0xf0>
 800a2e6:	a38c      	add	r3, pc, #560	@ (adr r3, 800a518 <__ieee754_rem_pio2+0x2f0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f5 ff92 	bl	8000214 <__adddf3>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ff88 	bl	8000210 <__aeabi_dsub>
 800a300:	a385      	add	r3, pc, #532	@ (adr r3, 800a518 <__ieee754_rem_pio2+0x2f0>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f5 ff85 	bl	8000214 <__adddf3>
 800a30a:	f04f 35ff 	mov.w	r5, #4294967295
 800a30e:	e9c4 8900 	strd	r8, r9, [r4]
 800a312:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a316:	e7c4      	b.n	800a2a2 <__ieee754_rem_pio2+0x7a>
 800a318:	a381      	add	r3, pc, #516	@ (adr r3, 800a520 <__ieee754_rem_pio2+0x2f8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff79 	bl	8000214 <__adddf3>
 800a322:	a381      	add	r3, pc, #516	@ (adr r3, 800a528 <__ieee754_rem_pio2+0x300>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	4606      	mov	r6, r0
 800a32a:	460f      	mov	r7, r1
 800a32c:	f7f5 ff72 	bl	8000214 <__adddf3>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4680      	mov	r8, r0
 800a336:	4689      	mov	r9, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f5 ff68 	bl	8000210 <__aeabi_dsub>
 800a340:	a379      	add	r3, pc, #484	@ (adr r3, 800a528 <__ieee754_rem_pio2+0x300>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	e7de      	b.n	800a306 <__ieee754_rem_pio2+0xde>
 800a348:	4b82      	ldr	r3, [pc, #520]	@ (800a554 <__ieee754_rem_pio2+0x32c>)
 800a34a:	4598      	cmp	r8, r3
 800a34c:	f200 80d1 	bhi.w	800a4f2 <__ieee754_rem_pio2+0x2ca>
 800a350:	f7fe fc32 	bl	8008bb8 <fabs>
 800a354:	ec57 6b10 	vmov	r6, r7, d0
 800a358:	a375      	add	r3, pc, #468	@ (adr r3, 800a530 <__ieee754_rem_pio2+0x308>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	f7f6 f90d 	bl	8000580 <__aeabi_dmul>
 800a366:	4b7c      	ldr	r3, [pc, #496]	@ (800a558 <__ieee754_rem_pio2+0x330>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f5 ff53 	bl	8000214 <__adddf3>
 800a36e:	f7f6 fbb7 	bl	8000ae0 <__aeabi_d2iz>
 800a372:	4605      	mov	r5, r0
 800a374:	f7f6 f89a 	bl	80004ac <__aeabi_i2d>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a380:	a363      	add	r3, pc, #396	@ (adr r3, 800a510 <__ieee754_rem_pio2+0x2e8>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f8fb 	bl	8000580 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4630      	mov	r0, r6
 800a390:	4639      	mov	r1, r7
 800a392:	f7f5 ff3d 	bl	8000210 <__aeabi_dsub>
 800a396:	a360      	add	r3, pc, #384	@ (adr r3, 800a518 <__ieee754_rem_pio2+0x2f0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a4:	f7f6 f8ec 	bl	8000580 <__aeabi_dmul>
 800a3a8:	2d1f      	cmp	r5, #31
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	dc0c      	bgt.n	800a3ca <__ieee754_rem_pio2+0x1a2>
 800a3b0:	4b6a      	ldr	r3, [pc, #424]	@ (800a55c <__ieee754_rem_pio2+0x334>)
 800a3b2:	1e6a      	subs	r2, r5, #1
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	4543      	cmp	r3, r8
 800a3ba:	d006      	beq.n	800a3ca <__ieee754_rem_pio2+0x1a2>
 800a3bc:	4632      	mov	r2, r6
 800a3be:	463b      	mov	r3, r7
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	f7f5 ff24 	bl	8000210 <__aeabi_dsub>
 800a3c8:	e00e      	b.n	800a3e8 <__ieee754_rem_pio2+0x1c0>
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	f7f5 ff1d 	bl	8000210 <__aeabi_dsub>
 800a3d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a3e4:	2b10      	cmp	r3, #16
 800a3e6:	dc02      	bgt.n	800a3ee <__ieee754_rem_pio2+0x1c6>
 800a3e8:	e9c4 0100 	strd	r0, r1, [r4]
 800a3ec:	e039      	b.n	800a462 <__ieee754_rem_pio2+0x23a>
 800a3ee:	a34c      	add	r3, pc, #304	@ (adr r3, 800a520 <__ieee754_rem_pio2+0x2f8>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f8:	f7f6 f8c2 	bl	8000580 <__aeabi_dmul>
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	f7f5 ff02 	bl	8000210 <__aeabi_dsub>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4680      	mov	r8, r0
 800a412:	4689      	mov	r9, r1
 800a414:	4650      	mov	r0, sl
 800a416:	4659      	mov	r1, fp
 800a418:	f7f5 fefa 	bl	8000210 <__aeabi_dsub>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f5 fef6 	bl	8000210 <__aeabi_dsub>
 800a424:	a340      	add	r3, pc, #256	@ (adr r3, 800a528 <__ieee754_rem_pio2+0x300>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a432:	f7f6 f8a5 	bl	8000580 <__aeabi_dmul>
 800a436:	4632      	mov	r2, r6
 800a438:	463b      	mov	r3, r7
 800a43a:	f7f5 fee9 	bl	8000210 <__aeabi_dsub>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f5 fee1 	bl	8000210 <__aeabi_dsub>
 800a44e:	9a05      	ldr	r2, [sp, #20]
 800a450:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b31      	cmp	r3, #49	@ 0x31
 800a458:	dc20      	bgt.n	800a49c <__ieee754_rem_pio2+0x274>
 800a45a:	e9c4 0100 	strd	r0, r1, [r4]
 800a45e:	46c2      	mov	sl, r8
 800a460:	46cb      	mov	fp, r9
 800a462:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a466:	4650      	mov	r0, sl
 800a468:	4642      	mov	r2, r8
 800a46a:	464b      	mov	r3, r9
 800a46c:	4659      	mov	r1, fp
 800a46e:	f7f5 fecf 	bl	8000210 <__aeabi_dsub>
 800a472:	463b      	mov	r3, r7
 800a474:	4632      	mov	r2, r6
 800a476:	f7f5 fecb 	bl	8000210 <__aeabi_dsub>
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a482:	f6bf af0e 	bge.w	800a2a2 <__ieee754_rem_pio2+0x7a>
 800a486:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a490:	f8c4 8000 	str.w	r8, [r4]
 800a494:	60a0      	str	r0, [r4, #8]
 800a496:	60e3      	str	r3, [r4, #12]
 800a498:	426d      	negs	r5, r5
 800a49a:	e702      	b.n	800a2a2 <__ieee754_rem_pio2+0x7a>
 800a49c:	a326      	add	r3, pc, #152	@ (adr r3, 800a538 <__ieee754_rem_pio2+0x310>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4a6:	f7f6 f86b 	bl	8000580 <__aeabi_dmul>
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f5 feab 	bl	8000210 <__aeabi_dsub>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4682      	mov	sl, r0
 800a4c0:	468b      	mov	fp, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f5 fea3 	bl	8000210 <__aeabi_dsub>
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	f7f5 fe9f 	bl	8000210 <__aeabi_dsub>
 800a4d2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a540 <__ieee754_rem_pio2+0x318>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	4606      	mov	r6, r0
 800a4da:	460f      	mov	r7, r1
 800a4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e0:	f7f6 f84e 	bl	8000580 <__aeabi_dmul>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f5 fe92 	bl	8000210 <__aeabi_dsub>
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	e764      	b.n	800a3bc <__ieee754_rem_pio2+0x194>
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <__ieee754_rem_pio2+0x338>)
 800a4f4:	4598      	cmp	r8, r3
 800a4f6:	d935      	bls.n	800a564 <__ieee754_rem_pio2+0x33c>
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f5 fe86 	bl	8000210 <__aeabi_dsub>
 800a504:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a508:	e9c4 0100 	strd	r0, r1, [r4]
 800a50c:	e69e      	b.n	800a24c <__ieee754_rem_pio2+0x24>
 800a50e:	bf00      	nop
 800a510:	54400000 	.word	0x54400000
 800a514:	3ff921fb 	.word	0x3ff921fb
 800a518:	1a626331 	.word	0x1a626331
 800a51c:	3dd0b461 	.word	0x3dd0b461
 800a520:	1a600000 	.word	0x1a600000
 800a524:	3dd0b461 	.word	0x3dd0b461
 800a528:	2e037073 	.word	0x2e037073
 800a52c:	3ba3198a 	.word	0x3ba3198a
 800a530:	6dc9c883 	.word	0x6dc9c883
 800a534:	3fe45f30 	.word	0x3fe45f30
 800a538:	2e000000 	.word	0x2e000000
 800a53c:	3ba3198a 	.word	0x3ba3198a
 800a540:	252049c1 	.word	0x252049c1
 800a544:	397b839a 	.word	0x397b839a
 800a548:	3fe921fb 	.word	0x3fe921fb
 800a54c:	4002d97b 	.word	0x4002d97b
 800a550:	3ff921fb 	.word	0x3ff921fb
 800a554:	413921fb 	.word	0x413921fb
 800a558:	3fe00000 	.word	0x3fe00000
 800a55c:	0800b338 	.word	0x0800b338
 800a560:	7fefffff 	.word	0x7fefffff
 800a564:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a568:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a56c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a570:	4630      	mov	r0, r6
 800a572:	460f      	mov	r7, r1
 800a574:	f7f6 fab4 	bl	8000ae0 <__aeabi_d2iz>
 800a578:	f7f5 ff98 	bl	80004ac <__aeabi_i2d>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a588:	f7f5 fe42 	bl	8000210 <__aeabi_dsub>
 800a58c:	4b22      	ldr	r3, [pc, #136]	@ (800a618 <__ieee754_rem_pio2+0x3f0>)
 800a58e:	2200      	movs	r2, #0
 800a590:	f7f5 fff6 	bl	8000580 <__aeabi_dmul>
 800a594:	460f      	mov	r7, r1
 800a596:	4606      	mov	r6, r0
 800a598:	f7f6 faa2 	bl	8000ae0 <__aeabi_d2iz>
 800a59c:	f7f5 ff86 	bl	80004ac <__aeabi_i2d>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5ac:	f7f5 fe30 	bl	8000210 <__aeabi_dsub>
 800a5b0:	4b19      	ldr	r3, [pc, #100]	@ (800a618 <__ieee754_rem_pio2+0x3f0>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f7f5 ffe4 	bl	8000580 <__aeabi_dmul>
 800a5b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a5bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a5c0:	f04f 0803 	mov.w	r8, #3
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	2700      	movs	r7, #0
 800a5c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	46c2      	mov	sl, r8
 800a5d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5d6:	f7f6 fa3b 	bl	8000a50 <__aeabi_dcmpeq>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d1f4      	bne.n	800a5c8 <__ieee754_rem_pio2+0x3a0>
 800a5de:	4b0f      	ldr	r3, [pc, #60]	@ (800a61c <__ieee754_rem_pio2+0x3f4>)
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	4653      	mov	r3, sl
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	a806      	add	r0, sp, #24
 800a5ee:	f000 fa6b 	bl	800aac8 <__kernel_rem_pio2>
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	f6bf ae53 	bge.w	800a2a2 <__ieee754_rem_pio2+0x7a>
 800a5fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a600:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a604:	e9c4 2300 	strd	r2, r3, [r4]
 800a608:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a610:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a614:	e740      	b.n	800a498 <__ieee754_rem_pio2+0x270>
 800a616:	bf00      	nop
 800a618:	41700000 	.word	0x41700000
 800a61c:	0800b3b8 	.word	0x0800b3b8

0800a620 <atan>:
 800a620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	ec55 4b10 	vmov	r4, r5, d0
 800a628:	4bbf      	ldr	r3, [pc, #764]	@ (800a928 <atan+0x308>)
 800a62a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a62e:	429e      	cmp	r6, r3
 800a630:	46ab      	mov	fp, r5
 800a632:	d918      	bls.n	800a666 <atan+0x46>
 800a634:	4bbd      	ldr	r3, [pc, #756]	@ (800a92c <atan+0x30c>)
 800a636:	429e      	cmp	r6, r3
 800a638:	d801      	bhi.n	800a63e <atan+0x1e>
 800a63a:	d109      	bne.n	800a650 <atan+0x30>
 800a63c:	b144      	cbz	r4, 800a650 <atan+0x30>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f5 fde5 	bl	8000214 <__adddf3>
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	e006      	b.n	800a65e <atan+0x3e>
 800a650:	f1bb 0f00 	cmp.w	fp, #0
 800a654:	f340 812b 	ble.w	800a8ae <atan+0x28e>
 800a658:	a597      	add	r5, pc, #604	@ (adr r5, 800a8b8 <atan+0x298>)
 800a65a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a65e:	ec45 4b10 	vmov	d0, r4, r5
 800a662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a666:	4bb2      	ldr	r3, [pc, #712]	@ (800a930 <atan+0x310>)
 800a668:	429e      	cmp	r6, r3
 800a66a:	d813      	bhi.n	800a694 <atan+0x74>
 800a66c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a670:	429e      	cmp	r6, r3
 800a672:	d80c      	bhi.n	800a68e <atan+0x6e>
 800a674:	a392      	add	r3, pc, #584	@ (adr r3, 800a8c0 <atan+0x2a0>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	f7f5 fdc9 	bl	8000214 <__adddf3>
 800a682:	4bac      	ldr	r3, [pc, #688]	@ (800a934 <atan+0x314>)
 800a684:	2200      	movs	r2, #0
 800a686:	f7f6 fa0b 	bl	8000aa0 <__aeabi_dcmpgt>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d1e7      	bne.n	800a65e <atan+0x3e>
 800a68e:	f04f 3aff 	mov.w	sl, #4294967295
 800a692:	e029      	b.n	800a6e8 <atan+0xc8>
 800a694:	f7fe fa90 	bl	8008bb8 <fabs>
 800a698:	4ba7      	ldr	r3, [pc, #668]	@ (800a938 <atan+0x318>)
 800a69a:	429e      	cmp	r6, r3
 800a69c:	ec55 4b10 	vmov	r4, r5, d0
 800a6a0:	f200 80bc 	bhi.w	800a81c <atan+0x1fc>
 800a6a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	f200 809e 	bhi.w	800a7ea <atan+0x1ca>
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7f5 fdad 	bl	8000214 <__adddf3>
 800a6ba:	4b9e      	ldr	r3, [pc, #632]	@ (800a934 <atan+0x314>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f7f5 fda7 	bl	8000210 <__aeabi_dsub>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fda0 	bl	8000214 <__adddf3>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f6 f87a 	bl	80007d4 <__aeabi_ddiv>
 800a6e0:	f04f 0a00 	mov.w	sl, #0
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f7f5 ff46 	bl	8000580 <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4689      	mov	r9, r1
 800a6fc:	f7f5 ff40 	bl	8000580 <__aeabi_dmul>
 800a700:	a371      	add	r3, pc, #452	@ (adr r3, 800a8c8 <atan+0x2a8>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	4606      	mov	r6, r0
 800a708:	460f      	mov	r7, r1
 800a70a:	f7f5 ff39 	bl	8000580 <__aeabi_dmul>
 800a70e:	a370      	add	r3, pc, #448	@ (adr r3, 800a8d0 <atan+0x2b0>)
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f5 fd7e 	bl	8000214 <__adddf3>
 800a718:	4632      	mov	r2, r6
 800a71a:	463b      	mov	r3, r7
 800a71c:	f7f5 ff30 	bl	8000580 <__aeabi_dmul>
 800a720:	a36d      	add	r3, pc, #436	@ (adr r3, 800a8d8 <atan+0x2b8>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 fd75 	bl	8000214 <__adddf3>
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	f7f5 ff27 	bl	8000580 <__aeabi_dmul>
 800a732:	a36b      	add	r3, pc, #428	@ (adr r3, 800a8e0 <atan+0x2c0>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fd6c 	bl	8000214 <__adddf3>
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	f7f5 ff1e 	bl	8000580 <__aeabi_dmul>
 800a744:	a368      	add	r3, pc, #416	@ (adr r3, 800a8e8 <atan+0x2c8>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd63 	bl	8000214 <__adddf3>
 800a74e:	4632      	mov	r2, r6
 800a750:	463b      	mov	r3, r7
 800a752:	f7f5 ff15 	bl	8000580 <__aeabi_dmul>
 800a756:	a366      	add	r3, pc, #408	@ (adr r3, 800a8f0 <atan+0x2d0>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd5a 	bl	8000214 <__adddf3>
 800a760:	4642      	mov	r2, r8
 800a762:	464b      	mov	r3, r9
 800a764:	f7f5 ff0c 	bl	8000580 <__aeabi_dmul>
 800a768:	a363      	add	r3, pc, #396	@ (adr r3, 800a8f8 <atan+0x2d8>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	4680      	mov	r8, r0
 800a770:	4689      	mov	r9, r1
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	f7f5 ff03 	bl	8000580 <__aeabi_dmul>
 800a77a:	a361      	add	r3, pc, #388	@ (adr r3, 800a900 <atan+0x2e0>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fd46 	bl	8000210 <__aeabi_dsub>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f5 fefa 	bl	8000580 <__aeabi_dmul>
 800a78c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a908 <atan+0x2e8>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	f7f5 fd3d 	bl	8000210 <__aeabi_dsub>
 800a796:	4632      	mov	r2, r6
 800a798:	463b      	mov	r3, r7
 800a79a:	f7f5 fef1 	bl	8000580 <__aeabi_dmul>
 800a79e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a910 <atan+0x2f0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd34 	bl	8000210 <__aeabi_dsub>
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	463b      	mov	r3, r7
 800a7ac:	f7f5 fee8 	bl	8000580 <__aeabi_dmul>
 800a7b0:	a359      	add	r3, pc, #356	@ (adr r3, 800a918 <atan+0x2f8>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 fd2b 	bl	8000210 <__aeabi_dsub>
 800a7ba:	4632      	mov	r2, r6
 800a7bc:	463b      	mov	r3, r7
 800a7be:	f7f5 fedf 	bl	8000580 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f5 fd23 	bl	8000214 <__adddf3>
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	f7f5 fed5 	bl	8000580 <__aeabi_dmul>
 800a7d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	d148      	bne.n	800a872 <atan+0x252>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f5 fd14 	bl	8000210 <__aeabi_dsub>
 800a7e8:	e72f      	b.n	800a64a <atan+0x2a>
 800a7ea:	4b52      	ldr	r3, [pc, #328]	@ (800a934 <atan+0x314>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f5 fd0d 	bl	8000210 <__aeabi_dsub>
 800a7f6:	4b4f      	ldr	r3, [pc, #316]	@ (800a934 <atan+0x314>)
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	f7f5 fd07 	bl	8000214 <__adddf3>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f5 ffe1 	bl	80007d4 <__aeabi_ddiv>
 800a812:	f04f 0a01 	mov.w	sl, #1
 800a816:	4604      	mov	r4, r0
 800a818:	460d      	mov	r5, r1
 800a81a:	e765      	b.n	800a6e8 <atan+0xc8>
 800a81c:	4b47      	ldr	r3, [pc, #284]	@ (800a93c <atan+0x31c>)
 800a81e:	429e      	cmp	r6, r3
 800a820:	d21c      	bcs.n	800a85c <atan+0x23c>
 800a822:	4b47      	ldr	r3, [pc, #284]	@ (800a940 <atan+0x320>)
 800a824:	2200      	movs	r2, #0
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f5 fcf1 	bl	8000210 <__aeabi_dsub>
 800a82e:	4b44      	ldr	r3, [pc, #272]	@ (800a940 <atan+0x320>)
 800a830:	4606      	mov	r6, r0
 800a832:	460f      	mov	r7, r1
 800a834:	2200      	movs	r2, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f5 fea1 	bl	8000580 <__aeabi_dmul>
 800a83e:	4b3d      	ldr	r3, [pc, #244]	@ (800a934 <atan+0x314>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fce7 	bl	8000214 <__adddf3>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 ffc1 	bl	80007d4 <__aeabi_ddiv>
 800a852:	f04f 0a02 	mov.w	sl, #2
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	e745      	b.n	800a6e8 <atan+0xc8>
 800a85c:	4622      	mov	r2, r4
 800a85e:	462b      	mov	r3, r5
 800a860:	4938      	ldr	r1, [pc, #224]	@ (800a944 <atan+0x324>)
 800a862:	2000      	movs	r0, #0
 800a864:	f7f5 ffb6 	bl	80007d4 <__aeabi_ddiv>
 800a868:	f04f 0a03 	mov.w	sl, #3
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	e73a      	b.n	800a6e8 <atan+0xc8>
 800a872:	4b35      	ldr	r3, [pc, #212]	@ (800a948 <atan+0x328>)
 800a874:	4e35      	ldr	r6, [pc, #212]	@ (800a94c <atan+0x32c>)
 800a876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f7f5 fcc7 	bl	8000210 <__aeabi_dsub>
 800a882:	4622      	mov	r2, r4
 800a884:	462b      	mov	r3, r5
 800a886:	f7f5 fcc3 	bl	8000210 <__aeabi_dsub>
 800a88a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a896:	f7f5 fcbb 	bl	8000210 <__aeabi_dsub>
 800a89a:	f1bb 0f00 	cmp.w	fp, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	f6bf aedc 	bge.w	800a65e <atan+0x3e>
 800a8a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8aa:	461d      	mov	r5, r3
 800a8ac:	e6d7      	b.n	800a65e <atan+0x3e>
 800a8ae:	a51c      	add	r5, pc, #112	@ (adr r5, 800a920 <atan+0x300>)
 800a8b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8b4:	e6d3      	b.n	800a65e <atan+0x3e>
 800a8b6:	bf00      	nop
 800a8b8:	54442d18 	.word	0x54442d18
 800a8bc:	3ff921fb 	.word	0x3ff921fb
 800a8c0:	8800759c 	.word	0x8800759c
 800a8c4:	7e37e43c 	.word	0x7e37e43c
 800a8c8:	e322da11 	.word	0xe322da11
 800a8cc:	3f90ad3a 	.word	0x3f90ad3a
 800a8d0:	24760deb 	.word	0x24760deb
 800a8d4:	3fa97b4b 	.word	0x3fa97b4b
 800a8d8:	a0d03d51 	.word	0xa0d03d51
 800a8dc:	3fb10d66 	.word	0x3fb10d66
 800a8e0:	c54c206e 	.word	0xc54c206e
 800a8e4:	3fb745cd 	.word	0x3fb745cd
 800a8e8:	920083ff 	.word	0x920083ff
 800a8ec:	3fc24924 	.word	0x3fc24924
 800a8f0:	5555550d 	.word	0x5555550d
 800a8f4:	3fd55555 	.word	0x3fd55555
 800a8f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a8fc:	bfa2b444 	.word	0xbfa2b444
 800a900:	52defd9a 	.word	0x52defd9a
 800a904:	3fadde2d 	.word	0x3fadde2d
 800a908:	af749a6d 	.word	0xaf749a6d
 800a90c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a910:	fe231671 	.word	0xfe231671
 800a914:	3fbc71c6 	.word	0x3fbc71c6
 800a918:	9998ebc4 	.word	0x9998ebc4
 800a91c:	3fc99999 	.word	0x3fc99999
 800a920:	54442d18 	.word	0x54442d18
 800a924:	bff921fb 	.word	0xbff921fb
 800a928:	440fffff 	.word	0x440fffff
 800a92c:	7ff00000 	.word	0x7ff00000
 800a930:	3fdbffff 	.word	0x3fdbffff
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	3ff2ffff 	.word	0x3ff2ffff
 800a93c:	40038000 	.word	0x40038000
 800a940:	3ff80000 	.word	0x3ff80000
 800a944:	bff00000 	.word	0xbff00000
 800a948:	0800b4c0 	.word	0x0800b4c0
 800a94c:	0800b4e0 	.word	0x0800b4e0

0800a950 <scalbn>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	ec55 4b10 	vmov	r4, r5, d0
 800a956:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a95a:	4606      	mov	r6, r0
 800a95c:	462b      	mov	r3, r5
 800a95e:	b991      	cbnz	r1, 800a986 <scalbn+0x36>
 800a960:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a964:	4323      	orrs	r3, r4
 800a966:	d03d      	beq.n	800a9e4 <scalbn+0x94>
 800a968:	4b35      	ldr	r3, [pc, #212]	@ (800aa40 <scalbn+0xf0>)
 800a96a:	4620      	mov	r0, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	2200      	movs	r2, #0
 800a970:	f7f5 fe06 	bl	8000580 <__aeabi_dmul>
 800a974:	4b33      	ldr	r3, [pc, #204]	@ (800aa44 <scalbn+0xf4>)
 800a976:	429e      	cmp	r6, r3
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	da0f      	bge.n	800a99e <scalbn+0x4e>
 800a97e:	a328      	add	r3, pc, #160	@ (adr r3, 800aa20 <scalbn+0xd0>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	e01e      	b.n	800a9c4 <scalbn+0x74>
 800a986:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a98a:	4291      	cmp	r1, r2
 800a98c:	d10b      	bne.n	800a9a6 <scalbn+0x56>
 800a98e:	4622      	mov	r2, r4
 800a990:	4620      	mov	r0, r4
 800a992:	4629      	mov	r1, r5
 800a994:	f7f5 fc3e 	bl	8000214 <__adddf3>
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	e022      	b.n	800a9e4 <scalbn+0x94>
 800a99e:	460b      	mov	r3, r1
 800a9a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a9a4:	3936      	subs	r1, #54	@ 0x36
 800a9a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a9aa:	4296      	cmp	r6, r2
 800a9ac:	dd0d      	ble.n	800a9ca <scalbn+0x7a>
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800aa28 <scalbn+0xd8>)
 800a9b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b6:	da02      	bge.n	800a9be <scalbn+0x6e>
 800a9b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800aa30 <scalbn+0xe0>)
 800a9ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9be:	a31a      	add	r3, pc, #104	@ (adr r3, 800aa28 <scalbn+0xd8>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fddc 	bl	8000580 <__aeabi_dmul>
 800a9c8:	e7e6      	b.n	800a998 <scalbn+0x48>
 800a9ca:	1872      	adds	r2, r6, r1
 800a9cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a9d0:	428a      	cmp	r2, r1
 800a9d2:	dcec      	bgt.n	800a9ae <scalbn+0x5e>
 800a9d4:	2a00      	cmp	r2, #0
 800a9d6:	dd08      	ble.n	800a9ea <scalbn+0x9a>
 800a9d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a9dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a9e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9e4:	ec45 4b10 	vmov	d0, r4, r5
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a9ee:	da08      	bge.n	800aa02 <scalbn+0xb2>
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	a10b      	add	r1, pc, #44	@ (adr r1, 800aa20 <scalbn+0xd0>)
 800a9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f8:	dac1      	bge.n	800a97e <scalbn+0x2e>
 800a9fa:	a10f      	add	r1, pc, #60	@ (adr r1, 800aa38 <scalbn+0xe8>)
 800a9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa00:	e7bd      	b.n	800a97e <scalbn+0x2e>
 800aa02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa06:	3236      	adds	r2, #54	@ 0x36
 800aa08:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa10:	4620      	mov	r0, r4
 800aa12:	4b0d      	ldr	r3, [pc, #52]	@ (800aa48 <scalbn+0xf8>)
 800aa14:	4629      	mov	r1, r5
 800aa16:	2200      	movs	r2, #0
 800aa18:	e7d4      	b.n	800a9c4 <scalbn+0x74>
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w
 800aa20:	c2f8f359 	.word	0xc2f8f359
 800aa24:	01a56e1f 	.word	0x01a56e1f
 800aa28:	8800759c 	.word	0x8800759c
 800aa2c:	7e37e43c 	.word	0x7e37e43c
 800aa30:	8800759c 	.word	0x8800759c
 800aa34:	fe37e43c 	.word	0xfe37e43c
 800aa38:	c2f8f359 	.word	0xc2f8f359
 800aa3c:	81a56e1f 	.word	0x81a56e1f
 800aa40:	43500000 	.word	0x43500000
 800aa44:	ffff3cb0 	.word	0xffff3cb0
 800aa48:	3c900000 	.word	0x3c900000

0800aa4c <with_errno>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	ed2d 8b02 	vpush	{d8}
 800aa52:	eeb0 8a40 	vmov.f32	s16, s0
 800aa56:	eef0 8a60 	vmov.f32	s17, s1
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	f7fd fdde 	bl	800861c <__errno>
 800aa60:	eeb0 0a48 	vmov.f32	s0, s16
 800aa64:	eef0 0a68 	vmov.f32	s1, s17
 800aa68:	ecbd 8b02 	vpop	{d8}
 800aa6c:	6004      	str	r4, [r0, #0]
 800aa6e:	bd10      	pop	{r4, pc}

0800aa70 <xflow>:
 800aa70:	4603      	mov	r3, r0
 800aa72:	b507      	push	{r0, r1, r2, lr}
 800aa74:	ec51 0b10 	vmov	r0, r1, d0
 800aa78:	b183      	cbz	r3, 800aa9c <xflow+0x2c>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa80:	e9cd 2300 	strd	r2, r3, [sp]
 800aa84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa88:	f7f5 fd7a 	bl	8000580 <__aeabi_dmul>
 800aa8c:	ec41 0b10 	vmov	d0, r0, r1
 800aa90:	2022      	movs	r0, #34	@ 0x22
 800aa92:	b003      	add	sp, #12
 800aa94:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa98:	f7ff bfd8 	b.w	800aa4c <with_errno>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	e7ee      	b.n	800aa80 <xflow+0x10>
 800aaa2:	0000      	movs	r0, r0
 800aaa4:	0000      	movs	r0, r0
	...

0800aaa8 <__math_uflow>:
 800aaa8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aab0 <__math_uflow+0x8>
 800aaac:	f7ff bfe0 	b.w	800aa70 <xflow>
 800aab0:	00000000 	.word	0x00000000
 800aab4:	10000000 	.word	0x10000000

0800aab8 <__math_oflow>:
 800aab8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aac0 <__math_oflow+0x8>
 800aabc:	f7ff bfd8 	b.w	800aa70 <xflow>
 800aac0:	00000000 	.word	0x00000000
 800aac4:	70000000 	.word	0x70000000

0800aac8 <__kernel_rem_pio2>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	ed2d 8b02 	vpush	{d8}
 800aad0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800aad4:	f112 0f14 	cmn.w	r2, #20
 800aad8:	9306      	str	r3, [sp, #24]
 800aada:	9104      	str	r1, [sp, #16]
 800aadc:	4bbe      	ldr	r3, [pc, #760]	@ (800add8 <__kernel_rem_pio2+0x310>)
 800aade:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800aae0:	9008      	str	r0, [sp, #32]
 800aae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	9b06      	ldr	r3, [sp, #24]
 800aaea:	f103 33ff 	add.w	r3, r3, #4294967295
 800aaee:	bfa8      	it	ge
 800aaf0:	1ed4      	subge	r4, r2, #3
 800aaf2:	9305      	str	r3, [sp, #20]
 800aaf4:	bfb2      	itee	lt
 800aaf6:	2400      	movlt	r4, #0
 800aaf8:	2318      	movge	r3, #24
 800aafa:	fb94 f4f3 	sdivge	r4, r4, r3
 800aafe:	f06f 0317 	mvn.w	r3, #23
 800ab02:	fb04 3303 	mla	r3, r4, r3, r3
 800ab06:	eb03 0b02 	add.w	fp, r3, r2
 800ab0a:	9b00      	ldr	r3, [sp, #0]
 800ab0c:	9a05      	ldr	r2, [sp, #20]
 800ab0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800adc8 <__kernel_rem_pio2+0x300>
 800ab12:	eb03 0802 	add.w	r8, r3, r2
 800ab16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ab18:	1aa7      	subs	r7, r4, r2
 800ab1a:	ae20      	add	r6, sp, #128	@ 0x80
 800ab1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ab20:	2500      	movs	r5, #0
 800ab22:	4545      	cmp	r5, r8
 800ab24:	dd13      	ble.n	800ab4e <__kernel_rem_pio2+0x86>
 800ab26:	9b06      	ldr	r3, [sp, #24]
 800ab28:	aa20      	add	r2, sp, #128	@ 0x80
 800ab2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ab2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ab32:	f04f 0800 	mov.w	r8, #0
 800ab36:	9b00      	ldr	r3, [sp, #0]
 800ab38:	4598      	cmp	r8, r3
 800ab3a:	dc31      	bgt.n	800aba0 <__kernel_rem_pio2+0xd8>
 800ab3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800adc8 <__kernel_rem_pio2+0x300>
 800ab40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab48:	462f      	mov	r7, r5
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	e01b      	b.n	800ab86 <__kernel_rem_pio2+0xbe>
 800ab4e:	42ef      	cmn	r7, r5
 800ab50:	d407      	bmi.n	800ab62 <__kernel_rem_pio2+0x9a>
 800ab52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ab56:	f7f5 fca9 	bl	80004ac <__aeabi_i2d>
 800ab5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ab5e:	3501      	adds	r5, #1
 800ab60:	e7df      	b.n	800ab22 <__kernel_rem_pio2+0x5a>
 800ab62:	ec51 0b18 	vmov	r0, r1, d8
 800ab66:	e7f8      	b.n	800ab5a <__kernel_rem_pio2+0x92>
 800ab68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ab70:	f7f5 fd06 	bl	8000580 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab7c:	f7f5 fb4a 	bl	8000214 <__adddf3>
 800ab80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab84:	3601      	adds	r6, #1
 800ab86:	9b05      	ldr	r3, [sp, #20]
 800ab88:	429e      	cmp	r6, r3
 800ab8a:	f1a7 0708 	sub.w	r7, r7, #8
 800ab8e:	ddeb      	ble.n	800ab68 <__kernel_rem_pio2+0xa0>
 800ab90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab94:	f108 0801 	add.w	r8, r8, #1
 800ab98:	ecaa 7b02 	vstmia	sl!, {d7}
 800ab9c:	3508      	adds	r5, #8
 800ab9e:	e7ca      	b.n	800ab36 <__kernel_rem_pio2+0x6e>
 800aba0:	9b00      	ldr	r3, [sp, #0]
 800aba2:	f8dd 8000 	ldr.w	r8, [sp]
 800aba6:	aa0c      	add	r2, sp, #48	@ 0x30
 800aba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abac:	930a      	str	r3, [sp, #40]	@ 0x28
 800abae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800abb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800abba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abbc:	ab98      	add	r3, sp, #608	@ 0x260
 800abbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800abc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abca:	ac0c      	add	r4, sp, #48	@ 0x30
 800abcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800abce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800abd2:	46a1      	mov	r9, r4
 800abd4:	46c2      	mov	sl, r8
 800abd6:	f1ba 0f00 	cmp.w	sl, #0
 800abda:	f1a5 0508 	sub.w	r5, r5, #8
 800abde:	dc77      	bgt.n	800acd0 <__kernel_rem_pio2+0x208>
 800abe0:	4658      	mov	r0, fp
 800abe2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800abe6:	f7ff feb3 	bl	800a950 <scalbn>
 800abea:	ec57 6b10 	vmov	r6, r7, d0
 800abee:	2200      	movs	r2, #0
 800abf0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fcc2 	bl	8000580 <__aeabi_dmul>
 800abfc:	ec41 0b10 	vmov	d0, r0, r1
 800ac00:	f000 faba 	bl	800b178 <floor>
 800ac04:	4b75      	ldr	r3, [pc, #468]	@ (800addc <__kernel_rem_pio2+0x314>)
 800ac06:	ec51 0b10 	vmov	r0, r1, d0
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f7f5 fcb8 	bl	8000580 <__aeabi_dmul>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 fafa 	bl	8000210 <__aeabi_dsub>
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	4606      	mov	r6, r0
 800ac20:	f7f5 ff5e 	bl	8000ae0 <__aeabi_d2iz>
 800ac24:	9002      	str	r0, [sp, #8]
 800ac26:	f7f5 fc41 	bl	80004ac <__aeabi_i2d>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4630      	mov	r0, r6
 800ac30:	4639      	mov	r1, r7
 800ac32:	f7f5 faed 	bl	8000210 <__aeabi_dsub>
 800ac36:	f1bb 0f00 	cmp.w	fp, #0
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	dd6c      	ble.n	800ad1a <__kernel_rem_pio2+0x252>
 800ac40:	f108 31ff 	add.w	r1, r8, #4294967295
 800ac44:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac46:	9d02      	ldr	r5, [sp, #8]
 800ac48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac4c:	f1cb 0018 	rsb	r0, fp, #24
 800ac50:	fa43 f200 	asr.w	r2, r3, r0
 800ac54:	4415      	add	r5, r2
 800ac56:	4082      	lsls	r2, r0
 800ac58:	1a9b      	subs	r3, r3, r2
 800ac5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800ac5c:	9502      	str	r5, [sp, #8]
 800ac5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ac62:	f1cb 0217 	rsb	r2, fp, #23
 800ac66:	fa43 f902 	asr.w	r9, r3, r2
 800ac6a:	f1b9 0f00 	cmp.w	r9, #0
 800ac6e:	dd64      	ble.n	800ad3a <__kernel_rem_pio2+0x272>
 800ac70:	9b02      	ldr	r3, [sp, #8]
 800ac72:	2200      	movs	r2, #0
 800ac74:	3301      	adds	r3, #1
 800ac76:	9302      	str	r3, [sp, #8]
 800ac78:	4615      	mov	r5, r2
 800ac7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ac7e:	4590      	cmp	r8, r2
 800ac80:	f300 80b8 	bgt.w	800adf4 <__kernel_rem_pio2+0x32c>
 800ac84:	f1bb 0f00 	cmp.w	fp, #0
 800ac88:	dd07      	ble.n	800ac9a <__kernel_rem_pio2+0x1d2>
 800ac8a:	f1bb 0f01 	cmp.w	fp, #1
 800ac8e:	f000 80bf 	beq.w	800ae10 <__kernel_rem_pio2+0x348>
 800ac92:	f1bb 0f02 	cmp.w	fp, #2
 800ac96:	f000 80c6 	beq.w	800ae26 <__kernel_rem_pio2+0x35e>
 800ac9a:	f1b9 0f02 	cmp.w	r9, #2
 800ac9e:	d14c      	bne.n	800ad3a <__kernel_rem_pio2+0x272>
 800aca0:	4632      	mov	r2, r6
 800aca2:	463b      	mov	r3, r7
 800aca4:	494e      	ldr	r1, [pc, #312]	@ (800ade0 <__kernel_rem_pio2+0x318>)
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7f5 fab2 	bl	8000210 <__aeabi_dsub>
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	2d00      	cmp	r5, #0
 800acb2:	d042      	beq.n	800ad3a <__kernel_rem_pio2+0x272>
 800acb4:	4658      	mov	r0, fp
 800acb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800add0 <__kernel_rem_pio2+0x308>
 800acba:	f7ff fe49 	bl	800a950 <scalbn>
 800acbe:	4630      	mov	r0, r6
 800acc0:	4639      	mov	r1, r7
 800acc2:	ec53 2b10 	vmov	r2, r3, d0
 800acc6:	f7f5 faa3 	bl	8000210 <__aeabi_dsub>
 800acca:	4606      	mov	r6, r0
 800accc:	460f      	mov	r7, r1
 800acce:	e034      	b.n	800ad3a <__kernel_rem_pio2+0x272>
 800acd0:	4b44      	ldr	r3, [pc, #272]	@ (800ade4 <__kernel_rem_pio2+0x31c>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd8:	f7f5 fc52 	bl	8000580 <__aeabi_dmul>
 800acdc:	f7f5 ff00 	bl	8000ae0 <__aeabi_d2iz>
 800ace0:	f7f5 fbe4 	bl	80004ac <__aeabi_i2d>
 800ace4:	4b40      	ldr	r3, [pc, #256]	@ (800ade8 <__kernel_rem_pio2+0x320>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	4606      	mov	r6, r0
 800acea:	460f      	mov	r7, r1
 800acec:	f7f5 fc48 	bl	8000580 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf8:	f7f5 fa8a 	bl	8000210 <__aeabi_dsub>
 800acfc:	f7f5 fef0 	bl	8000ae0 <__aeabi_d2iz>
 800ad00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad04:	f849 0b04 	str.w	r0, [r9], #4
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7f5 fa82 	bl	8000214 <__adddf3>
 800ad10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad18:	e75d      	b.n	800abd6 <__kernel_rem_pio2+0x10e>
 800ad1a:	d107      	bne.n	800ad2c <__kernel_rem_pio2+0x264>
 800ad1c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad20:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ad2a:	e79e      	b.n	800ac6a <__kernel_rem_pio2+0x1a2>
 800ad2c:	4b2f      	ldr	r3, [pc, #188]	@ (800adec <__kernel_rem_pio2+0x324>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f7f5 feac 	bl	8000a8c <__aeabi_dcmpge>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d143      	bne.n	800adc0 <__kernel_rem_pio2+0x2f8>
 800ad38:	4681      	mov	r9, r0
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4630      	mov	r0, r6
 800ad40:	4639      	mov	r1, r7
 800ad42:	f7f5 fe85 	bl	8000a50 <__aeabi_dcmpeq>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f000 80bf 	beq.w	800aeca <__kernel_rem_pio2+0x402>
 800ad4c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad50:	2200      	movs	r2, #0
 800ad52:	9900      	ldr	r1, [sp, #0]
 800ad54:	428b      	cmp	r3, r1
 800ad56:	da6e      	bge.n	800ae36 <__kernel_rem_pio2+0x36e>
 800ad58:	2a00      	cmp	r2, #0
 800ad5a:	f000 8089 	beq.w	800ae70 <__kernel_rem_pio2+0x3a8>
 800ad5e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad62:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad64:	f1ab 0b18 	sub.w	fp, fp, #24
 800ad68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0f6      	beq.n	800ad5e <__kernel_rem_pio2+0x296>
 800ad70:	4658      	mov	r0, fp
 800ad72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800add0 <__kernel_rem_pio2+0x308>
 800ad76:	f7ff fdeb 	bl	800a950 <scalbn>
 800ad7a:	f108 0301 	add.w	r3, r8, #1
 800ad7e:	00da      	lsls	r2, r3, #3
 800ad80:	9205      	str	r2, [sp, #20]
 800ad82:	ec55 4b10 	vmov	r4, r5, d0
 800ad86:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ad88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ade4 <__kernel_rem_pio2+0x31c>
 800ad8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ad90:	4646      	mov	r6, r8
 800ad92:	f04f 0a00 	mov.w	sl, #0
 800ad96:	2e00      	cmp	r6, #0
 800ad98:	f280 80cf 	bge.w	800af3a <__kernel_rem_pio2+0x472>
 800ad9c:	4644      	mov	r4, r8
 800ad9e:	2c00      	cmp	r4, #0
 800ada0:	f2c0 80fd 	blt.w	800af9e <__kernel_rem_pio2+0x4d6>
 800ada4:	4b12      	ldr	r3, [pc, #72]	@ (800adf0 <__kernel_rem_pio2+0x328>)
 800ada6:	461f      	mov	r7, r3
 800ada8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800adaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adae:	9306      	str	r3, [sp, #24]
 800adb0:	f04f 0a00 	mov.w	sl, #0
 800adb4:	f04f 0b00 	mov.w	fp, #0
 800adb8:	2600      	movs	r6, #0
 800adba:	eba8 0504 	sub.w	r5, r8, r4
 800adbe:	e0e2      	b.n	800af86 <__kernel_rem_pio2+0x4be>
 800adc0:	f04f 0902 	mov.w	r9, #2
 800adc4:	e754      	b.n	800ac70 <__kernel_rem_pio2+0x1a8>
 800adc6:	bf00      	nop
	...
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	0800b540 	.word	0x0800b540
 800addc:	40200000 	.word	0x40200000
 800ade0:	3ff00000 	.word	0x3ff00000
 800ade4:	3e700000 	.word	0x3e700000
 800ade8:	41700000 	.word	0x41700000
 800adec:	3fe00000 	.word	0x3fe00000
 800adf0:	0800b500 	.word	0x0800b500
 800adf4:	f854 3b04 	ldr.w	r3, [r4], #4
 800adf8:	b945      	cbnz	r5, 800ae0c <__kernel_rem_pio2+0x344>
 800adfa:	b123      	cbz	r3, 800ae06 <__kernel_rem_pio2+0x33e>
 800adfc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ae00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae04:	2301      	movs	r3, #1
 800ae06:	3201      	adds	r2, #1
 800ae08:	461d      	mov	r5, r3
 800ae0a:	e738      	b.n	800ac7e <__kernel_rem_pio2+0x1b6>
 800ae0c:	1acb      	subs	r3, r1, r3
 800ae0e:	e7f7      	b.n	800ae00 <__kernel_rem_pio2+0x338>
 800ae10:	f108 32ff 	add.w	r2, r8, #4294967295
 800ae14:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ae20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae24:	e739      	b.n	800ac9a <__kernel_rem_pio2+0x1d2>
 800ae26:	f108 32ff 	add.w	r2, r8, #4294967295
 800ae2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae34:	e7f3      	b.n	800ae1e <__kernel_rem_pio2+0x356>
 800ae36:	a90c      	add	r1, sp, #48	@ 0x30
 800ae38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	e787      	b.n	800ad52 <__kernel_rem_pio2+0x28a>
 800ae42:	3401      	adds	r4, #1
 800ae44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae48:	2a00      	cmp	r2, #0
 800ae4a:	d0fa      	beq.n	800ae42 <__kernel_rem_pio2+0x37a>
 800ae4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae52:	eb0d 0503 	add.w	r5, sp, r3
 800ae56:	9b06      	ldr	r3, [sp, #24]
 800ae58:	aa20      	add	r2, sp, #128	@ 0x80
 800ae5a:	4443      	add	r3, r8
 800ae5c:	f108 0701 	add.w	r7, r8, #1
 800ae60:	3d98      	subs	r5, #152	@ 0x98
 800ae62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ae66:	4444      	add	r4, r8
 800ae68:	42bc      	cmp	r4, r7
 800ae6a:	da04      	bge.n	800ae76 <__kernel_rem_pio2+0x3ae>
 800ae6c:	46a0      	mov	r8, r4
 800ae6e:	e6a2      	b.n	800abb6 <__kernel_rem_pio2+0xee>
 800ae70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae72:	2401      	movs	r4, #1
 800ae74:	e7e6      	b.n	800ae44 <__kernel_rem_pio2+0x37c>
 800ae76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ae7c:	f7f5 fb16 	bl	80004ac <__aeabi_i2d>
 800ae80:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b148 <__kernel_rem_pio2+0x680>
 800ae84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae90:	46b2      	mov	sl, r6
 800ae92:	f04f 0800 	mov.w	r8, #0
 800ae96:	9b05      	ldr	r3, [sp, #20]
 800ae98:	4598      	cmp	r8, r3
 800ae9a:	dd05      	ble.n	800aea8 <__kernel_rem_pio2+0x3e0>
 800ae9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aea0:	3701      	adds	r7, #1
 800aea2:	eca5 7b02 	vstmia	r5!, {d7}
 800aea6:	e7df      	b.n	800ae68 <__kernel_rem_pio2+0x3a0>
 800aea8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800aeac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aeb0:	f7f5 fb66 	bl	8000580 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aebc:	f7f5 f9aa 	bl	8000214 <__adddf3>
 800aec0:	f108 0801 	add.w	r8, r8, #1
 800aec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aec8:	e7e5      	b.n	800ae96 <__kernel_rem_pio2+0x3ce>
 800aeca:	f1cb 0000 	rsb	r0, fp, #0
 800aece:	ec47 6b10 	vmov	d0, r6, r7
 800aed2:	f7ff fd3d 	bl	800a950 <scalbn>
 800aed6:	ec55 4b10 	vmov	r4, r5, d0
 800aeda:	4b9d      	ldr	r3, [pc, #628]	@ (800b150 <__kernel_rem_pio2+0x688>)
 800aedc:	2200      	movs	r2, #0
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fdd3 	bl	8000a8c <__aeabi_dcmpge>
 800aee6:	b300      	cbz	r0, 800af2a <__kernel_rem_pio2+0x462>
 800aee8:	4b9a      	ldr	r3, [pc, #616]	@ (800b154 <__kernel_rem_pio2+0x68c>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	4620      	mov	r0, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 fb46 	bl	8000580 <__aeabi_dmul>
 800aef4:	f7f5 fdf4 	bl	8000ae0 <__aeabi_d2iz>
 800aef8:	4606      	mov	r6, r0
 800aefa:	f7f5 fad7 	bl	80004ac <__aeabi_i2d>
 800aefe:	4b94      	ldr	r3, [pc, #592]	@ (800b150 <__kernel_rem_pio2+0x688>)
 800af00:	2200      	movs	r2, #0
 800af02:	f7f5 fb3d 	bl	8000580 <__aeabi_dmul>
 800af06:	460b      	mov	r3, r1
 800af08:	4602      	mov	r2, r0
 800af0a:	4629      	mov	r1, r5
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7f5 f97f 	bl	8000210 <__aeabi_dsub>
 800af12:	f7f5 fde5 	bl	8000ae0 <__aeabi_d2iz>
 800af16:	ab0c      	add	r3, sp, #48	@ 0x30
 800af18:	f10b 0b18 	add.w	fp, fp, #24
 800af1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800af20:	f108 0801 	add.w	r8, r8, #1
 800af24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800af28:	e722      	b.n	800ad70 <__kernel_rem_pio2+0x2a8>
 800af2a:	4620      	mov	r0, r4
 800af2c:	4629      	mov	r1, r5
 800af2e:	f7f5 fdd7 	bl	8000ae0 <__aeabi_d2iz>
 800af32:	ab0c      	add	r3, sp, #48	@ 0x30
 800af34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800af38:	e71a      	b.n	800ad70 <__kernel_rem_pio2+0x2a8>
 800af3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800af3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af40:	f7f5 fab4 	bl	80004ac <__aeabi_i2d>
 800af44:	4622      	mov	r2, r4
 800af46:	462b      	mov	r3, r5
 800af48:	f7f5 fb1a 	bl	8000580 <__aeabi_dmul>
 800af4c:	4652      	mov	r2, sl
 800af4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800af52:	465b      	mov	r3, fp
 800af54:	4620      	mov	r0, r4
 800af56:	4629      	mov	r1, r5
 800af58:	f7f5 fb12 	bl	8000580 <__aeabi_dmul>
 800af5c:	3e01      	subs	r6, #1
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	e718      	b.n	800ad96 <__kernel_rem_pio2+0x2ce>
 800af64:	9906      	ldr	r1, [sp, #24]
 800af66:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800af6a:	9106      	str	r1, [sp, #24]
 800af6c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800af70:	f7f5 fb06 	bl	8000580 <__aeabi_dmul>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4650      	mov	r0, sl
 800af7a:	4659      	mov	r1, fp
 800af7c:	f7f5 f94a 	bl	8000214 <__adddf3>
 800af80:	3601      	adds	r6, #1
 800af82:	4682      	mov	sl, r0
 800af84:	468b      	mov	fp, r1
 800af86:	9b00      	ldr	r3, [sp, #0]
 800af88:	429e      	cmp	r6, r3
 800af8a:	dc01      	bgt.n	800af90 <__kernel_rem_pio2+0x4c8>
 800af8c:	42b5      	cmp	r5, r6
 800af8e:	dae9      	bge.n	800af64 <__kernel_rem_pio2+0x49c>
 800af90:	ab48      	add	r3, sp, #288	@ 0x120
 800af92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af96:	e9c5 ab00 	strd	sl, fp, [r5]
 800af9a:	3c01      	subs	r4, #1
 800af9c:	e6ff      	b.n	800ad9e <__kernel_rem_pio2+0x2d6>
 800af9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	dc0b      	bgt.n	800afbc <__kernel_rem_pio2+0x4f4>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	dc39      	bgt.n	800b01c <__kernel_rem_pio2+0x554>
 800afa8:	d05d      	beq.n	800b066 <__kernel_rem_pio2+0x59e>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	f003 0007 	and.w	r0, r3, #7
 800afb0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800afb4:	ecbd 8b02 	vpop	{d8}
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d1f3      	bne.n	800afaa <__kernel_rem_pio2+0x4e2>
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800afc8:	eb0d 0403 	add.w	r4, sp, r3
 800afcc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800afd0:	4625      	mov	r5, r4
 800afd2:	46c2      	mov	sl, r8
 800afd4:	f1ba 0f00 	cmp.w	sl, #0
 800afd8:	f1a5 0508 	sub.w	r5, r5, #8
 800afdc:	dc6b      	bgt.n	800b0b6 <__kernel_rem_pio2+0x5ee>
 800afde:	4645      	mov	r5, r8
 800afe0:	2d01      	cmp	r5, #1
 800afe2:	f1a4 0408 	sub.w	r4, r4, #8
 800afe6:	f300 8087 	bgt.w	800b0f8 <__kernel_rem_pio2+0x630>
 800afea:	9c05      	ldr	r4, [sp, #20]
 800afec:	ab48      	add	r3, sp, #288	@ 0x120
 800afee:	441c      	add	r4, r3
 800aff0:	2000      	movs	r0, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	f1b8 0f01 	cmp.w	r8, #1
 800aff8:	f300 809c 	bgt.w	800b134 <__kernel_rem_pio2+0x66c>
 800affc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b000:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b004:	f1b9 0f00 	cmp.w	r9, #0
 800b008:	f040 80a6 	bne.w	800b158 <__kernel_rem_pio2+0x690>
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	e9c3 7800 	strd	r7, r8, [r3]
 800b012:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b016:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b01a:	e7c6      	b.n	800afaa <__kernel_rem_pio2+0x4e2>
 800b01c:	9d05      	ldr	r5, [sp, #20]
 800b01e:	ab48      	add	r3, sp, #288	@ 0x120
 800b020:	441d      	add	r5, r3
 800b022:	4644      	mov	r4, r8
 800b024:	2000      	movs	r0, #0
 800b026:	2100      	movs	r1, #0
 800b028:	2c00      	cmp	r4, #0
 800b02a:	da35      	bge.n	800b098 <__kernel_rem_pio2+0x5d0>
 800b02c:	f1b9 0f00 	cmp.w	r9, #0
 800b030:	d038      	beq.n	800b0a4 <__kernel_rem_pio2+0x5dc>
 800b032:	4602      	mov	r2, r0
 800b034:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b038:	9c04      	ldr	r4, [sp, #16]
 800b03a:	e9c4 2300 	strd	r2, r3, [r4]
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b046:	f7f5 f8e3 	bl	8000210 <__aeabi_dsub>
 800b04a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b04c:	2401      	movs	r4, #1
 800b04e:	45a0      	cmp	r8, r4
 800b050:	da2b      	bge.n	800b0aa <__kernel_rem_pio2+0x5e2>
 800b052:	f1b9 0f00 	cmp.w	r9, #0
 800b056:	d002      	beq.n	800b05e <__kernel_rem_pio2+0x596>
 800b058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b05c:	4619      	mov	r1, r3
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b064:	e7a1      	b.n	800afaa <__kernel_rem_pio2+0x4e2>
 800b066:	9c05      	ldr	r4, [sp, #20]
 800b068:	ab48      	add	r3, sp, #288	@ 0x120
 800b06a:	441c      	add	r4, r3
 800b06c:	2000      	movs	r0, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	f1b8 0f00 	cmp.w	r8, #0
 800b074:	da09      	bge.n	800b08a <__kernel_rem_pio2+0x5c2>
 800b076:	f1b9 0f00 	cmp.w	r9, #0
 800b07a:	d002      	beq.n	800b082 <__kernel_rem_pio2+0x5ba>
 800b07c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b080:	4619      	mov	r1, r3
 800b082:	9b04      	ldr	r3, [sp, #16]
 800b084:	e9c3 0100 	strd	r0, r1, [r3]
 800b088:	e78f      	b.n	800afaa <__kernel_rem_pio2+0x4e2>
 800b08a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b08e:	f7f5 f8c1 	bl	8000214 <__adddf3>
 800b092:	f108 38ff 	add.w	r8, r8, #4294967295
 800b096:	e7eb      	b.n	800b070 <__kernel_rem_pio2+0x5a8>
 800b098:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b09c:	f7f5 f8ba 	bl	8000214 <__adddf3>
 800b0a0:	3c01      	subs	r4, #1
 800b0a2:	e7c1      	b.n	800b028 <__kernel_rem_pio2+0x560>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e7c6      	b.n	800b038 <__kernel_rem_pio2+0x570>
 800b0aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b0ae:	f7f5 f8b1 	bl	8000214 <__adddf3>
 800b0b2:	3401      	adds	r4, #1
 800b0b4:	e7cb      	b.n	800b04e <__kernel_rem_pio2+0x586>
 800b0b6:	ed95 7b00 	vldr	d7, [r5]
 800b0ba:	ed8d 7b00 	vstr	d7, [sp]
 800b0be:	ed95 7b02 	vldr	d7, [r5, #8]
 800b0c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0c6:	ec53 2b17 	vmov	r2, r3, d7
 800b0ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0ce:	f7f5 f8a1 	bl	8000214 <__adddf3>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460f      	mov	r7, r1
 800b0da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0de:	f7f5 f897 	bl	8000210 <__aeabi_dsub>
 800b0e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0e6:	f7f5 f895 	bl	8000214 <__adddf3>
 800b0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b0f2:	e9c5 6700 	strd	r6, r7, [r5]
 800b0f6:	e76d      	b.n	800afd4 <__kernel_rem_pio2+0x50c>
 800b0f8:	ed94 7b00 	vldr	d7, [r4]
 800b0fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b100:	ec51 0b17 	vmov	r0, r1, d7
 800b104:	4652      	mov	r2, sl
 800b106:	465b      	mov	r3, fp
 800b108:	ed8d 7b00 	vstr	d7, [sp]
 800b10c:	f7f5 f882 	bl	8000214 <__adddf3>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
 800b118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b11c:	f7f5 f878 	bl	8000210 <__aeabi_dsub>
 800b120:	4652      	mov	r2, sl
 800b122:	465b      	mov	r3, fp
 800b124:	f7f5 f876 	bl	8000214 <__adddf3>
 800b128:	3d01      	subs	r5, #1
 800b12a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b12e:	e9c4 6700 	strd	r6, r7, [r4]
 800b132:	e755      	b.n	800afe0 <__kernel_rem_pio2+0x518>
 800b134:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b138:	f7f5 f86c 	bl	8000214 <__adddf3>
 800b13c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b140:	e758      	b.n	800aff4 <__kernel_rem_pio2+0x52c>
 800b142:	bf00      	nop
 800b144:	f3af 8000 	nop.w
	...
 800b150:	41700000 	.word	0x41700000
 800b154:	3e700000 	.word	0x3e700000
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	9a04      	ldr	r2, [sp, #16]
 800b15c:	601f      	str	r7, [r3, #0]
 800b15e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b162:	605c      	str	r4, [r3, #4]
 800b164:	609d      	str	r5, [r3, #8]
 800b166:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b16a:	60d3      	str	r3, [r2, #12]
 800b16c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b170:	6110      	str	r0, [r2, #16]
 800b172:	6153      	str	r3, [r2, #20]
 800b174:	e719      	b.n	800afaa <__kernel_rem_pio2+0x4e2>
 800b176:	bf00      	nop

0800b178 <floor>:
 800b178:	ec51 0b10 	vmov	r0, r1, d0
 800b17c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b188:	2e13      	cmp	r6, #19
 800b18a:	460c      	mov	r4, r1
 800b18c:	4605      	mov	r5, r0
 800b18e:	4680      	mov	r8, r0
 800b190:	dc34      	bgt.n	800b1fc <floor+0x84>
 800b192:	2e00      	cmp	r6, #0
 800b194:	da17      	bge.n	800b1c6 <floor+0x4e>
 800b196:	a332      	add	r3, pc, #200	@ (adr r3, 800b260 <floor+0xe8>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f83a 	bl	8000214 <__adddf3>
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f7f5 fc7c 	bl	8000aa0 <__aeabi_dcmpgt>
 800b1a8:	b150      	cbz	r0, 800b1c0 <floor+0x48>
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	da55      	bge.n	800b25a <floor+0xe2>
 800b1ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b1b2:	432c      	orrs	r4, r5
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	42ac      	cmp	r4, r5
 800b1b8:	4c2b      	ldr	r4, [pc, #172]	@ (800b268 <floor+0xf0>)
 800b1ba:	bf08      	it	eq
 800b1bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	e023      	b.n	800b20e <floor+0x96>
 800b1c6:	4f29      	ldr	r7, [pc, #164]	@ (800b26c <floor+0xf4>)
 800b1c8:	4137      	asrs	r7, r6
 800b1ca:	ea01 0307 	and.w	r3, r1, r7
 800b1ce:	4303      	orrs	r3, r0
 800b1d0:	d01d      	beq.n	800b20e <floor+0x96>
 800b1d2:	a323      	add	r3, pc, #140	@ (adr r3, 800b260 <floor+0xe8>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 f81c 	bl	8000214 <__adddf3>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f7f5 fc5e 	bl	8000aa0 <__aeabi_dcmpgt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d0eb      	beq.n	800b1c0 <floor+0x48>
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	bfbe      	ittt	lt
 800b1ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b1f0:	4133      	asrlt	r3, r6
 800b1f2:	18e4      	addlt	r4, r4, r3
 800b1f4:	ea24 0407 	bic.w	r4, r4, r7
 800b1f8:	2500      	movs	r5, #0
 800b1fa:	e7e1      	b.n	800b1c0 <floor+0x48>
 800b1fc:	2e33      	cmp	r6, #51	@ 0x33
 800b1fe:	dd0a      	ble.n	800b216 <floor+0x9e>
 800b200:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b204:	d103      	bne.n	800b20e <floor+0x96>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	f7f5 f803 	bl	8000214 <__adddf3>
 800b20e:	ec41 0b10 	vmov	d0, r0, r1
 800b212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b216:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b21a:	f04f 37ff 	mov.w	r7, #4294967295
 800b21e:	40df      	lsrs	r7, r3
 800b220:	4207      	tst	r7, r0
 800b222:	d0f4      	beq.n	800b20e <floor+0x96>
 800b224:	a30e      	add	r3, pc, #56	@ (adr r3, 800b260 <floor+0xe8>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f4 fff3 	bl	8000214 <__adddf3>
 800b22e:	2200      	movs	r2, #0
 800b230:	2300      	movs	r3, #0
 800b232:	f7f5 fc35 	bl	8000aa0 <__aeabi_dcmpgt>
 800b236:	2800      	cmp	r0, #0
 800b238:	d0c2      	beq.n	800b1c0 <floor+0x48>
 800b23a:	2c00      	cmp	r4, #0
 800b23c:	da0a      	bge.n	800b254 <floor+0xdc>
 800b23e:	2e14      	cmp	r6, #20
 800b240:	d101      	bne.n	800b246 <floor+0xce>
 800b242:	3401      	adds	r4, #1
 800b244:	e006      	b.n	800b254 <floor+0xdc>
 800b246:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b24a:	2301      	movs	r3, #1
 800b24c:	40b3      	lsls	r3, r6
 800b24e:	441d      	add	r5, r3
 800b250:	4545      	cmp	r5, r8
 800b252:	d3f6      	bcc.n	800b242 <floor+0xca>
 800b254:	ea25 0507 	bic.w	r5, r5, r7
 800b258:	e7b2      	b.n	800b1c0 <floor+0x48>
 800b25a:	2500      	movs	r5, #0
 800b25c:	462c      	mov	r4, r5
 800b25e:	e7af      	b.n	800b1c0 <floor+0x48>
 800b260:	8800759c 	.word	0x8800759c
 800b264:	7e37e43c 	.word	0x7e37e43c
 800b268:	bff00000 	.word	0xbff00000
 800b26c:	000fffff 	.word	0x000fffff

0800b270 <_init>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr

0800b27c <_fini>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	bf00      	nop
 800b280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b282:	bc08      	pop	{r3}
 800b284:	469e      	mov	lr, r3
 800b286:	4770      	bx	lr
